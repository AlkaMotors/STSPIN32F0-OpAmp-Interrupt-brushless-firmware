
stm32f0bemf_op_amp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d18  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08002dd8  08002dd8  00012dd8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002e24  08002e24  00012e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002e28  08002e28  00012e28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000003c  20000000  08002e2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000034c  2000003c  08002e68  0002003c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000388  08002e68  00020388  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
  9 .debug_info   00011b46  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000024e1  00000000  00000000  00031baa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006db6  00000000  00000000  0003408b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000007f8  00000000  00000000  0003ae48  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000d20  00000000  00000000  0003b640  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004e15  00000000  00000000  0003c360  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000031af  00000000  00000000  00041175  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00044324  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000017ec  00000000  00000000  000443a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000003c 	.word	0x2000003c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002dc0 	.word	0x08002dc0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000040 	.word	0x20000040
 8000104:	08002dc0 	.word	0x08002dc0

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000408:	b510      	push	{r4, lr}
 800040a:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 800040c:	f000 fcf0 	bl	8000df0 <HAL_RCC_GetHCLKFreq>
 8000410:	21fa      	movs	r1, #250	; 0xfa
 8000412:	0089      	lsls	r1, r1, #2
 8000414:	f7ff fe82 	bl	800011c <__udivsi3>
 8000418:	f000 f870 	bl	80004fc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 800041c:	2001      	movs	r0, #1
 800041e:	2200      	movs	r2, #0
 8000420:	0021      	movs	r1, r4
 8000422:	4240      	negs	r0, r0
 8000424:	f000 f830 	bl	8000488 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000428:	2000      	movs	r0, #0
 800042a:	bd10      	pop	{r4, pc}

0800042c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800042c:	2310      	movs	r3, #16
 800042e:	4a06      	ldr	r2, [pc, #24]	; (8000448 <HAL_Init+0x1c>)
{
 8000430:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000432:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000434:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000436:	430b      	orrs	r3, r1
 8000438:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 800043a:	f7ff ffe5 	bl	8000408 <HAL_InitTick>
  HAL_MspInit();
 800043e:	f002 fb4f 	bl	8002ae0 <HAL_MspInit>
}
 8000442:	2000      	movs	r0, #0
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	40022000 	.word	0x40022000

0800044c <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800044c:	4a02      	ldr	r2, [pc, #8]	; (8000458 <HAL_IncTick+0xc>)
 800044e:	6813      	ldr	r3, [r2, #0]
 8000450:	3301      	adds	r3, #1
 8000452:	6013      	str	r3, [r2, #0]
}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)
 8000458:	200000f0 	.word	0x200000f0

0800045c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800045c:	4b01      	ldr	r3, [pc, #4]	; (8000464 <HAL_GetTick+0x8>)
 800045e:	6818      	ldr	r0, [r3, #0]
}
 8000460:	4770      	bx	lr
 8000462:	46c0      	nop			; (mov r8, r8)
 8000464:	200000f0 	.word	0x200000f0

08000468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000468:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800046a:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800046c:	f7ff fff6 	bl	800045c <HAL_GetTick>
  uint32_t wait = Delay;
 8000470:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000472:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 8000474:	1c63      	adds	r3, r4, #1
 8000476:	1e5a      	subs	r2, r3, #1
 8000478:	4193      	sbcs	r3, r2
 800047a:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800047c:	f7ff ffee 	bl	800045c <HAL_GetTick>
 8000480:	1b40      	subs	r0, r0, r5
 8000482:	42a0      	cmp	r0, r4
 8000484:	d3fa      	bcc.n	800047c <HAL_Delay+0x14>
  {
  }
}
 8000486:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

08000488 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000488:	b570      	push	{r4, r5, r6, lr}
 800048a:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 800048c:	2800      	cmp	r0, #0
 800048e:	da14      	bge.n	80004ba <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000490:	230f      	movs	r3, #15
 8000492:	b2c0      	uxtb	r0, r0
 8000494:	4003      	ands	r3, r0
 8000496:	3b08      	subs	r3, #8
 8000498:	4a11      	ldr	r2, [pc, #68]	; (80004e0 <HAL_NVIC_SetPriority+0x58>)
 800049a:	089b      	lsrs	r3, r3, #2
 800049c:	009b      	lsls	r3, r3, #2
 800049e:	189b      	adds	r3, r3, r2
 80004a0:	2203      	movs	r2, #3
 80004a2:	4010      	ands	r0, r2
 80004a4:	4090      	lsls	r0, r2
 80004a6:	32fc      	adds	r2, #252	; 0xfc
 80004a8:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004aa:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004ac:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004ae:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004b0:	69dc      	ldr	r4, [r3, #28]
 80004b2:	43ac      	bics	r4, r5
 80004b4:	4321      	orrs	r1, r4
 80004b6:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004ba:	2503      	movs	r5, #3
 80004bc:	0883      	lsrs	r3, r0, #2
 80004be:	4028      	ands	r0, r5
 80004c0:	40a8      	lsls	r0, r5
 80004c2:	35fc      	adds	r5, #252	; 0xfc
 80004c4:	002e      	movs	r6, r5
 80004c6:	4a07      	ldr	r2, [pc, #28]	; (80004e4 <HAL_NVIC_SetPriority+0x5c>)
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	189b      	adds	r3, r3, r2
 80004cc:	22c0      	movs	r2, #192	; 0xc0
 80004ce:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004d0:	4029      	ands	r1, r5
 80004d2:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004d4:	0092      	lsls	r2, r2, #2
 80004d6:	589c      	ldr	r4, [r3, r2]
 80004d8:	43b4      	bics	r4, r6
 80004da:	4321      	orrs	r1, r4
 80004dc:	5099      	str	r1, [r3, r2]
 80004de:	e7eb      	b.n	80004b8 <HAL_NVIC_SetPriority+0x30>
 80004e0:	e000ed00 	.word	0xe000ed00
 80004e4:	e000e100 	.word	0xe000e100

080004e8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80004e8:	231f      	movs	r3, #31
 80004ea:	4018      	ands	r0, r3
 80004ec:	3b1e      	subs	r3, #30
 80004ee:	4083      	lsls	r3, r0
 80004f0:	4a01      	ldr	r2, [pc, #4]	; (80004f8 <HAL_NVIC_EnableIRQ+0x10>)
 80004f2:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80004f4:	4770      	bx	lr
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	e000e100 	.word	0xe000e100

080004fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004fc:	4a09      	ldr	r2, [pc, #36]	; (8000524 <HAL_SYSTICK_Config+0x28>)
 80004fe:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000500:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000502:	4293      	cmp	r3, r2
 8000504:	d80d      	bhi.n	8000522 <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000506:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000508:	4a07      	ldr	r2, [pc, #28]	; (8000528 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800050a:	4808      	ldr	r0, [pc, #32]	; (800052c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800050c:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800050e:	6a03      	ldr	r3, [r0, #32]
 8000510:	0609      	lsls	r1, r1, #24
 8000512:	021b      	lsls	r3, r3, #8
 8000514:	0a1b      	lsrs	r3, r3, #8
 8000516:	430b      	orrs	r3, r1
 8000518:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800051a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800051c:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800051e:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000520:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000522:	4770      	bx	lr
 8000524:	00ffffff 	.word	0x00ffffff
 8000528:	e000e010 	.word	0xe000e010
 800052c:	e000ed00 	.word	0xe000ed00

08000530 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000530:	4b05      	ldr	r3, [pc, #20]	; (8000548 <HAL_SYSTICK_CLKSourceConfig+0x18>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000532:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000534:	2804      	cmp	r0, #4
 8000536:	d102      	bne.n	800053e <HAL_SYSTICK_CLKSourceConfig+0xe>
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000538:	4310      	orrs	r0, r2
 800053a:	6018      	str	r0, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800053c:	4770      	bx	lr
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800053e:	2104      	movs	r1, #4
 8000540:	438a      	bics	r2, r1
 8000542:	601a      	str	r2, [r3, #0]
}
 8000544:	e7fa      	b.n	800053c <HAL_SYSTICK_CLKSourceConfig+0xc>
 8000546:	46c0      	nop			; (mov r8, r8)
 8000548:	e000e010 	.word	0xe000e010

0800054c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800054c:	4770      	bx	lr

0800054e <HAL_SYSTICK_IRQHandler>:
{
 800054e:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 8000550:	f7ff fffc 	bl	800054c <HAL_SYSTICK_Callback>
}
 8000554:	bd10      	pop	{r4, pc}
	...

08000558 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	0004      	movs	r4, r0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
  {
    return HAL_ERROR;
 800055c:	2001      	movs	r0, #1
  if(NULL == hdma)
 800055e:	2c00      	cmp	r4, #0
 8000560:	d028      	beq.n	80005b4 <HAL_DMA_Init+0x5c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000562:	2302      	movs	r3, #2

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000564:	6820      	ldr	r0, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000566:	1ca5      	adds	r5, r4, #2
 8000568:	77eb      	strb	r3, [r5, #31]
  tmp = hdma->Instance->CCR;
 800056a:	6802      	ldr	r2, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800056c:	4b12      	ldr	r3, [pc, #72]	; (80005b8 <HAL_DMA_Init+0x60>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800056e:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000570:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 8000572:	6863      	ldr	r3, [r4, #4]
 8000574:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000576:	68e1      	ldr	r1, [r4, #12]
 8000578:	430b      	orrs	r3, r1
 800057a:	6921      	ldr	r1, [r4, #16]
 800057c:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800057e:	6961      	ldr	r1, [r4, #20]
 8000580:	430b      	orrs	r3, r1
 8000582:	69a1      	ldr	r1, [r4, #24]
 8000584:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8000586:	69e1      	ldr	r1, [r4, #28]
 8000588:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 800058a:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800058c:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800058e:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <HAL_DMA_Init+0x64>)
 8000590:	2114      	movs	r1, #20
 8000592:	18c0      	adds	r0, r0, r3
 8000594:	f7ff fdc2 	bl	800011c <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8000598:	4b09      	ldr	r3, [pc, #36]	; (80005c0 <HAL_DMA_Init+0x68>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800059a:	0080      	lsls	r0, r0, #2
 800059c:	6420      	str	r0, [r4, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800059e:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 80005a0:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80005a2:	2301      	movs	r3, #1
  hdma->XferCpltCallback = NULL;
 80005a4:	62a0      	str	r0, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80005a6:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80005a8:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80005aa:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80005ac:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->Lock = HAL_UNLOCKED;
 80005ae:	18e4      	adds	r4, r4, r3
  hdma->State = HAL_DMA_STATE_READY;
 80005b0:	77eb      	strb	r3, [r5, #31]
  hdma->Lock = HAL_UNLOCKED;
 80005b2:	77e0      	strb	r0, [r4, #31]
}  
 80005b4:	bd70      	pop	{r4, r5, r6, pc}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	ffffc00f 	.word	0xffffc00f
 80005bc:	bffdfff8 	.word	0xbffdfff8
 80005c0:	40020000 	.word	0x40020000

080005c4 <HAL_DMA_Start_IT>:
{
 80005c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 80005c6:	1c46      	adds	r6, r0, #1
 80005c8:	7ff5      	ldrb	r5, [r6, #31]
 80005ca:	2402      	movs	r4, #2
 80005cc:	2d01      	cmp	r5, #1
 80005ce:	d026      	beq.n	800061e <HAL_DMA_Start_IT+0x5a>
 80005d0:	2501      	movs	r5, #1
 80005d2:	77f5      	strb	r5, [r6, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 80005d4:	1905      	adds	r5, r0, r4
 80005d6:	46ac      	mov	ip, r5
 80005d8:	7fed      	ldrb	r5, [r5, #31]
 80005da:	2700      	movs	r7, #0
 80005dc:	b2ed      	uxtb	r5, r5
 80005de:	2d01      	cmp	r5, #1
 80005e0:	d129      	bne.n	8000636 <HAL_DMA_Start_IT+0x72>
  	hdma->State = HAL_DMA_STATE_BUSY;
 80005e2:	4666      	mov	r6, ip
 80005e4:	77f4      	strb	r4, [r6, #31]
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80005e6:	6804      	ldr	r4, [r0, #0]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80005e8:	6387      	str	r7, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80005ea:	6826      	ldr	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80005ec:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80005ee:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80005f0:	40bd      	lsls	r5, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80005f2:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80005f4:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 80005f6:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 80005f8:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80005fa:	6843      	ldr	r3, [r0, #4]
 80005fc:	6805      	ldr	r5, [r0, #0]
 80005fe:	2b10      	cmp	r3, #16
 8000600:	d10f      	bne.n	8000622 <HAL_DMA_Start_IT+0x5e>
    hdma->Instance->CPAR = DstAddress;
 8000602:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000604:	60e1      	str	r1, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000606:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000608:	6822      	ldr	r2, [r4, #0]
    if(NULL != hdma->XferHalfCpltCallback )
 800060a:	2b00      	cmp	r3, #0
 800060c:	d00c      	beq.n	8000628 <HAL_DMA_Start_IT+0x64>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800060e:	230e      	movs	r3, #14
 8000610:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000612:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000614:	2301      	movs	r3, #1
	HAL_StatusTypeDef status = HAL_OK;
 8000616:	2400      	movs	r4, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000618:	682a      	ldr	r2, [r5, #0]
 800061a:	4313      	orrs	r3, r2
 800061c:	602b      	str	r3, [r5, #0]
} 
 800061e:	0020      	movs	r0, r4
 8000620:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = SrcAddress;
 8000622:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8000624:	60e2      	str	r2, [r4, #12]
 8000626:	e7ee      	b.n	8000606 <HAL_DMA_Start_IT+0x42>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000628:	230a      	movs	r3, #10
 800062a:	4313      	orrs	r3, r2
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800062c:	2204      	movs	r2, #4
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800062e:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000630:	6823      	ldr	r3, [r4, #0]
 8000632:	4393      	bics	r3, r2
 8000634:	e7ed      	b.n	8000612 <HAL_DMA_Start_IT+0x4e>
    __HAL_UNLOCK(hdma); 
 8000636:	77f7      	strb	r7, [r6, #31]
 8000638:	e7f1      	b.n	800061e <HAL_DMA_Start_IT+0x5a>

0800063a <HAL_DMA_IRQHandler>:
{
 800063a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800063c:	2704      	movs	r7, #4
 800063e:	003e      	movs	r6, r7
 8000640:	6c01      	ldr	r1, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000642:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000644:	408e      	lsls	r6, r1
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000646:	6815      	ldr	r5, [r2, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000648:	6803      	ldr	r3, [r0, #0]
 800064a:	681c      	ldr	r4, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800064c:	422e      	tst	r6, r5
 800064e:	d00d      	beq.n	800066c <HAL_DMA_IRQHandler+0x32>
 8000650:	423c      	tst	r4, r7
 8000652:	d00b      	beq.n	800066c <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000654:	6819      	ldr	r1, [r3, #0]
 8000656:	0689      	lsls	r1, r1, #26
 8000658:	d402      	bmi.n	8000660 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800065a:	6819      	ldr	r1, [r3, #0]
 800065c:	43b9      	bics	r1, r7
 800065e:	6019      	str	r1, [r3, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000660:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000662:	6056      	str	r6, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000664:	2b00      	cmp	r3, #0
 8000666:	d019      	beq.n	800069c <HAL_DMA_IRQHandler+0x62>
    	hdma->XferErrorCallback(hdma);
 8000668:	4798      	blx	r3
}  
 800066a:	e017      	b.n	800069c <HAL_DMA_IRQHandler+0x62>
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800066c:	2702      	movs	r7, #2
 800066e:	003e      	movs	r6, r7
 8000670:	408e      	lsls	r6, r1
 8000672:	422e      	tst	r6, r5
 8000674:	d013      	beq.n	800069e <HAL_DMA_IRQHandler+0x64>
 8000676:	423c      	tst	r4, r7
 8000678:	d011      	beq.n	800069e <HAL_DMA_IRQHandler+0x64>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800067a:	6819      	ldr	r1, [r3, #0]
 800067c:	0689      	lsls	r1, r1, #26
 800067e:	d406      	bmi.n	800068e <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000680:	240a      	movs	r4, #10
 8000682:	6819      	ldr	r1, [r3, #0]
 8000684:	43a1      	bics	r1, r4
 8000686:	6019      	str	r1, [r3, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000688:	2101      	movs	r1, #1
 800068a:	19c3      	adds	r3, r0, r7
 800068c:	77d9      	strb	r1, [r3, #31]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800068e:	6056      	str	r6, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8000690:	2200      	movs	r2, #0
 8000692:	1c43      	adds	r3, r0, #1
 8000694:	77da      	strb	r2, [r3, #31]
  	if(hdma->XferCpltCallback != NULL)
 8000696:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if(hdma->XferErrorCallback != NULL)
 8000698:	4293      	cmp	r3, r2
 800069a:	d1e5      	bne.n	8000668 <HAL_DMA_IRQHandler+0x2e>
}  
 800069c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800069e:	2608      	movs	r6, #8
 80006a0:	0037      	movs	r7, r6
 80006a2:	408f      	lsls	r7, r1
 80006a4:	423d      	tst	r5, r7
 80006a6:	d0f9      	beq.n	800069c <HAL_DMA_IRQHandler+0x62>
 80006a8:	4234      	tst	r4, r6
 80006aa:	d0f7      	beq.n	800069c <HAL_DMA_IRQHandler+0x62>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80006ac:	250e      	movs	r5, #14
 80006ae:	681c      	ldr	r4, [r3, #0]
 80006b0:	43ac      	bics	r4, r5
 80006b2:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80006b4:	2301      	movs	r3, #1
 80006b6:	001c      	movs	r4, r3
 80006b8:	408c      	lsls	r4, r1
 80006ba:	6054      	str	r4, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;    
 80006bc:	1c82      	adds	r2, r0, #2
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80006be:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 80006c0:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma); 
 80006c2:	2200      	movs	r2, #0
 80006c4:	18c3      	adds	r3, r0, r3
 80006c6:	77da      	strb	r2, [r3, #31]
    if(hdma->XferErrorCallback != NULL)
 80006c8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80006ca:	e7e5      	b.n	8000698 <HAL_DMA_IRQHandler+0x5e>

080006cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80006cc:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80006ce:	680b      	ldr	r3, [r1, #0]
{ 
 80006d0:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 80006d2:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 80006d4:	2300      	movs	r3, #0
{ 
 80006d6:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80006d8:	9a02      	ldr	r2, [sp, #8]
 80006da:	40da      	lsrs	r2, r3
 80006dc:	d101      	bne.n	80006e2 <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 80006de:	b007      	add	sp, #28
 80006e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80006e2:	2201      	movs	r2, #1
 80006e4:	409a      	lsls	r2, r3
 80006e6:	9203      	str	r2, [sp, #12]
 80006e8:	9903      	ldr	r1, [sp, #12]
 80006ea:	9a02      	ldr	r2, [sp, #8]
 80006ec:	400a      	ands	r2, r1
 80006ee:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 80006f0:	d100      	bne.n	80006f4 <HAL_GPIO_Init+0x28>
 80006f2:	e088      	b.n	8000806 <HAL_GPIO_Init+0x13a>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80006f4:	9a01      	ldr	r2, [sp, #4]
 80006f6:	2110      	movs	r1, #16
 80006f8:	6852      	ldr	r2, [r2, #4]
 80006fa:	0016      	movs	r6, r2
 80006fc:	438e      	bics	r6, r1
 80006fe:	2e02      	cmp	r6, #2
 8000700:	d10e      	bne.n	8000720 <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000702:	2507      	movs	r5, #7
 8000704:	401d      	ands	r5, r3
 8000706:	00ad      	lsls	r5, r5, #2
 8000708:	3901      	subs	r1, #1
 800070a:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 800070c:	08dc      	lsrs	r4, r3, #3
 800070e:	00a4      	lsls	r4, r4, #2
 8000710:	1904      	adds	r4, r0, r4
 8000712:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000714:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000716:	9901      	ldr	r1, [sp, #4]
 8000718:	6909      	ldr	r1, [r1, #16]
 800071a:	40a9      	lsls	r1, r5
 800071c:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 800071e:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000720:	2403      	movs	r4, #3
 8000722:	005f      	lsls	r7, r3, #1
 8000724:	40bc      	lsls	r4, r7
 8000726:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 8000728:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800072a:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800072c:	4025      	ands	r5, r4
 800072e:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000730:	2503      	movs	r5, #3
 8000732:	4015      	ands	r5, r2
 8000734:	40bd      	lsls	r5, r7
 8000736:	4661      	mov	r1, ip
 8000738:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 800073a:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800073c:	2e01      	cmp	r6, #1
 800073e:	d80f      	bhi.n	8000760 <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000740:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 8000742:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000744:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000746:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000748:	40bd      	lsls	r5, r7
 800074a:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 800074c:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 800074e:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000750:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000752:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000754:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000756:	2101      	movs	r1, #1
 8000758:	400d      	ands	r5, r1
 800075a:	409d      	lsls	r5, r3
 800075c:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 800075e:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 8000760:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000762:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000764:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000766:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000768:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800076a:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800076c:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 800076e:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8000770:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000772:	420a      	tst	r2, r1
 8000774:	d047      	beq.n	8000806 <HAL_GPIO_Init+0x13a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000776:	2101      	movs	r1, #1
 8000778:	4c24      	ldr	r4, [pc, #144]	; (800080c <HAL_GPIO_Init+0x140>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800077a:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800077c:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800077e:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000780:	430d      	orrs	r5, r1
 8000782:	61a5      	str	r5, [r4, #24]
 8000784:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000786:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000788:	400c      	ands	r4, r1
 800078a:	9405      	str	r4, [sp, #20]
 800078c:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800078e:	240f      	movs	r4, #15
 8000790:	491f      	ldr	r1, [pc, #124]	; (8000810 <HAL_GPIO_Init+0x144>)
 8000792:	00ad      	lsls	r5, r5, #2
 8000794:	00b6      	lsls	r6, r6, #2
 8000796:	186d      	adds	r5, r5, r1
 8000798:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800079a:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 800079c:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800079e:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80007a0:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007a2:	2400      	movs	r4, #0
 80007a4:	4288      	cmp	r0, r1
 80007a6:	d008      	beq.n	80007ba <HAL_GPIO_Init+0xee>
 80007a8:	491a      	ldr	r1, [pc, #104]	; (8000814 <HAL_GPIO_Init+0x148>)
 80007aa:	3401      	adds	r4, #1
 80007ac:	4288      	cmp	r0, r1
 80007ae:	d004      	beq.n	80007ba <HAL_GPIO_Init+0xee>
 80007b0:	4919      	ldr	r1, [pc, #100]	; (8000818 <HAL_GPIO_Init+0x14c>)
 80007b2:	3404      	adds	r4, #4
 80007b4:	4288      	cmp	r0, r1
 80007b6:	d100      	bne.n	80007ba <HAL_GPIO_Init+0xee>
 80007b8:	3c03      	subs	r4, #3
 80007ba:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80007bc:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007be:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 80007c0:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 80007c2:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 80007c4:	4c15      	ldr	r4, [pc, #84]	; (800081c <HAL_GPIO_Init+0x150>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80007c6:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 80007c8:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 80007ca:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80007cc:	03d1      	lsls	r1, r2, #15
 80007ce:	d401      	bmi.n	80007d4 <HAL_GPIO_Init+0x108>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80007d0:	003e      	movs	r6, r7
 80007d2:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 80007d4:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 80007d6:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 80007d8:	9e00      	ldr	r6, [sp, #0]
 80007da:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80007dc:	0391      	lsls	r1, r2, #14
 80007de:	d401      	bmi.n	80007e4 <HAL_GPIO_Init+0x118>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80007e0:	003e      	movs	r6, r7
 80007e2:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 80007e4:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 80007e6:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 80007e8:	9e00      	ldr	r6, [sp, #0]
 80007ea:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80007ec:	02d1      	lsls	r1, r2, #11
 80007ee:	d401      	bmi.n	80007f4 <HAL_GPIO_Init+0x128>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80007f0:	003e      	movs	r6, r7
 80007f2:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 80007f4:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 80007f6:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 80007f8:	9f00      	ldr	r7, [sp, #0]
 80007fa:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80007fc:	0292      	lsls	r2, r2, #10
 80007fe:	d401      	bmi.n	8000804 <HAL_GPIO_Init+0x138>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000800:	402e      	ands	r6, r5
 8000802:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8000804:	60e7      	str	r7, [r4, #12]
    position++;
 8000806:	3301      	adds	r3, #1
 8000808:	e766      	b.n	80006d8 <HAL_GPIO_Init+0xc>
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	40021000 	.word	0x40021000
 8000810:	40010000 	.word	0x40010000
 8000814:	48000400 	.word	0x48000400
 8000818:	48000800 	.word	0x48000800
 800081c:	40010400 	.word	0x40010400

08000820 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000820:	6900      	ldr	r0, [r0, #16]
 8000822:	4008      	ands	r0, r1
 8000824:	1e41      	subs	r1, r0, #1
 8000826:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8000828:	b2c0      	uxtb	r0, r0
  }
 800082a:	4770      	bx	lr

0800082c <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800082c:	6943      	ldr	r3, [r0, #20]
 800082e:	4059      	eors	r1, r3
 8000830:	6141      	str	r1, [r0, #20]
}
 8000832:	4770      	bx	lr

08000834 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	0004      	movs	r4, r0
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
  {
    return HAL_ERROR;
 8000838:	2001      	movs	r0, #1
  if(hiwdg == NULL)
 800083a:	2c00      	cmp	r4, #0
 800083c:	d014      	beq.n	8000868 <HAL_IWDG_Init+0x34>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 800083e:	6823      	ldr	r3, [r4, #0]
 8000840:	4a0f      	ldr	r2, [pc, #60]	; (8000880 <HAL_IWDG_Init+0x4c>)
 8000842:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8000844:	4a0f      	ldr	r2, [pc, #60]	; (8000884 <HAL_IWDG_Init+0x50>)
 8000846:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8000848:	6862      	ldr	r2, [r4, #4]
 800084a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800084c:	68a2      	ldr	r2, [r4, #8]
 800084e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8000850:	f7ff fe04 	bl	800045c <HAL_GetTick>
 8000854:	0005      	movs	r5, r0

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8000856:	6823      	ldr	r3, [r4, #0]
 8000858:	68d8      	ldr	r0, [r3, #12]
 800085a:	2800      	cmp	r0, #0
 800085c:	d105      	bne.n	800086a <HAL_IWDG_Init+0x36>
    }
  }

  /* If window parameter is different than current value, modify window 
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 800085e:	6919      	ldr	r1, [r3, #16]
 8000860:	68e2      	ldr	r2, [r4, #12]
 8000862:	4291      	cmp	r1, r2
 8000864:	d008      	beq.n	8000878 <HAL_IWDG_Init+0x44>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing 
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8000866:	611a      	str	r2, [r3, #16]
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 8000868:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 800086a:	f7ff fdf7 	bl	800045c <HAL_GetTick>
 800086e:	1b40      	subs	r0, r0, r5
 8000870:	2827      	cmp	r0, #39	; 0x27
 8000872:	d9f0      	bls.n	8000856 <HAL_IWDG_Init+0x22>
      return HAL_TIMEOUT;
 8000874:	2003      	movs	r0, #3
 8000876:	e7f7      	b.n	8000868 <HAL_IWDG_Init+0x34>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000878:	4a03      	ldr	r2, [pc, #12]	; (8000888 <HAL_IWDG_Init+0x54>)
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	e7f4      	b.n	8000868 <HAL_IWDG_Init+0x34>
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	0000cccc 	.word	0x0000cccc
 8000884:	00005555 	.word	0x00005555
 8000888:	0000aaaa 	.word	0x0000aaaa

0800088c <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800088c:	6803      	ldr	r3, [r0, #0]
 800088e:	4a02      	ldr	r2, [pc, #8]	; (8000898 <HAL_IWDG_Refresh+0xc>)

  /* Return function status */
  return HAL_OK;
}
 8000890:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000892:	601a      	str	r2, [r3, #0]
}
 8000894:	4770      	bx	lr
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	0000aaaa 	.word	0x0000aaaa

0800089c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800089c:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800089e:	6803      	ldr	r3, [r0, #0]
{
 80008a0:	b085      	sub	sp, #20
 80008a2:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008a4:	07db      	lsls	r3, r3, #31
 80008a6:	d42f      	bmi.n	8000908 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008a8:	682b      	ldr	r3, [r5, #0]
 80008aa:	079b      	lsls	r3, r3, #30
 80008ac:	d500      	bpl.n	80008b0 <HAL_RCC_OscConfig+0x14>
 80008ae:	e081      	b.n	80009b4 <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008b0:	682b      	ldr	r3, [r5, #0]
 80008b2:	071b      	lsls	r3, r3, #28
 80008b4:	d500      	bpl.n	80008b8 <HAL_RCC_OscConfig+0x1c>
 80008b6:	e0bc      	b.n	8000a32 <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008b8:	682b      	ldr	r3, [r5, #0]
 80008ba:	075b      	lsls	r3, r3, #29
 80008bc:	d500      	bpl.n	80008c0 <HAL_RCC_OscConfig+0x24>
 80008be:	e0df      	b.n	8000a80 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80008c0:	682b      	ldr	r3, [r5, #0]
 80008c2:	06db      	lsls	r3, r3, #27
 80008c4:	d51a      	bpl.n	80008fc <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80008c6:	696a      	ldr	r2, [r5, #20]
 80008c8:	4cb5      	ldr	r4, [pc, #724]	; (8000ba0 <HAL_RCC_OscConfig+0x304>)
 80008ca:	2304      	movs	r3, #4
 80008cc:	2a01      	cmp	r2, #1
 80008ce:	d000      	beq.n	80008d2 <HAL_RCC_OscConfig+0x36>
 80008d0:	e14b      	b.n	8000b6a <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80008d2:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80008d4:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80008d6:	430b      	orrs	r3, r1
 80008d8:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80008da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80008dc:	431a      	orrs	r2, r3
 80008de:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 80008e0:	f7ff fdbc 	bl	800045c <HAL_GetTick>
 80008e4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80008e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80008e8:	4233      	tst	r3, r6
 80008ea:	d100      	bne.n	80008ee <HAL_RCC_OscConfig+0x52>
 80008ec:	e136      	b.n	8000b5c <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80008ee:	21f8      	movs	r1, #248	; 0xf8
 80008f0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80008f2:	69ab      	ldr	r3, [r5, #24]
 80008f4:	438a      	bics	r2, r1
 80008f6:	00db      	lsls	r3, r3, #3
 80008f8:	4313      	orrs	r3, r2
 80008fa:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008fc:	6a29      	ldr	r1, [r5, #32]
 80008fe:	2900      	cmp	r1, #0
 8000900:	d000      	beq.n	8000904 <HAL_RCC_OscConfig+0x68>
 8000902:	e159      	b.n	8000bb8 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000904:	2000      	movs	r0, #0
 8000906:	e013      	b.n	8000930 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000908:	210c      	movs	r1, #12
 800090a:	4ca5      	ldr	r4, [pc, #660]	; (8000ba0 <HAL_RCC_OscConfig+0x304>)
 800090c:	6862      	ldr	r2, [r4, #4]
 800090e:	400a      	ands	r2, r1
 8000910:	2a04      	cmp	r2, #4
 8000912:	d006      	beq.n	8000922 <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000914:	6863      	ldr	r3, [r4, #4]
 8000916:	400b      	ands	r3, r1
 8000918:	2b08      	cmp	r3, #8
 800091a:	d10b      	bne.n	8000934 <HAL_RCC_OscConfig+0x98>
 800091c:	6863      	ldr	r3, [r4, #4]
 800091e:	03db      	lsls	r3, r3, #15
 8000920:	d508      	bpl.n	8000934 <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000922:	6823      	ldr	r3, [r4, #0]
 8000924:	039b      	lsls	r3, r3, #14
 8000926:	d5bf      	bpl.n	80008a8 <HAL_RCC_OscConfig+0xc>
 8000928:	686b      	ldr	r3, [r5, #4]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d1bc      	bne.n	80008a8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 800092e:	2001      	movs	r0, #1
}
 8000930:	b005      	add	sp, #20
 8000932:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000934:	686b      	ldr	r3, [r5, #4]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d113      	bne.n	8000962 <HAL_RCC_OscConfig+0xc6>
 800093a:	2380      	movs	r3, #128	; 0x80
 800093c:	6822      	ldr	r2, [r4, #0]
 800093e:	025b      	lsls	r3, r3, #9
 8000940:	4313      	orrs	r3, r2
 8000942:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000944:	f7ff fd8a 	bl	800045c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000948:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 800094a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800094c:	02b6      	lsls	r6, r6, #10
 800094e:	6823      	ldr	r3, [r4, #0]
 8000950:	4233      	tst	r3, r6
 8000952:	d1a9      	bne.n	80008a8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000954:	f7ff fd82 	bl	800045c <HAL_GetTick>
 8000958:	1bc0      	subs	r0, r0, r7
 800095a:	2864      	cmp	r0, #100	; 0x64
 800095c:	d9f7      	bls.n	800094e <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 800095e:	2003      	movs	r0, #3
 8000960:	e7e6      	b.n	8000930 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000962:	2b00      	cmp	r3, #0
 8000964:	d116      	bne.n	8000994 <HAL_RCC_OscConfig+0xf8>
 8000966:	6823      	ldr	r3, [r4, #0]
 8000968:	4a8e      	ldr	r2, [pc, #568]	; (8000ba4 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800096a:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800096c:	4013      	ands	r3, r2
 800096e:	6023      	str	r3, [r4, #0]
 8000970:	6823      	ldr	r3, [r4, #0]
 8000972:	4a8d      	ldr	r2, [pc, #564]	; (8000ba8 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000974:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000976:	4013      	ands	r3, r2
 8000978:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800097a:	f7ff fd6f 	bl	800045c <HAL_GetTick>
 800097e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000980:	6823      	ldr	r3, [r4, #0]
 8000982:	4233      	tst	r3, r6
 8000984:	d100      	bne.n	8000988 <HAL_RCC_OscConfig+0xec>
 8000986:	e78f      	b.n	80008a8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000988:	f7ff fd68 	bl	800045c <HAL_GetTick>
 800098c:	1bc0      	subs	r0, r0, r7
 800098e:	2864      	cmp	r0, #100	; 0x64
 8000990:	d9f6      	bls.n	8000980 <HAL_RCC_OscConfig+0xe4>
 8000992:	e7e4      	b.n	800095e <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000994:	2b05      	cmp	r3, #5
 8000996:	d105      	bne.n	80009a4 <HAL_RCC_OscConfig+0x108>
 8000998:	2380      	movs	r3, #128	; 0x80
 800099a:	6822      	ldr	r2, [r4, #0]
 800099c:	02db      	lsls	r3, r3, #11
 800099e:	4313      	orrs	r3, r2
 80009a0:	6023      	str	r3, [r4, #0]
 80009a2:	e7ca      	b.n	800093a <HAL_RCC_OscConfig+0x9e>
 80009a4:	6823      	ldr	r3, [r4, #0]
 80009a6:	4a7f      	ldr	r2, [pc, #508]	; (8000ba4 <HAL_RCC_OscConfig+0x308>)
 80009a8:	4013      	ands	r3, r2
 80009aa:	6023      	str	r3, [r4, #0]
 80009ac:	6823      	ldr	r3, [r4, #0]
 80009ae:	4a7e      	ldr	r2, [pc, #504]	; (8000ba8 <HAL_RCC_OscConfig+0x30c>)
 80009b0:	4013      	ands	r3, r2
 80009b2:	e7c6      	b.n	8000942 <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80009b4:	220c      	movs	r2, #12
 80009b6:	4c7a      	ldr	r4, [pc, #488]	; (8000ba0 <HAL_RCC_OscConfig+0x304>)
 80009b8:	6863      	ldr	r3, [r4, #4]
 80009ba:	4213      	tst	r3, r2
 80009bc:	d006      	beq.n	80009cc <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80009be:	6863      	ldr	r3, [r4, #4]
 80009c0:	4013      	ands	r3, r2
 80009c2:	2b08      	cmp	r3, #8
 80009c4:	d110      	bne.n	80009e8 <HAL_RCC_OscConfig+0x14c>
 80009c6:	6863      	ldr	r3, [r4, #4]
 80009c8:	03db      	lsls	r3, r3, #15
 80009ca:	d40d      	bmi.n	80009e8 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009cc:	6823      	ldr	r3, [r4, #0]
 80009ce:	079b      	lsls	r3, r3, #30
 80009d0:	d502      	bpl.n	80009d8 <HAL_RCC_OscConfig+0x13c>
 80009d2:	68eb      	ldr	r3, [r5, #12]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d1aa      	bne.n	800092e <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009d8:	21f8      	movs	r1, #248	; 0xf8
 80009da:	6822      	ldr	r2, [r4, #0]
 80009dc:	692b      	ldr	r3, [r5, #16]
 80009de:	438a      	bics	r2, r1
 80009e0:	00db      	lsls	r3, r3, #3
 80009e2:	4313      	orrs	r3, r2
 80009e4:	6023      	str	r3, [r4, #0]
 80009e6:	e763      	b.n	80008b0 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80009e8:	68ea      	ldr	r2, [r5, #12]
 80009ea:	2301      	movs	r3, #1
 80009ec:	2a00      	cmp	r2, #0
 80009ee:	d00f      	beq.n	8000a10 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 80009f0:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009f2:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 80009f4:	4313      	orrs	r3, r2
 80009f6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009f8:	f7ff fd30 	bl	800045c <HAL_GetTick>
 80009fc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009fe:	6823      	ldr	r3, [r4, #0]
 8000a00:	4233      	tst	r3, r6
 8000a02:	d1e9      	bne.n	80009d8 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a04:	f7ff fd2a 	bl	800045c <HAL_GetTick>
 8000a08:	1bc0      	subs	r0, r0, r7
 8000a0a:	2802      	cmp	r0, #2
 8000a0c:	d9f7      	bls.n	80009fe <HAL_RCC_OscConfig+0x162>
 8000a0e:	e7a6      	b.n	800095e <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8000a10:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a12:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8000a14:	439a      	bics	r2, r3
 8000a16:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000a18:	f7ff fd20 	bl	800045c <HAL_GetTick>
 8000a1c:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000a1e:	6823      	ldr	r3, [r4, #0]
 8000a20:	4233      	tst	r3, r6
 8000a22:	d100      	bne.n	8000a26 <HAL_RCC_OscConfig+0x18a>
 8000a24:	e744      	b.n	80008b0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a26:	f7ff fd19 	bl	800045c <HAL_GetTick>
 8000a2a:	1bc0      	subs	r0, r0, r7
 8000a2c:	2802      	cmp	r0, #2
 8000a2e:	d9f6      	bls.n	8000a1e <HAL_RCC_OscConfig+0x182>
 8000a30:	e795      	b.n	800095e <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a32:	69ea      	ldr	r2, [r5, #28]
 8000a34:	2301      	movs	r3, #1
 8000a36:	4c5a      	ldr	r4, [pc, #360]	; (8000ba0 <HAL_RCC_OscConfig+0x304>)
 8000a38:	2a00      	cmp	r2, #0
 8000a3a:	d010      	beq.n	8000a5e <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8000a3c:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a3e:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000a40:	4313      	orrs	r3, r2
 8000a42:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000a44:	f7ff fd0a 	bl	800045c <HAL_GetTick>
 8000a48:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a4c:	4233      	tst	r3, r6
 8000a4e:	d000      	beq.n	8000a52 <HAL_RCC_OscConfig+0x1b6>
 8000a50:	e732      	b.n	80008b8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a52:	f7ff fd03 	bl	800045c <HAL_GetTick>
 8000a56:	1bc0      	subs	r0, r0, r7
 8000a58:	2802      	cmp	r0, #2
 8000a5a:	d9f6      	bls.n	8000a4a <HAL_RCC_OscConfig+0x1ae>
 8000a5c:	e77f      	b.n	800095e <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 8000a5e:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a60:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000a62:	439a      	bics	r2, r3
 8000a64:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000a66:	f7ff fcf9 	bl	800045c <HAL_GetTick>
 8000a6a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a6e:	4233      	tst	r3, r6
 8000a70:	d100      	bne.n	8000a74 <HAL_RCC_OscConfig+0x1d8>
 8000a72:	e721      	b.n	80008b8 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a74:	f7ff fcf2 	bl	800045c <HAL_GetTick>
 8000a78:	1bc0      	subs	r0, r0, r7
 8000a7a:	2802      	cmp	r0, #2
 8000a7c:	d9f6      	bls.n	8000a6c <HAL_RCC_OscConfig+0x1d0>
 8000a7e:	e76e      	b.n	800095e <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a80:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000a82:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a84:	4c46      	ldr	r4, [pc, #280]	; (8000ba0 <HAL_RCC_OscConfig+0x304>)
 8000a86:	0552      	lsls	r2, r2, #21
 8000a88:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000a8a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a8c:	4213      	tst	r3, r2
 8000a8e:	d108      	bne.n	8000aa2 <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a90:	69e3      	ldr	r3, [r4, #28]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	61e3      	str	r3, [r4, #28]
 8000a96:	69e3      	ldr	r3, [r4, #28]
 8000a98:	4013      	ands	r3, r2
 8000a9a:	9303      	str	r3, [sp, #12]
 8000a9c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aa2:	2780      	movs	r7, #128	; 0x80
 8000aa4:	4e41      	ldr	r6, [pc, #260]	; (8000bac <HAL_RCC_OscConfig+0x310>)
 8000aa6:	007f      	lsls	r7, r7, #1
 8000aa8:	6833      	ldr	r3, [r6, #0]
 8000aaa:	423b      	tst	r3, r7
 8000aac:	d006      	beq.n	8000abc <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000aae:	68ab      	ldr	r3, [r5, #8]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d113      	bne.n	8000adc <HAL_RCC_OscConfig+0x240>
 8000ab4:	6a22      	ldr	r2, [r4, #32]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	6223      	str	r3, [r4, #32]
 8000aba:	e030      	b.n	8000b1e <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000abc:	6833      	ldr	r3, [r6, #0]
 8000abe:	433b      	orrs	r3, r7
 8000ac0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000ac2:	f7ff fccb 	bl	800045c <HAL_GetTick>
 8000ac6:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ac8:	6833      	ldr	r3, [r6, #0]
 8000aca:	423b      	tst	r3, r7
 8000acc:	d1ef      	bne.n	8000aae <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ace:	f7ff fcc5 	bl	800045c <HAL_GetTick>
 8000ad2:	9b01      	ldr	r3, [sp, #4]
 8000ad4:	1ac0      	subs	r0, r0, r3
 8000ad6:	2864      	cmp	r0, #100	; 0x64
 8000ad8:	d9f6      	bls.n	8000ac8 <HAL_RCC_OscConfig+0x22c>
 8000ada:	e740      	b.n	800095e <HAL_RCC_OscConfig+0xc2>
 8000adc:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d114      	bne.n	8000b0c <HAL_RCC_OscConfig+0x270>
 8000ae2:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ae4:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ae6:	4393      	bics	r3, r2
 8000ae8:	6223      	str	r3, [r4, #32]
 8000aea:	6a23      	ldr	r3, [r4, #32]
 8000aec:	3203      	adds	r2, #3
 8000aee:	4393      	bics	r3, r2
 8000af0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000af2:	f7ff fcb3 	bl	800045c <HAL_GetTick>
 8000af6:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000af8:	6a23      	ldr	r3, [r4, #32]
 8000afa:	423b      	tst	r3, r7
 8000afc:	d025      	beq.n	8000b4a <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000afe:	f7ff fcad 	bl	800045c <HAL_GetTick>
 8000b02:	4b2b      	ldr	r3, [pc, #172]	; (8000bb0 <HAL_RCC_OscConfig+0x314>)
 8000b04:	1b80      	subs	r0, r0, r6
 8000b06:	4298      	cmp	r0, r3
 8000b08:	d9f6      	bls.n	8000af8 <HAL_RCC_OscConfig+0x25c>
 8000b0a:	e728      	b.n	800095e <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b0c:	2b05      	cmp	r3, #5
 8000b0e:	d10b      	bne.n	8000b28 <HAL_RCC_OscConfig+0x28c>
 8000b10:	6a21      	ldr	r1, [r4, #32]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	430b      	orrs	r3, r1
 8000b16:	6223      	str	r3, [r4, #32]
 8000b18:	6a23      	ldr	r3, [r4, #32]
 8000b1a:	431a      	orrs	r2, r3
 8000b1c:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8000b1e:	f7ff fc9d 	bl	800045c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b22:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 8000b24:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b26:	e00d      	b.n	8000b44 <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b28:	6a23      	ldr	r3, [r4, #32]
 8000b2a:	4393      	bics	r3, r2
 8000b2c:	2204      	movs	r2, #4
 8000b2e:	6223      	str	r3, [r4, #32]
 8000b30:	6a23      	ldr	r3, [r4, #32]
 8000b32:	4393      	bics	r3, r2
 8000b34:	e7c0      	b.n	8000ab8 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b36:	f7ff fc91 	bl	800045c <HAL_GetTick>
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <HAL_RCC_OscConfig+0x314>)
 8000b3c:	1b80      	subs	r0, r0, r6
 8000b3e:	4298      	cmp	r0, r3
 8000b40:	d900      	bls.n	8000b44 <HAL_RCC_OscConfig+0x2a8>
 8000b42:	e70c      	b.n	800095e <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b44:	6a23      	ldr	r3, [r4, #32]
 8000b46:	423b      	tst	r3, r7
 8000b48:	d0f5      	beq.n	8000b36 <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 8000b4a:	9b00      	ldr	r3, [sp, #0]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d000      	beq.n	8000b52 <HAL_RCC_OscConfig+0x2b6>
 8000b50:	e6b6      	b.n	80008c0 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b52:	69e3      	ldr	r3, [r4, #28]
 8000b54:	4a17      	ldr	r2, [pc, #92]	; (8000bb4 <HAL_RCC_OscConfig+0x318>)
 8000b56:	4013      	ands	r3, r2
 8000b58:	61e3      	str	r3, [r4, #28]
 8000b5a:	e6b1      	b.n	80008c0 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000b5c:	f7ff fc7e 	bl	800045c <HAL_GetTick>
 8000b60:	1bc0      	subs	r0, r0, r7
 8000b62:	2802      	cmp	r0, #2
 8000b64:	d800      	bhi.n	8000b68 <HAL_RCC_OscConfig+0x2cc>
 8000b66:	e6be      	b.n	80008e6 <HAL_RCC_OscConfig+0x4a>
 8000b68:	e6f9      	b.n	800095e <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000b6a:	3205      	adds	r2, #5
 8000b6c:	d103      	bne.n	8000b76 <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000b6e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000b70:	439a      	bics	r2, r3
 8000b72:	6362      	str	r2, [r4, #52]	; 0x34
 8000b74:	e6bb      	b.n	80008ee <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 8000b76:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000b78:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000b7a:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000b7c:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000b7e:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000b80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000b82:	4393      	bics	r3, r2
 8000b84:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000b86:	f7ff fc69 	bl	800045c <HAL_GetTick>
 8000b8a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000b8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000b8e:	4233      	tst	r3, r6
 8000b90:	d100      	bne.n	8000b94 <HAL_RCC_OscConfig+0x2f8>
 8000b92:	e6b3      	b.n	80008fc <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000b94:	f7ff fc62 	bl	800045c <HAL_GetTick>
 8000b98:	1bc0      	subs	r0, r0, r7
 8000b9a:	2802      	cmp	r0, #2
 8000b9c:	d9f6      	bls.n	8000b8c <HAL_RCC_OscConfig+0x2f0>
 8000b9e:	e6de      	b.n	800095e <HAL_RCC_OscConfig+0xc2>
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	fffeffff 	.word	0xfffeffff
 8000ba8:	fffbffff 	.word	0xfffbffff
 8000bac:	40007000 	.word	0x40007000
 8000bb0:	00001388 	.word	0x00001388
 8000bb4:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bb8:	220c      	movs	r2, #12
 8000bba:	4c26      	ldr	r4, [pc, #152]	; (8000c54 <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 8000bbc:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000bbe:	6863      	ldr	r3, [r4, #4]
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	2b08      	cmp	r3, #8
 8000bc4:	d100      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x32c>
 8000bc6:	e6b3      	b.n	8000930 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 8000bc8:	6823      	ldr	r3, [r4, #0]
 8000bca:	4a23      	ldr	r2, [pc, #140]	; (8000c58 <HAL_RCC_OscConfig+0x3bc>)
 8000bcc:	4013      	ands	r3, r2
 8000bce:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000bd0:	2902      	cmp	r1, #2
 8000bd2:	d12f      	bne.n	8000c34 <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 8000bd4:	f7ff fc42 	bl	800045c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bd8:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000bda:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bdc:	04b6      	lsls	r6, r6, #18
 8000bde:	6823      	ldr	r3, [r4, #0]
 8000be0:	4233      	tst	r3, r6
 8000be2:	d121      	bne.n	8000c28 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000be4:	220f      	movs	r2, #15
 8000be6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000be8:	4393      	bics	r3, r2
 8000bea:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000bec:	4313      	orrs	r3, r2
 8000bee:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000bf0:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000bf2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8000bf4:	6862      	ldr	r2, [r4, #4]
 8000bf6:	430b      	orrs	r3, r1
 8000bf8:	4918      	ldr	r1, [pc, #96]	; (8000c5c <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000bfa:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000bfc:	400a      	ands	r2, r1
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000c02:	2380      	movs	r3, #128	; 0x80
 8000c04:	6822      	ldr	r2, [r4, #0]
 8000c06:	045b      	lsls	r3, r3, #17
 8000c08:	4313      	orrs	r3, r2
 8000c0a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000c0c:	f7ff fc26 	bl	800045c <HAL_GetTick>
 8000c10:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c12:	04ad      	lsls	r5, r5, #18
 8000c14:	6823      	ldr	r3, [r4, #0]
 8000c16:	422b      	tst	r3, r5
 8000c18:	d000      	beq.n	8000c1c <HAL_RCC_OscConfig+0x380>
 8000c1a:	e673      	b.n	8000904 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c1c:	f7ff fc1e 	bl	800045c <HAL_GetTick>
 8000c20:	1b80      	subs	r0, r0, r6
 8000c22:	2802      	cmp	r0, #2
 8000c24:	d9f6      	bls.n	8000c14 <HAL_RCC_OscConfig+0x378>
 8000c26:	e69a      	b.n	800095e <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c28:	f7ff fc18 	bl	800045c <HAL_GetTick>
 8000c2c:	1bc0      	subs	r0, r0, r7
 8000c2e:	2802      	cmp	r0, #2
 8000c30:	d9d5      	bls.n	8000bde <HAL_RCC_OscConfig+0x342>
 8000c32:	e694      	b.n	800095e <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 8000c34:	f7ff fc12 	bl	800045c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c38:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000c3a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c3c:	04ad      	lsls	r5, r5, #18
 8000c3e:	6823      	ldr	r3, [r4, #0]
 8000c40:	422b      	tst	r3, r5
 8000c42:	d100      	bne.n	8000c46 <HAL_RCC_OscConfig+0x3aa>
 8000c44:	e65e      	b.n	8000904 <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c46:	f7ff fc09 	bl	800045c <HAL_GetTick>
 8000c4a:	1b80      	subs	r0, r0, r6
 8000c4c:	2802      	cmp	r0, #2
 8000c4e:	d9f6      	bls.n	8000c3e <HAL_RCC_OscConfig+0x3a2>
 8000c50:	e685      	b.n	800095e <HAL_RCC_OscConfig+0xc2>
 8000c52:	46c0      	nop			; (mov r8, r8)
 8000c54:	40021000 	.word	0x40021000
 8000c58:	feffffff 	.word	0xfeffffff
 8000c5c:	ffc2ffff 	.word	0xffc2ffff

08000c60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000c60:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000c62:	4c14      	ldr	r4, [pc, #80]	; (8000cb4 <HAL_RCC_GetSysClockFreq+0x54>)
{
 8000c64:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000c66:	2210      	movs	r2, #16
 8000c68:	0021      	movs	r1, r4
 8000c6a:	4668      	mov	r0, sp
 8000c6c:	f002 f89e 	bl	8002dac <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000c70:	0021      	movs	r1, r4
 8000c72:	ad04      	add	r5, sp, #16
 8000c74:	2210      	movs	r2, #16
 8000c76:	3110      	adds	r1, #16
 8000c78:	0028      	movs	r0, r5
 8000c7a:	f002 f897 	bl	8002dac <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000c7e:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000c80:	4e0d      	ldr	r6, [pc, #52]	; (8000cb8 <HAL_RCC_GetSysClockFreq+0x58>)
 8000c82:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000c84:	401a      	ands	r2, r3
 8000c86:	2a08      	cmp	r2, #8
 8000c88:	d111      	bne.n	8000cae <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000c8a:	200f      	movs	r0, #15
 8000c8c:	466a      	mov	r2, sp
 8000c8e:	0c99      	lsrs	r1, r3, #18
 8000c90:	4001      	ands	r1, r0
 8000c92:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000c94:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8000c96:	4002      	ands	r2, r0
 8000c98:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000c9a:	03db      	lsls	r3, r3, #15
 8000c9c:	d505      	bpl.n	8000caa <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000c9e:	4807      	ldr	r0, [pc, #28]	; (8000cbc <HAL_RCC_GetSysClockFreq+0x5c>)
 8000ca0:	f7ff fa3c 	bl	800011c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000ca4:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000ca6:	b008      	add	sp, #32
 8000ca8:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <HAL_RCC_GetSysClockFreq+0x60>)
 8000cac:	e7fa      	b.n	8000ca4 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 8000cae:	4803      	ldr	r0, [pc, #12]	; (8000cbc <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8000cb0:	e7f9      	b.n	8000ca6 <HAL_RCC_GetSysClockFreq+0x46>
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	08002dd8 	.word	0x08002dd8
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	007a1200 	.word	0x007a1200
 8000cc0:	003d0900 	.word	0x003d0900

08000cc4 <HAL_RCC_ClockConfig>:
{
 8000cc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	4c43      	ldr	r4, [pc, #268]	; (8000dd8 <HAL_RCC_ClockConfig+0x114>)
{
 8000cca:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ccc:	6823      	ldr	r3, [r4, #0]
{
 8000cce:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d31c      	bcc.n	8000d10 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000cd6:	6832      	ldr	r2, [r6, #0]
 8000cd8:	0793      	lsls	r3, r2, #30
 8000cda:	d423      	bmi.n	8000d24 <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cdc:	07d3      	lsls	r3, r2, #31
 8000cde:	d429      	bmi.n	8000d34 <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	6822      	ldr	r2, [r4, #0]
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	4297      	cmp	r7, r2
 8000ce8:	d367      	bcc.n	8000dba <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000cea:	6833      	ldr	r3, [r6, #0]
 8000cec:	4c3b      	ldr	r4, [pc, #236]	; (8000ddc <HAL_RCC_ClockConfig+0x118>)
 8000cee:	075b      	lsls	r3, r3, #29
 8000cf0:	d46a      	bmi.n	8000dc8 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000cf2:	f7ff ffb5 	bl	8000c60 <HAL_RCC_GetSysClockFreq>
 8000cf6:	6863      	ldr	r3, [r4, #4]
 8000cf8:	4a39      	ldr	r2, [pc, #228]	; (8000de0 <HAL_RCC_ClockConfig+0x11c>)
 8000cfa:	061b      	lsls	r3, r3, #24
 8000cfc:	0f1b      	lsrs	r3, r3, #28
 8000cfe:	5cd3      	ldrb	r3, [r2, r3]
 8000d00:	40d8      	lsrs	r0, r3
 8000d02:	4b38      	ldr	r3, [pc, #224]	; (8000de4 <HAL_RCC_ClockConfig+0x120>)
 8000d04:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d06:	2000      	movs	r0, #0
 8000d08:	f7ff fb7e 	bl	8000408 <HAL_InitTick>
  return HAL_OK;
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	e008      	b.n	8000d22 <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d10:	6823      	ldr	r3, [r4, #0]
 8000d12:	4393      	bics	r3, r2
 8000d14:	430b      	orrs	r3, r1
 8000d16:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d18:	6823      	ldr	r3, [r4, #0]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	d0da      	beq.n	8000cd6 <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000d20:	2001      	movs	r0, #1
}
 8000d22:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d24:	20f0      	movs	r0, #240	; 0xf0
 8000d26:	492d      	ldr	r1, [pc, #180]	; (8000ddc <HAL_RCC_ClockConfig+0x118>)
 8000d28:	684b      	ldr	r3, [r1, #4]
 8000d2a:	4383      	bics	r3, r0
 8000d2c:	68b0      	ldr	r0, [r6, #8]
 8000d2e:	4303      	orrs	r3, r0
 8000d30:	604b      	str	r3, [r1, #4]
 8000d32:	e7d3      	b.n	8000cdc <HAL_RCC_ClockConfig+0x18>
 8000d34:	4d29      	ldr	r5, [pc, #164]	; (8000ddc <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d36:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d38:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d3a:	2a01      	cmp	r2, #1
 8000d3c:	d11a      	bne.n	8000d74 <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d3e:	039b      	lsls	r3, r3, #14
 8000d40:	d5ee      	bpl.n	8000d20 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d42:	2103      	movs	r1, #3
 8000d44:	686b      	ldr	r3, [r5, #4]
 8000d46:	438b      	bics	r3, r1
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000d4c:	f7ff fb86 	bl	800045c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d50:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000d52:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	d115      	bne.n	8000d84 <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d58:	220c      	movs	r2, #12
 8000d5a:	686b      	ldr	r3, [r5, #4]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	d0be      	beq.n	8000ce0 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d62:	f7ff fb7b 	bl	800045c <HAL_GetTick>
 8000d66:	9b01      	ldr	r3, [sp, #4]
 8000d68:	1ac0      	subs	r0, r0, r3
 8000d6a:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <HAL_RCC_ClockConfig+0x124>)
 8000d6c:	4298      	cmp	r0, r3
 8000d6e:	d9f3      	bls.n	8000d58 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8000d70:	2003      	movs	r0, #3
 8000d72:	e7d6      	b.n	8000d22 <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d74:	2a02      	cmp	r2, #2
 8000d76:	d102      	bne.n	8000d7e <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d78:	019b      	lsls	r3, r3, #6
 8000d7a:	d4e2      	bmi.n	8000d42 <HAL_RCC_ClockConfig+0x7e>
 8000d7c:	e7d0      	b.n	8000d20 <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d7e:	079b      	lsls	r3, r3, #30
 8000d80:	d4df      	bmi.n	8000d42 <HAL_RCC_ClockConfig+0x7e>
 8000d82:	e7cd      	b.n	8000d20 <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d84:	2b02      	cmp	r3, #2
 8000d86:	d012      	beq.n	8000dae <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d88:	220c      	movs	r2, #12
 8000d8a:	686b      	ldr	r3, [r5, #4]
 8000d8c:	4213      	tst	r3, r2
 8000d8e:	d0a7      	beq.n	8000ce0 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d90:	f7ff fb64 	bl	800045c <HAL_GetTick>
 8000d94:	9b01      	ldr	r3, [sp, #4]
 8000d96:	1ac0      	subs	r0, r0, r3
 8000d98:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <HAL_RCC_ClockConfig+0x124>)
 8000d9a:	4298      	cmp	r0, r3
 8000d9c:	d9f4      	bls.n	8000d88 <HAL_RCC_ClockConfig+0xc4>
 8000d9e:	e7e7      	b.n	8000d70 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000da0:	f7ff fb5c 	bl	800045c <HAL_GetTick>
 8000da4:	9b01      	ldr	r3, [sp, #4]
 8000da6:	1ac0      	subs	r0, r0, r3
 8000da8:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <HAL_RCC_ClockConfig+0x124>)
 8000daa:	4298      	cmp	r0, r3
 8000dac:	d8e0      	bhi.n	8000d70 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000dae:	220c      	movs	r2, #12
 8000db0:	686b      	ldr	r3, [r5, #4]
 8000db2:	4013      	ands	r3, r2
 8000db4:	2b08      	cmp	r3, #8
 8000db6:	d1f3      	bne.n	8000da0 <HAL_RCC_ClockConfig+0xdc>
 8000db8:	e792      	b.n	8000ce0 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000dba:	6822      	ldr	r2, [r4, #0]
 8000dbc:	439a      	bics	r2, r3
 8000dbe:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000dc0:	6822      	ldr	r2, [r4, #0]
 8000dc2:	421a      	tst	r2, r3
 8000dc4:	d1ac      	bne.n	8000d20 <HAL_RCC_ClockConfig+0x5c>
 8000dc6:	e790      	b.n	8000cea <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000dc8:	6863      	ldr	r3, [r4, #4]
 8000dca:	4a08      	ldr	r2, [pc, #32]	; (8000dec <HAL_RCC_ClockConfig+0x128>)
 8000dcc:	4013      	ands	r3, r2
 8000dce:	68f2      	ldr	r2, [r6, #12]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	6063      	str	r3, [r4, #4]
 8000dd4:	e78d      	b.n	8000cf2 <HAL_RCC_ClockConfig+0x2e>
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	40022000 	.word	0x40022000
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	08002e13 	.word	0x08002e13
 8000de4:	20000038 	.word	0x20000038
 8000de8:	00001388 	.word	0x00001388
 8000dec:	fffff8ff 	.word	0xfffff8ff

08000df0 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000df0:	4b01      	ldr	r3, [pc, #4]	; (8000df8 <HAL_RCC_GetHCLKFreq+0x8>)
 8000df2:	6818      	ldr	r0, [r3, #0]
}
 8000df4:	4770      	bx	lr
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	20000038 	.word	0x20000038

08000dfc <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	6a03      	ldr	r3, [r0, #32]
{
 8000e00:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000e02:	4393      	bics	r3, r2
 8000e04:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000e06:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000e08:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000e0a:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000e0c:	3272      	adds	r2, #114	; 0x72
 8000e0e:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000e10:	680a      	ldr	r2, [r1, #0]
 8000e12:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8000e14:	2202      	movs	r2, #2
 8000e16:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000e18:	688a      	ldr	r2, [r1, #8]
 8000e1a:	4313      	orrs	r3, r2

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8000e1c:	4a11      	ldr	r2, [pc, #68]	; (8000e64 <TIM_OC1_SetConfig+0x68>)
 8000e1e:	4290      	cmp	r0, r2
 8000e20:	d005      	beq.n	8000e2e <TIM_OC1_SetConfig+0x32>
 8000e22:	4e11      	ldr	r6, [pc, #68]	; (8000e68 <TIM_OC1_SetConfig+0x6c>)
 8000e24:	42b0      	cmp	r0, r6
 8000e26:	d002      	beq.n	8000e2e <TIM_OC1_SetConfig+0x32>
 8000e28:	4e10      	ldr	r6, [pc, #64]	; (8000e6c <TIM_OC1_SetConfig+0x70>)
 8000e2a:	42b0      	cmp	r0, r6
 8000e2c:	d113      	bne.n	8000e56 <TIM_OC1_SetConfig+0x5a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8000e2e:	2608      	movs	r6, #8
 8000e30:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8000e32:	68ce      	ldr	r6, [r1, #12]
 8000e34:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8000e36:	2604      	movs	r6, #4
 8000e38:	43b3      	bics	r3, r6
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	d005      	beq.n	8000e4a <TIM_OC1_SetConfig+0x4e>
 8000e3e:	4a0a      	ldr	r2, [pc, #40]	; (8000e68 <TIM_OC1_SetConfig+0x6c>)
 8000e40:	4290      	cmp	r0, r2
 8000e42:	d002      	beq.n	8000e4a <TIM_OC1_SetConfig+0x4e>
 8000e44:	4a09      	ldr	r2, [pc, #36]	; (8000e6c <TIM_OC1_SetConfig+0x70>)
 8000e46:	4290      	cmp	r0, r2
 8000e48:	d105      	bne.n	8000e56 <TIM_OC1_SetConfig+0x5a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000e4a:	4a09      	ldr	r2, [pc, #36]	; (8000e70 <TIM_OC1_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000e4c:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000e4e:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000e50:	694c      	ldr	r4, [r1, #20]
 8000e52:	4334      	orrs	r4, r6
 8000e54:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000e56:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8000e58:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000e5a:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8000e5c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000e5e:	6203      	str	r3, [r0, #32]
}
 8000e60:	bd70      	pop	{r4, r5, r6, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	40012c00 	.word	0x40012c00
 8000e68:	40014400 	.word	0x40014400
 8000e6c:	40014800 	.word	0x40014800
 8000e70:	fffffcff 	.word	0xfffffcff

08000e74 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8000e74:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000e76:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000e78:	6a03      	ldr	r3, [r0, #32]
 8000e7a:	4a16      	ldr	r2, [pc, #88]	; (8000ed4 <TIM_OC3_SetConfig+0x60>)
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8000e80:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8000e82:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8000e84:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000e86:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000e88:	680d      	ldr	r5, [r1, #0]
 8000e8a:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8000e8c:	4d12      	ldr	r5, [pc, #72]	; (8000ed8 <TIM_OC3_SetConfig+0x64>)
 8000e8e:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000e90:	688d      	ldr	r5, [r1, #8]
 8000e92:	022d      	lsls	r5, r5, #8
 8000e94:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8000e96:	4d11      	ldr	r5, [pc, #68]	; (8000edc <TIM_OC3_SetConfig+0x68>)
 8000e98:	42a8      	cmp	r0, r5
 8000e9a:	d10e      	bne.n	8000eba <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8000e9c:	4d10      	ldr	r5, [pc, #64]	; (8000ee0 <TIM_OC3_SetConfig+0x6c>)
 8000e9e:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000ea0:	68cb      	ldr	r3, [r1, #12]
 8000ea2:	021b      	lsls	r3, r3, #8
 8000ea4:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8000ea6:	4d0f      	ldr	r5, [pc, #60]	; (8000ee4 <TIM_OC3_SetConfig+0x70>)
 8000ea8:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000eaa:	4d0f      	ldr	r5, [pc, #60]	; (8000ee8 <TIM_OC3_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000eac:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000eae:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000eb0:	698a      	ldr	r2, [r1, #24]
 8000eb2:	4332      	orrs	r2, r6
 8000eb4:	0112      	lsls	r2, r2, #4
 8000eb6:	432a      	orrs	r2, r5
 8000eb8:	e005      	b.n	8000ec6 <TIM_OC3_SetConfig+0x52>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000eba:	4d0c      	ldr	r5, [pc, #48]	; (8000eec <TIM_OC3_SetConfig+0x78>)
 8000ebc:	42a8      	cmp	r0, r5
 8000ebe:	d0f4      	beq.n	8000eaa <TIM_OC3_SetConfig+0x36>
 8000ec0:	4d0b      	ldr	r5, [pc, #44]	; (8000ef0 <TIM_OC3_SetConfig+0x7c>)
 8000ec2:	42a8      	cmp	r0, r5
 8000ec4:	d0f1      	beq.n	8000eaa <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000ec6:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000ec8:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000eca:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8000ecc:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000ece:	6203      	str	r3, [r0, #32]
}
 8000ed0:	bd70      	pop	{r4, r5, r6, pc}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	fffffeff 	.word	0xfffffeff
 8000ed8:	fffffdff 	.word	0xfffffdff
 8000edc:	40012c00 	.word	0x40012c00
 8000ee0:	fffff7ff 	.word	0xfffff7ff
 8000ee4:	fffffbff 	.word	0xfffffbff
 8000ee8:	ffffcfff 	.word	0xffffcfff
 8000eec:	40014400 	.word	0x40014400
 8000ef0:	40014800 	.word	0x40014800

08000ef4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000ef4:	6a03      	ldr	r3, [r0, #32]
 8000ef6:	4a12      	ldr	r2, [pc, #72]	; (8000f40 <TIM_OC4_SetConfig+0x4c>)
{
 8000ef8:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000efa:	4013      	ands	r3, r2
 8000efc:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000efe:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000f00:	4c10      	ldr	r4, [pc, #64]	; (8000f44 <TIM_OC4_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 8000f02:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8000f04:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000f06:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000f08:	680c      	ldr	r4, [r1, #0]
 8000f0a:	0224      	lsls	r4, r4, #8
 8000f0c:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8000f0e:	4c0e      	ldr	r4, [pc, #56]	; (8000f48 <TIM_OC4_SetConfig+0x54>)
 8000f10:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000f12:	688c      	ldr	r4, [r1, #8]
 8000f14:	0324      	lsls	r4, r4, #12
 8000f16:	4322      	orrs	r2, r4

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000f18:	4c0c      	ldr	r4, [pc, #48]	; (8000f4c <TIM_OC4_SetConfig+0x58>)
 8000f1a:	42a0      	cmp	r0, r4
 8000f1c:	d005      	beq.n	8000f2a <TIM_OC4_SetConfig+0x36>
 8000f1e:	4c0c      	ldr	r4, [pc, #48]	; (8000f50 <TIM_OC4_SetConfig+0x5c>)
 8000f20:	42a0      	cmp	r0, r4
 8000f22:	d002      	beq.n	8000f2a <TIM_OC4_SetConfig+0x36>
 8000f24:	4c0b      	ldr	r4, [pc, #44]	; (8000f54 <TIM_OC4_SetConfig+0x60>)
 8000f26:	42a0      	cmp	r0, r4
 8000f28:	d104      	bne.n	8000f34 <TIM_OC4_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000f2a:	4c0b      	ldr	r4, [pc, #44]	; (8000f58 <TIM_OC4_SetConfig+0x64>)
 8000f2c:	4023      	ands	r3, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000f2e:	694c      	ldr	r4, [r1, #20]
 8000f30:	01a4      	lsls	r4, r4, #6
 8000f32:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000f34:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000f36:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000f38:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8000f3a:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000f3c:	6202      	str	r2, [r0, #32]
}
 8000f3e:	bd30      	pop	{r4, r5, pc}
 8000f40:	ffffefff 	.word	0xffffefff
 8000f44:	ffff8cff 	.word	0xffff8cff
 8000f48:	ffffdfff 	.word	0xffffdfff
 8000f4c:	40012c00 	.word	0x40012c00
 8000f50:	40014400 	.word	0x40014400
 8000f54:	40014800 	.word	0x40014800
 8000f58:	ffffbfff 	.word	0xffffbfff

08000f5c <HAL_TIM_Base_Start>:
  htim->State= HAL_TIM_STATE_BUSY;
 8000f5c:	0002      	movs	r2, r0
 8000f5e:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE(htim);
 8000f60:	2101      	movs	r1, #1
 8000f62:	6800      	ldr	r0, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8000f64:	323d      	adds	r2, #61	; 0x3d
 8000f66:	7013      	strb	r3, [r2, #0]
  __HAL_TIM_ENABLE(htim);
 8000f68:	6803      	ldr	r3, [r0, #0]
 8000f6a:	430b      	orrs	r3, r1
 8000f6c:	6003      	str	r3, [r0, #0]
}
 8000f6e:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8000f70:	7011      	strb	r1, [r2, #0]
}
 8000f72:	4770      	bx	lr

08000f74 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000f74:	2201      	movs	r2, #1
 8000f76:	6803      	ldr	r3, [r0, #0]
 8000f78:	68d9      	ldr	r1, [r3, #12]
}
 8000f7a:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000f7c:	4311      	orrs	r1, r2
 8000f7e:	60d9      	str	r1, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8000f80:	6819      	ldr	r1, [r3, #0]
 8000f82:	430a      	orrs	r2, r1
 8000f84:	601a      	str	r2, [r3, #0]
}
 8000f86:	4770      	bx	lr

08000f88 <HAL_TIM_PWM_MspInit>:
 8000f88:	4770      	bx	lr

08000f8a <HAL_TIM_IC_MspInit>:
 8000f8a:	4770      	bx	lr

08000f8c <HAL_TIM_OC_DelayElapsedCallback>:
 8000f8c:	4770      	bx	lr

08000f8e <HAL_TIM_IC_CaptureCallback>:
 8000f8e:	4770      	bx	lr

08000f90 <TIM_DMACaptureCplt>:
{
 8000f90:	b510      	push	{r4, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000f92:	6a44      	ldr	r4, [r0, #36]	; 0x24
  htim->State= HAL_TIM_STATE_READY;
 8000f94:	2301      	movs	r3, #1
 8000f96:	0022      	movs	r2, r4
 8000f98:	323d      	adds	r2, #61	; 0x3d
 8000f9a:	7013      	strb	r3, [r2, #0]
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8000f9c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f9e:	4290      	cmp	r0, r2
 8000fa0:	d106      	bne.n	8000fb0 <TIM_DMACaptureCplt+0x20>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000fa2:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureCallback(htim);
 8000fa4:	0020      	movs	r0, r4
 8000fa6:	f7ff fff2 	bl	8000f8e <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000faa:	2300      	movs	r3, #0
 8000fac:	7723      	strb	r3, [r4, #28]
}
 8000fae:	bd10      	pop	{r4, pc}
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8000fb0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000fb2:	4298      	cmp	r0, r3
 8000fb4:	d101      	bne.n	8000fba <TIM_DMACaptureCplt+0x2a>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	e7f3      	b.n	8000fa2 <TIM_DMACaptureCplt+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8000fba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000fbc:	4298      	cmp	r0, r3
 8000fbe:	d101      	bne.n	8000fc4 <TIM_DMACaptureCplt+0x34>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000fc0:	2304      	movs	r3, #4
 8000fc2:	e7ee      	b.n	8000fa2 <TIM_DMACaptureCplt+0x12>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8000fc4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000fc6:	4298      	cmp	r0, r3
 8000fc8:	d1ec      	bne.n	8000fa4 <TIM_DMACaptureCplt+0x14>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000fca:	2308      	movs	r3, #8
 8000fcc:	e7e9      	b.n	8000fa2 <TIM_DMACaptureCplt+0x12>

08000fce <HAL_TIM_PWM_PulseFinishedCallback>:
 8000fce:	4770      	bx	lr

08000fd0 <HAL_TIM_TriggerCallback>:
 8000fd0:	4770      	bx	lr

08000fd2 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	6803      	ldr	r3, [r0, #0]
{
 8000fd6:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000fd8:	6919      	ldr	r1, [r3, #16]
{
 8000fda:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000fdc:	4211      	tst	r1, r2
 8000fde:	d00e      	beq.n	8000ffe <HAL_TIM_IRQHandler+0x2c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000fe0:	68d9      	ldr	r1, [r3, #12]
 8000fe2:	4211      	tst	r1, r2
 8000fe4:	d00b      	beq.n	8000ffe <HAL_TIM_IRQHandler+0x2c>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8000fe6:	3a05      	subs	r2, #5
 8000fe8:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000fea:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000fec:	3204      	adds	r2, #4
 8000fee:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000ff0:	079b      	lsls	r3, r3, #30
 8000ff2:	d100      	bne.n	8000ff6 <HAL_TIM_IRQHandler+0x24>
 8000ff4:	e079      	b.n	80010ea <HAL_TIM_IRQHandler+0x118>
          HAL_TIM_IC_CaptureCallback(htim);
 8000ff6:	f7ff ffca 	bl	8000f8e <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000ffe:	2204      	movs	r2, #4
 8001000:	6823      	ldr	r3, [r4, #0]
 8001002:	6919      	ldr	r1, [r3, #16]
 8001004:	4211      	tst	r1, r2
 8001006:	d010      	beq.n	800102a <HAL_TIM_IRQHandler+0x58>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001008:	68d9      	ldr	r1, [r3, #12]
 800100a:	4211      	tst	r1, r2
 800100c:	d00d      	beq.n	800102a <HAL_TIM_IRQHandler+0x58>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800100e:	3a09      	subs	r2, #9
 8001010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001012:	3207      	adds	r2, #7
 8001014:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001016:	699a      	ldr	r2, [r3, #24]
 8001018:	23c0      	movs	r3, #192	; 0xc0
 800101a:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800101c:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800101e:	421a      	tst	r2, r3
 8001020:	d069      	beq.n	80010f6 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8001022:	f7ff ffb4 	bl	8000f8e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001026:	2300      	movs	r3, #0
 8001028:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800102a:	2208      	movs	r2, #8
 800102c:	6823      	ldr	r3, [r4, #0]
 800102e:	6919      	ldr	r1, [r3, #16]
 8001030:	4211      	tst	r1, r2
 8001032:	d00e      	beq.n	8001052 <HAL_TIM_IRQHandler+0x80>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001034:	68d9      	ldr	r1, [r3, #12]
 8001036:	4211      	tst	r1, r2
 8001038:	d00b      	beq.n	8001052 <HAL_TIM_IRQHandler+0x80>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800103a:	3a11      	subs	r2, #17
 800103c:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800103e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001040:	320d      	adds	r2, #13
 8001042:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001044:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001046:	079b      	lsls	r3, r3, #30
 8001048:	d05b      	beq.n	8001102 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 800104a:	f7ff ffa0 	bl	8000f8e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800104e:	2300      	movs	r3, #0
 8001050:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001052:	2210      	movs	r2, #16
 8001054:	6823      	ldr	r3, [r4, #0]
 8001056:	6919      	ldr	r1, [r3, #16]
 8001058:	4211      	tst	r1, r2
 800105a:	d010      	beq.n	800107e <HAL_TIM_IRQHandler+0xac>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800105c:	68d9      	ldr	r1, [r3, #12]
 800105e:	4211      	tst	r1, r2
 8001060:	d00d      	beq.n	800107e <HAL_TIM_IRQHandler+0xac>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001062:	3a21      	subs	r2, #33	; 0x21
 8001064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001066:	3219      	adds	r2, #25
 8001068:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800106a:	69da      	ldr	r2, [r3, #28]
 800106c:	23c0      	movs	r3, #192	; 0xc0
 800106e:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8001070:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001072:	421a      	tst	r2, r3
 8001074:	d04b      	beq.n	800110e <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 8001076:	f7ff ff8a 	bl	8000f8e <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800107a:	2300      	movs	r3, #0
 800107c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800107e:	2201      	movs	r2, #1
 8001080:	6823      	ldr	r3, [r4, #0]
 8001082:	6919      	ldr	r1, [r3, #16]
 8001084:	4211      	tst	r1, r2
 8001086:	d007      	beq.n	8001098 <HAL_TIM_IRQHandler+0xc6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001088:	68d9      	ldr	r1, [r3, #12]
 800108a:	4211      	tst	r1, r2
 800108c:	d004      	beq.n	8001098 <HAL_TIM_IRQHandler+0xc6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800108e:	3a03      	subs	r2, #3
 8001090:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001092:	0020      	movs	r0, r4
 8001094:	f001 f974 	bl	8002380 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001098:	2280      	movs	r2, #128	; 0x80
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	6919      	ldr	r1, [r3, #16]
 800109e:	4211      	tst	r1, r2
 80010a0:	d008      	beq.n	80010b4 <HAL_TIM_IRQHandler+0xe2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80010a2:	68d9      	ldr	r1, [r3, #12]
 80010a4:	4211      	tst	r1, r2
 80010a6:	d005      	beq.n	80010b4 <HAL_TIM_IRQHandler+0xe2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80010a8:	3a02      	subs	r2, #2
 80010aa:	3aff      	subs	r2, #255	; 0xff
 80010ac:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80010ae:	0020      	movs	r0, r4
 80010b0:	f000 fc57 	bl	8001962 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80010b4:	2240      	movs	r2, #64	; 0x40
 80010b6:	6823      	ldr	r3, [r4, #0]
 80010b8:	6919      	ldr	r1, [r3, #16]
 80010ba:	4211      	tst	r1, r2
 80010bc:	d007      	beq.n	80010ce <HAL_TIM_IRQHandler+0xfc>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80010be:	68d9      	ldr	r1, [r3, #12]
 80010c0:	4211      	tst	r1, r2
 80010c2:	d004      	beq.n	80010ce <HAL_TIM_IRQHandler+0xfc>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80010c4:	3a81      	subs	r2, #129	; 0x81
 80010c6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80010c8:	0020      	movs	r0, r4
 80010ca:	f7ff ff81 	bl	8000fd0 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80010ce:	2220      	movs	r2, #32
 80010d0:	6823      	ldr	r3, [r4, #0]
 80010d2:	6919      	ldr	r1, [r3, #16]
 80010d4:	4211      	tst	r1, r2
 80010d6:	d007      	beq.n	80010e8 <HAL_TIM_IRQHandler+0x116>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80010d8:	68d9      	ldr	r1, [r3, #12]
 80010da:	4211      	tst	r1, r2
 80010dc:	d004      	beq.n	80010e8 <HAL_TIM_IRQHandler+0x116>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80010de:	3a41      	subs	r2, #65	; 0x41
 80010e0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80010e2:	0020      	movs	r0, r4
 80010e4:	f000 fc3c 	bl	8001960 <HAL_TIMEx_CommutationCallback>
}
 80010e8:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80010ea:	f7ff ff4f 	bl	8000f8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010ee:	0020      	movs	r0, r4
 80010f0:	f7ff ff6d 	bl	8000fce <HAL_TIM_PWM_PulseFinishedCallback>
 80010f4:	e781      	b.n	8000ffa <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80010f6:	f7ff ff49 	bl	8000f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010fa:	0020      	movs	r0, r4
 80010fc:	f7ff ff67 	bl	8000fce <HAL_TIM_PWM_PulseFinishedCallback>
 8001100:	e791      	b.n	8001026 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001102:	f7ff ff43 	bl	8000f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001106:	0020      	movs	r0, r4
 8001108:	f7ff ff61 	bl	8000fce <HAL_TIM_PWM_PulseFinishedCallback>
 800110c:	e79f      	b.n	800104e <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800110e:	f7ff ff3d 	bl	8000f8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001112:	0020      	movs	r0, r4
 8001114:	f7ff ff5b 	bl	8000fce <HAL_TIM_PWM_PulseFinishedCallback>
 8001118:	e7af      	b.n	800107a <HAL_TIM_IRQHandler+0xa8>

0800111a <HAL_TIM_ErrorCallback>:
}
 800111a:	4770      	bx	lr

0800111c <TIM_DMAError>:
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800111c:	6a40      	ldr	r0, [r0, #36]	; 0x24
  htim->State= HAL_TIM_STATE_READY;
 800111e:	2201      	movs	r2, #1
 8001120:	0003      	movs	r3, r0
{
 8001122:	b510      	push	{r4, lr}
  htim->State= HAL_TIM_STATE_READY;
 8001124:	333d      	adds	r3, #61	; 0x3d
 8001126:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ErrorCallback(htim);
 8001128:	f7ff fff7 	bl	800111a <HAL_TIM_ErrorCallback>
}
 800112c:	bd10      	pop	{r4, pc}
	...

08001130 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001130:	4a1d      	ldr	r2, [pc, #116]	; (80011a8 <TIM_Base_SetConfig+0x78>)
{
 8001132:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8001134:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001136:	4290      	cmp	r0, r2
 8001138:	d006      	beq.n	8001148 <TIM_Base_SetConfig+0x18>
 800113a:	2480      	movs	r4, #128	; 0x80
 800113c:	05e4      	lsls	r4, r4, #23
 800113e:	42a0      	cmp	r0, r4
 8001140:	d002      	beq.n	8001148 <TIM_Base_SetConfig+0x18>
 8001142:	4c1a      	ldr	r4, [pc, #104]	; (80011ac <TIM_Base_SetConfig+0x7c>)
 8001144:	42a0      	cmp	r0, r4
 8001146:	d10c      	bne.n	8001162 <TIM_Base_SetConfig+0x32>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001148:	2470      	movs	r4, #112	; 0x70
 800114a:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 800114c:	684c      	ldr	r4, [r1, #4]
 800114e:	4323      	orrs	r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001150:	4290      	cmp	r0, r2
 8001152:	d00f      	beq.n	8001174 <TIM_Base_SetConfig+0x44>
 8001154:	2480      	movs	r4, #128	; 0x80
 8001156:	05e4      	lsls	r4, r4, #23
 8001158:	42a0      	cmp	r0, r4
 800115a:	d00b      	beq.n	8001174 <TIM_Base_SetConfig+0x44>
 800115c:	4c13      	ldr	r4, [pc, #76]	; (80011ac <TIM_Base_SetConfig+0x7c>)
 800115e:	42a0      	cmp	r0, r4
 8001160:	d008      	beq.n	8001174 <TIM_Base_SetConfig+0x44>
 8001162:	4c13      	ldr	r4, [pc, #76]	; (80011b0 <TIM_Base_SetConfig+0x80>)
 8001164:	42a0      	cmp	r0, r4
 8001166:	d005      	beq.n	8001174 <TIM_Base_SetConfig+0x44>
 8001168:	4c12      	ldr	r4, [pc, #72]	; (80011b4 <TIM_Base_SetConfig+0x84>)
 800116a:	42a0      	cmp	r0, r4
 800116c:	d002      	beq.n	8001174 <TIM_Base_SetConfig+0x44>
 800116e:	4c12      	ldr	r4, [pc, #72]	; (80011b8 <TIM_Base_SetConfig+0x88>)
 8001170:	42a0      	cmp	r0, r4
 8001172:	d103      	bne.n	800117c <TIM_Base_SetConfig+0x4c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001174:	4c11      	ldr	r4, [pc, #68]	; (80011bc <TIM_Base_SetConfig+0x8c>)
 8001176:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001178:	68cc      	ldr	r4, [r1, #12]
 800117a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800117c:	2480      	movs	r4, #128	; 0x80
 800117e:	43a3      	bics	r3, r4
 8001180:	694c      	ldr	r4, [r1, #20]
 8001182:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8001184:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001186:	688b      	ldr	r3, [r1, #8]
 8001188:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800118a:	680b      	ldr	r3, [r1, #0]
 800118c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800118e:	4290      	cmp	r0, r2
 8001190:	d005      	beq.n	800119e <TIM_Base_SetConfig+0x6e>
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <TIM_Base_SetConfig+0x84>)
 8001194:	4298      	cmp	r0, r3
 8001196:	d002      	beq.n	800119e <TIM_Base_SetConfig+0x6e>
 8001198:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <TIM_Base_SetConfig+0x88>)
 800119a:	4298      	cmp	r0, r3
 800119c:	d101      	bne.n	80011a2 <TIM_Base_SetConfig+0x72>
    TIMx->RCR = Structure->RepetitionCounter;
 800119e:	690b      	ldr	r3, [r1, #16]
 80011a0:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80011a2:	2301      	movs	r3, #1
 80011a4:	6143      	str	r3, [r0, #20]
}
 80011a6:	bd10      	pop	{r4, pc}
 80011a8:	40012c00 	.word	0x40012c00
 80011ac:	40000400 	.word	0x40000400
 80011b0:	40002000 	.word	0x40002000
 80011b4:	40014400 	.word	0x40014400
 80011b8:	40014800 	.word	0x40014800
 80011bc:	fffffcff 	.word	0xfffffcff

080011c0 <HAL_TIM_Base_Init>:
{
 80011c0:	b570      	push	{r4, r5, r6, lr}
 80011c2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80011c4:	2001      	movs	r0, #1
  if(htim == NULL)
 80011c6:	2c00      	cmp	r4, #0
 80011c8:	d014      	beq.n	80011f4 <HAL_TIM_Base_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 80011ca:	0025      	movs	r5, r4
 80011cc:	353d      	adds	r5, #61	; 0x3d
 80011ce:	782b      	ldrb	r3, [r5, #0]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d105      	bne.n	80011e2 <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80011d6:	0022      	movs	r2, r4
 80011d8:	323c      	adds	r2, #60	; 0x3c
 80011da:	7013      	strb	r3, [r2, #0]
    HAL_TIM_Base_MspInit(htim);
 80011dc:	0020      	movs	r0, r4
 80011de:	f001 fc9d 	bl	8002b1c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80011e2:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80011e4:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80011e6:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80011e8:	1d21      	adds	r1, r4, #4
 80011ea:	f7ff ffa1 	bl	8001130 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80011ee:	2301      	movs	r3, #1
  return HAL_OK;
 80011f0:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80011f2:	702b      	strb	r3, [r5, #0]
}
 80011f4:	bd70      	pop	{r4, r5, r6, pc}

080011f6 <HAL_TIM_PWM_Init>:
{
 80011f6:	b570      	push	{r4, r5, r6, lr}
 80011f8:	0004      	movs	r4, r0
    return HAL_ERROR;
 80011fa:	2001      	movs	r0, #1
  if(htim == NULL)
 80011fc:	2c00      	cmp	r4, #0
 80011fe:	d014      	beq.n	800122a <HAL_TIM_PWM_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001200:	0025      	movs	r5, r4
 8001202:	353d      	adds	r5, #61	; 0x3d
 8001204:	782b      	ldrb	r3, [r5, #0]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	d105      	bne.n	8001218 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 800120c:	0022      	movs	r2, r4
 800120e:	323c      	adds	r2, #60	; 0x3c
 8001210:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 8001212:	0020      	movs	r0, r4
 8001214:	f7ff feb8 	bl	8000f88 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001218:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800121a:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 800121c:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800121e:	1d21      	adds	r1, r4, #4
 8001220:	f7ff ff86 	bl	8001130 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001224:	2301      	movs	r3, #1
  return HAL_OK;
 8001226:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001228:	702b      	strb	r3, [r5, #0]
}
 800122a:	bd70      	pop	{r4, r5, r6, pc}

0800122c <HAL_TIM_IC_Init>:
{
 800122c:	b570      	push	{r4, r5, r6, lr}
 800122e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001230:	2001      	movs	r0, #1
  if(htim == NULL)
 8001232:	2c00      	cmp	r4, #0
 8001234:	d014      	beq.n	8001260 <HAL_TIM_IC_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001236:	0025      	movs	r5, r4
 8001238:	353d      	adds	r5, #61	; 0x3d
 800123a:	782b      	ldrb	r3, [r5, #0]
 800123c:	b2db      	uxtb	r3, r3
 800123e:	2b00      	cmp	r3, #0
 8001240:	d105      	bne.n	800124e <HAL_TIM_IC_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8001242:	0022      	movs	r2, r4
 8001244:	323c      	adds	r2, #60	; 0x3c
 8001246:	7013      	strb	r3, [r2, #0]
    HAL_TIM_IC_MspInit(htim);
 8001248:	0020      	movs	r0, r4
 800124a:	f7ff fe9e 	bl	8000f8a <HAL_TIM_IC_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800124e:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001250:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001252:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001254:	1d21      	adds	r1, r4, #4
 8001256:	f7ff ff6b 	bl	8001130 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800125a:	2301      	movs	r3, #1
  return HAL_OK;
 800125c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800125e:	702b      	strb	r3, [r5, #0]
}
 8001260:	bd70      	pop	{r4, r5, r6, pc}
	...

08001264 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001264:	2210      	movs	r2, #16
 8001266:	6a03      	ldr	r3, [r0, #32]
{
 8001268:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800126a:	4393      	bics	r3, r2
 800126c:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800126e:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001270:	4d15      	ldr	r5, [pc, #84]	; (80012c8 <TIM_OC2_SetConfig+0x64>)
  tmpcr2 =  TIMx->CR2;
 8001272:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8001274:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001276:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001278:	680d      	ldr	r5, [r1, #0]
 800127a:	022d      	lsls	r5, r5, #8
 800127c:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC2P;
 800127e:	2520      	movs	r5, #32
 8001280:	43aa      	bics	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001282:	688d      	ldr	r5, [r1, #8]
 8001284:	012d      	lsls	r5, r5, #4
 8001286:	432a      	orrs	r2, r5
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001288:	4d10      	ldr	r5, [pc, #64]	; (80012cc <TIM_OC2_SetConfig+0x68>)
 800128a:	42a8      	cmp	r0, r5
 800128c:	d10f      	bne.n	80012ae <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 800128e:	2580      	movs	r5, #128	; 0x80
 8001290:	43aa      	bics	r2, r5
 8001292:	0015      	movs	r5, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001294:	68ca      	ldr	r2, [r1, #12]
 8001296:	0112      	lsls	r2, r2, #4
 8001298:	432a      	orrs	r2, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 800129a:	2540      	movs	r5, #64	; 0x40
 800129c:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800129e:	4d0c      	ldr	r5, [pc, #48]	; (80012d0 <TIM_OC2_SetConfig+0x6c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80012a0:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80012a2:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80012a4:	698b      	ldr	r3, [r1, #24]
 80012a6:	4333      	orrs	r3, r6
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	432b      	orrs	r3, r5
 80012ac:	e005      	b.n	80012ba <TIM_OC2_SetConfig+0x56>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80012ae:	4d09      	ldr	r5, [pc, #36]	; (80012d4 <TIM_OC2_SetConfig+0x70>)
 80012b0:	42a8      	cmp	r0, r5
 80012b2:	d0f4      	beq.n	800129e <TIM_OC2_SetConfig+0x3a>
 80012b4:	4d08      	ldr	r5, [pc, #32]	; (80012d8 <TIM_OC2_SetConfig+0x74>)
 80012b6:	42a8      	cmp	r0, r5
 80012b8:	d0f1      	beq.n	800129e <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 80012ba:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80012bc:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80012be:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80012c0:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80012c2:	6202      	str	r2, [r0, #32]
}
 80012c4:	bd70      	pop	{r4, r5, r6, pc}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	ffff8cff 	.word	0xffff8cff
 80012cc:	40012c00 	.word	0x40012c00
 80012d0:	fffff3ff 	.word	0xfffff3ff
 80012d4:	40014400 	.word	0x40014400
 80012d8:	40014800 	.word	0x40014800

080012dc <HAL_TIM_PWM_ConfigChannel>:
{
 80012dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 80012de:	0006      	movs	r6, r0
 80012e0:	2302      	movs	r3, #2
 80012e2:	363c      	adds	r6, #60	; 0x3c
{
 80012e4:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 80012e6:	7831      	ldrb	r1, [r6, #0]
{
 80012e8:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 80012ea:	0018      	movs	r0, r3
 80012ec:	2901      	cmp	r1, #1
 80012ee:	d025      	beq.n	800133c <HAL_TIM_PWM_ConfigChannel+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 80012f0:	0027      	movs	r7, r4
  __HAL_LOCK(htim);
 80012f2:	2101      	movs	r1, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80012f4:	373d      	adds	r7, #61	; 0x3d
  __HAL_LOCK(htim);
 80012f6:	7031      	strb	r1, [r6, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80012f8:	703b      	strb	r3, [r7, #0]
  switch (Channel)
 80012fa:	2a0c      	cmp	r2, #12
 80012fc:	d81a      	bhi.n	8001334 <HAL_TIM_PWM_ConfigChannel+0x58>
 80012fe:	0010      	movs	r0, r2
 8001300:	f7fe ff02 	bl	8000108 <__gnu_thumb1_case_uqi>
 8001304:	18181807 	.word	0x18181807
 8001308:	1818181d 	.word	0x1818181d
 800130c:	1818182f 	.word	0x1818182f
 8001310:	41          	.byte	0x41
 8001311:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001312:	0029      	movs	r1, r5
 8001314:	6820      	ldr	r0, [r4, #0]
 8001316:	f7ff fd71 	bl	8000dfc <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800131a:	2208      	movs	r2, #8
 800131c:	6823      	ldr	r3, [r4, #0]
 800131e:	6999      	ldr	r1, [r3, #24]
 8001320:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001322:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001324:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001326:	699a      	ldr	r2, [r3, #24]
 8001328:	438a      	bics	r2, r1
 800132a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800132c:	699a      	ldr	r2, [r3, #24]
 800132e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001330:	430a      	orrs	r2, r1
 8001332:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001334:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001336:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001338:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(htim);
 800133a:	7030      	strb	r0, [r6, #0]
}
 800133c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800133e:	0029      	movs	r1, r5
 8001340:	6820      	ldr	r0, [r4, #0]
 8001342:	f7ff ff8f 	bl	8001264 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001346:	2280      	movs	r2, #128	; 0x80
 8001348:	6823      	ldr	r3, [r4, #0]
 800134a:	0112      	lsls	r2, r2, #4
 800134c:	6999      	ldr	r1, [r3, #24]
 800134e:	430a      	orrs	r2, r1
 8001350:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001352:	699a      	ldr	r2, [r3, #24]
 8001354:	4915      	ldr	r1, [pc, #84]	; (80013ac <HAL_TIM_PWM_ConfigChannel+0xd0>)
 8001356:	400a      	ands	r2, r1
 8001358:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800135a:	692a      	ldr	r2, [r5, #16]
 800135c:	6999      	ldr	r1, [r3, #24]
 800135e:	0212      	lsls	r2, r2, #8
 8001360:	e7e6      	b.n	8001330 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001362:	0029      	movs	r1, r5
 8001364:	6820      	ldr	r0, [r4, #0]
 8001366:	f7ff fd85 	bl	8000e74 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800136a:	2208      	movs	r2, #8
 800136c:	6823      	ldr	r3, [r4, #0]
 800136e:	69d9      	ldr	r1, [r3, #28]
 8001370:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001372:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001374:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001376:	69da      	ldr	r2, [r3, #28]
 8001378:	438a      	bics	r2, r1
 800137a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800137c:	69da      	ldr	r2, [r3, #28]
 800137e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001380:	430a      	orrs	r2, r1
 8001382:	61da      	str	r2, [r3, #28]
    break;
 8001384:	e7d6      	b.n	8001334 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001386:	0029      	movs	r1, r5
 8001388:	6820      	ldr	r0, [r4, #0]
 800138a:	f7ff fdb3 	bl	8000ef4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800138e:	2280      	movs	r2, #128	; 0x80
 8001390:	6823      	ldr	r3, [r4, #0]
 8001392:	0112      	lsls	r2, r2, #4
 8001394:	69d9      	ldr	r1, [r3, #28]
 8001396:	430a      	orrs	r2, r1
 8001398:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800139a:	69da      	ldr	r2, [r3, #28]
 800139c:	4903      	ldr	r1, [pc, #12]	; (80013ac <HAL_TIM_PWM_ConfigChannel+0xd0>)
 800139e:	400a      	ands	r2, r1
 80013a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80013a2:	692a      	ldr	r2, [r5, #16]
 80013a4:	69d9      	ldr	r1, [r3, #28]
 80013a6:	0212      	lsls	r2, r2, #8
 80013a8:	e7ea      	b.n	8001380 <HAL_TIM_PWM_ConfigChannel+0xa4>
 80013aa:	46c0      	nop			; (mov r8, r8)
 80013ac:	fffffbff 	.word	0xfffffbff

080013b0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be 
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80013b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013b2:	2401      	movs	r4, #1
 80013b4:	6a05      	ldr	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80013b6:	4f10      	ldr	r7, [pc, #64]	; (80013f8 <TIM_TI1_SetConfig+0x48>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80013b8:	43a5      	bics	r5, r4
 80013ba:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80013bc:	6986      	ldr	r6, [r0, #24]
  tmpccer = TIMx->CCER;
 80013be:	6a05      	ldr	r5, [r0, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80013c0:	42b8      	cmp	r0, r7
 80013c2:	d006      	beq.n	80013d2 <TIM_TI1_SetConfig+0x22>
 80013c4:	2780      	movs	r7, #128	; 0x80
 80013c6:	05ff      	lsls	r7, r7, #23
 80013c8:	42b8      	cmp	r0, r7
 80013ca:	d002      	beq.n	80013d2 <TIM_TI1_SetConfig+0x22>
 80013cc:	4f0b      	ldr	r7, [pc, #44]	; (80013fc <TIM_TI1_SetConfig+0x4c>)
 80013ce:	42b8      	cmp	r0, r7
 80013d0:	d10f      	bne.n	80013f2 <TIM_TI1_SetConfig+0x42>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80013d2:	2403      	movs	r4, #3
 80013d4:	43a6      	bics	r6, r4
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80013d6:	24f0      	movs	r4, #240	; 0xf0
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80013d8:	4332      	orrs	r2, r6
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80013da:	43a2      	bics	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80013dc:	011b      	lsls	r3, r3, #4
 80013de:	340f      	adds	r4, #15
 80013e0:	4023      	ands	r3, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80013e2:	3cf5      	subs	r4, #245	; 0xf5
 80013e4:	43a5      	bics	r5, r4
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80013e6:	4021      	ands	r1, r4
 80013e8:	4329      	orrs	r1, r5
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80013ea:	431a      	orrs	r2, r3

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80013ec:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80013ee:	6201      	str	r1, [r0, #32]
}
 80013f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80013f2:	0022      	movs	r2, r4
 80013f4:	e7ef      	b.n	80013d6 <TIM_TI1_SetConfig+0x26>
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	40012c00 	.word	0x40012c00
 80013fc:	40000400 	.word	0x40000400

08001400 <HAL_TIM_IC_ConfigChannel>:
{
 8001400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001402:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 8001404:	0001      	movs	r1, r0
 8001406:	2302      	movs	r3, #2
 8001408:	313c      	adds	r1, #60	; 0x3c
 800140a:	780e      	ldrb	r6, [r1, #0]
{
 800140c:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 800140e:	0018      	movs	r0, r3
 8001410:	2e01      	cmp	r6, #1
 8001412:	d01a      	beq.n	800144a <HAL_TIM_IC_ConfigChannel+0x4a>
 8001414:	3801      	subs	r0, #1
 8001416:	7008      	strb	r0, [r1, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001418:	704b      	strb	r3, [r1, #1]
  if (Channel == TIM_CHANNEL_1)
 800141a:	2a00      	cmp	r2, #0
 800141c:	d116      	bne.n	800144c <HAL_TIM_IC_ConfigChannel+0x4c>
    TIM_TI1_SetConfig(htim->Instance,
 800141e:	68eb      	ldr	r3, [r5, #12]
 8001420:	686a      	ldr	r2, [r5, #4]
 8001422:	6829      	ldr	r1, [r5, #0]
 8001424:	6820      	ldr	r0, [r4, #0]
 8001426:	f7ff ffc3 	bl	80013b0 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800142a:	210c      	movs	r1, #12
 800142c:	6823      	ldr	r3, [r4, #0]
 800142e:	699a      	ldr	r2, [r3, #24]
 8001430:	438a      	bics	r2, r1
 8001432:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8001434:	699a      	ldr	r2, [r3, #24]
 8001436:	68a9      	ldr	r1, [r5, #8]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001438:	430a      	orrs	r2, r1
 800143a:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 800143c:	0023      	movs	r3, r4
 800143e:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 8001440:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001442:	333d      	adds	r3, #61	; 0x3d
  __HAL_UNLOCK(htim);
 8001444:	343c      	adds	r4, #60	; 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8001446:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(htim);
 8001448:	7020      	strb	r0, [r4, #0]
}
 800144a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800144c:	6829      	ldr	r1, [r5, #0]
 800144e:	6823      	ldr	r3, [r4, #0]
 8001450:	9101      	str	r1, [sp, #4]
 8001452:	686e      	ldr	r6, [r5, #4]
 8001454:	68e8      	ldr	r0, [r5, #12]
  else if (Channel == TIM_CHANNEL_2)
 8001456:	2a04      	cmp	r2, #4
 8001458:	d11e      	bne.n	8001498 <HAL_TIM_IC_ConfigChannel+0x98>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800145a:	2710      	movs	r7, #16
 800145c:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800145e:	4930      	ldr	r1, [pc, #192]	; (8001520 <HAL_TIM_IC_ConfigChannel+0x120>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001460:	43ba      	bics	r2, r7
 8001462:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001464:	699f      	ldr	r7, [r3, #24]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8001466:	0236      	lsls	r6, r6, #8
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8001468:	400f      	ands	r7, r1
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800146a:	433e      	orrs	r6, r7

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800146c:	4f2d      	ldr	r7, [pc, #180]	; (8001524 <HAL_TIM_IC_ConfigChannel+0x124>)
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800146e:	0700      	lsls	r0, r0, #28
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001470:	403e      	ands	r6, r7
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8001472:	0c00      	lsrs	r0, r0, #16
 8001474:	4330      	orrs	r0, r6

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001476:	26a0      	movs	r6, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001478:	9901      	ldr	r1, [sp, #4]
  tmpccer = TIMx->CCER;
 800147a:	6a1a      	ldr	r2, [r3, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800147c:	0109      	lsls	r1, r1, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800147e:	43b2      	bics	r2, r6
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001480:	4031      	ands	r1, r6
 8001482:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001484:	6198      	str	r0, [r3, #24]
  TIMx->CCER = tmpccer;
 8001486:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8001488:	699a      	ldr	r2, [r3, #24]
 800148a:	4927      	ldr	r1, [pc, #156]	; (8001528 <HAL_TIM_IC_ConfigChannel+0x128>)
 800148c:	400a      	ands	r2, r1
 800148e:	619a      	str	r2, [r3, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001490:	68aa      	ldr	r2, [r5, #8]
 8001492:	6999      	ldr	r1, [r3, #24]
 8001494:	0212      	lsls	r2, r2, #8
 8001496:	e7cf      	b.n	8001438 <HAL_TIM_IC_ConfigChannel+0x38>
 8001498:	68ad      	ldr	r5, [r5, #8]
  else if (Channel == TIM_CHANNEL_3)
 800149a:	2a08      	cmp	r2, #8
 800149c:	d120      	bne.n	80014e0 <HAL_TIM_IC_ConfigChannel+0xe0>
  TIMx->CCER &= ~TIM_CCER_CC3E;
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800149e:	2103      	movs	r1, #3
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80014a0:	6a1a      	ldr	r2, [r3, #32]
 80014a2:	4f22      	ldr	r7, [pc, #136]	; (800152c <HAL_TIM_IC_ConfigChannel+0x12c>)
  tmpccmr2 |= TIM_ICSelection;

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80014a4:	0100      	lsls	r0, r0, #4
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80014a6:	403a      	ands	r2, r7
 80014a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80014aa:	69df      	ldr	r7, [r3, #28]
  tmpccer = TIMx->CCER;
 80014ac:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80014ae:	438f      	bics	r7, r1
  tmpccmr2 |= TIM_ICSelection;
 80014b0:	433e      	orrs	r6, r7
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80014b2:	27f0      	movs	r7, #240	; 0xf0
 80014b4:	43be      	bics	r6, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80014b6:	370f      	adds	r7, #15
 80014b8:	4038      	ands	r0, r7
 80014ba:	4306      	orrs	r6, r0

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80014bc:	481c      	ldr	r0, [pc, #112]	; (8001530 <HAL_TIM_IC_ConfigChannel+0x130>)
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80014be:	9901      	ldr	r1, [sp, #4]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80014c0:	4002      	ands	r2, r0
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80014c2:	20a0      	movs	r0, #160	; 0xa0
 80014c4:	0209      	lsls	r1, r1, #8
 80014c6:	0100      	lsls	r0, r0, #4
 80014c8:	4001      	ands	r1, r0
 80014ca:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80014cc:	61de      	str	r6, [r3, #28]
  TIMx->CCER = tmpccer;
 80014ce:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80014d0:	210c      	movs	r1, #12
 80014d2:	69da      	ldr	r2, [r3, #28]
 80014d4:	438a      	bics	r2, r1
 80014d6:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80014d8:	69da      	ldr	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80014da:	4315      	orrs	r5, r2
 80014dc:	61dd      	str	r5, [r3, #28]
 80014de:	e7ad      	b.n	800143c <HAL_TIM_IC_ConfigChannel+0x3c>
{
  uint32_t tmpccmr2 = 0U;
  uint32_t tmpccer = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80014e0:	6a1a      	ldr	r2, [r3, #32]
 80014e2:	4f14      	ldr	r7, [pc, #80]	; (8001534 <HAL_TIM_IC_ConfigChannel+0x134>)
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80014e4:	490e      	ldr	r1, [pc, #56]	; (8001520 <HAL_TIM_IC_ConfigChannel+0x120>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80014e6:	403a      	ands	r2, r7
 80014e8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80014ea:	69df      	ldr	r7, [r3, #28]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80014ec:	0236      	lsls	r6, r6, #8
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80014ee:	400f      	ands	r7, r1
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80014f0:	433e      	orrs	r6, r7

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80014f2:	4f0c      	ldr	r7, [pc, #48]	; (8001524 <HAL_TIM_IC_ConfigChannel+0x124>)
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80014f4:	0700      	lsls	r0, r0, #28
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80014f6:	403e      	ands	r6, r7
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80014f8:	0c00      	lsrs	r0, r0, #16
  tmpccer = TIMx->CCER;
 80014fa:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80014fc:	4330      	orrs	r0, r6

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80014fe:	4e0e      	ldr	r6, [pc, #56]	; (8001538 <HAL_TIM_IC_ConfigChannel+0x138>)
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001500:	9901      	ldr	r1, [sp, #4]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8001502:	4032      	ands	r2, r6
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001504:	26a0      	movs	r6, #160	; 0xa0
 8001506:	0309      	lsls	r1, r1, #12
 8001508:	0236      	lsls	r6, r6, #8
 800150a:	4031      	ands	r1, r6
 800150c:	4311      	orrs	r1, r2

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800150e:	61d8      	str	r0, [r3, #28]
  TIMx->CCER = tmpccer ;
 8001510:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001512:	69da      	ldr	r2, [r3, #28]
 8001514:	4904      	ldr	r1, [pc, #16]	; (8001528 <HAL_TIM_IC_ConfigChannel+0x128>)
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001516:	022d      	lsls	r5, r5, #8
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001518:	400a      	ands	r2, r1
 800151a:	61da      	str	r2, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800151c:	69da      	ldr	r2, [r3, #28]
 800151e:	e7dc      	b.n	80014da <HAL_TIM_IC_ConfigChannel+0xda>
 8001520:	fffffcff 	.word	0xfffffcff
 8001524:	ffff0fff 	.word	0xffff0fff
 8001528:	fffff3ff 	.word	0xfffff3ff
 800152c:	fffffeff 	.word	0xfffffeff
 8001530:	fffff5ff 	.word	0xfffff5ff
 8001534:	ffffefff 	.word	0xffffefff
 8001538:	ffff5fff 	.word	0xffff5fff

0800153c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800153c:	b530      	push	{r4, r5, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 800153e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001540:	4d03      	ldr	r5, [pc, #12]	; (8001550 <TIM_ETR_SetConfig+0x14>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001542:	430a      	orrs	r2, r1
 8001544:	021b      	lsls	r3, r3, #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001546:	402c      	ands	r4, r5
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001548:	4313      	orrs	r3, r2
 800154a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800154c:	6083      	str	r3, [r0, #8]
}
 800154e:	bd30      	pop	{r4, r5, pc}
 8001550:	ffff00ff 	.word	0xffff00ff

08001554 <HAL_TIM_ConfigClockSource>:
{
 8001554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001556:	0005      	movs	r5, r0
 8001558:	2302      	movs	r3, #2
 800155a:	353c      	adds	r5, #60	; 0x3c
 800155c:	782a      	ldrb	r2, [r5, #0]
{
 800155e:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 8001560:	0018      	movs	r0, r3
 8001562:	2a01      	cmp	r2, #1
 8001564:	d019      	beq.n	800159a <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8001566:	0026      	movs	r6, r4
  __HAL_LOCK(htim);
 8001568:	2701      	movs	r7, #1
  tmpsmcr = htim->Instance->SMCR;
 800156a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800156c:	363d      	adds	r6, #61	; 0x3d
  __HAL_LOCK(htim);
 800156e:	702f      	strb	r7, [r5, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001570:	7033      	strb	r3, [r6, #0]
  tmpsmcr = htim->Instance->SMCR;
 8001572:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001574:	4a4f      	ldr	r2, [pc, #316]	; (80016b4 <HAL_TIM_ConfigClockSource+0x160>)
 8001576:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8001578:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800157a:	680b      	ldr	r3, [r1, #0]
 800157c:	2b40      	cmp	r3, #64	; 0x40
 800157e:	d100      	bne.n	8001582 <HAL_TIM_ConfigClockSource+0x2e>
 8001580:	e06f      	b.n	8001662 <HAL_TIM_ConfigClockSource+0x10e>
 8001582:	d816      	bhi.n	80015b2 <HAL_TIM_ConfigClockSource+0x5e>
 8001584:	2b10      	cmp	r3, #16
 8001586:	d100      	bne.n	800158a <HAL_TIM_ConfigClockSource+0x36>
 8001588:	e087      	b.n	800169a <HAL_TIM_ConfigClockSource+0x146>
 800158a:	d807      	bhi.n	800159c <HAL_TIM_ConfigClockSource+0x48>
 800158c:	2b00      	cmp	r3, #0
 800158e:	d100      	bne.n	8001592 <HAL_TIM_ConfigClockSource+0x3e>
 8001590:	e07d      	b.n	800168e <HAL_TIM_ConfigClockSource+0x13a>
  htim->State = HAL_TIM_STATE_READY;
 8001592:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001594:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001596:	7033      	strb	r3, [r6, #0]
  __HAL_UNLOCK(htim);
 8001598:	7028      	strb	r0, [r5, #0]
}
 800159a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 800159c:	2b20      	cmp	r3, #32
 800159e:	d100      	bne.n	80015a2 <HAL_TIM_ConfigClockSource+0x4e>
 80015a0:	e081      	b.n	80016a6 <HAL_TIM_ConfigClockSource+0x152>
 80015a2:	2b30      	cmp	r3, #48	; 0x30
 80015a4:	d1f5      	bne.n	8001592 <HAL_TIM_ConfigClockSource+0x3e>
   tmpsmcr &= ~TIM_SMCR_TS;
 80015a6:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 80015a8:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80015aa:	4393      	bics	r3, r2
 80015ac:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80015ae:	2337      	movs	r3, #55	; 0x37
 80015b0:	e055      	b.n	800165e <HAL_TIM_ConfigClockSource+0x10a>
  switch (sClockSourceConfig->ClockSource)
 80015b2:	2b70      	cmp	r3, #112	; 0x70
 80015b4:	d033      	beq.n	800161e <HAL_TIM_ConfigClockSource+0xca>
 80015b6:	d81b      	bhi.n	80015f0 <HAL_TIM_ConfigClockSource+0x9c>
 80015b8:	2b50      	cmp	r3, #80	; 0x50
 80015ba:	d03b      	beq.n	8001634 <HAL_TIM_ConfigClockSource+0xe0>
 80015bc:	2b60      	cmp	r3, #96	; 0x60
 80015be:	d1e8      	bne.n	8001592 <HAL_TIM_ConfigClockSource+0x3e>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015c0:	2410      	movs	r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80015c2:	684b      	ldr	r3, [r1, #4]
 80015c4:	68ca      	ldr	r2, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015c6:	6a01      	ldr	r1, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80015c8:	4f3b      	ldr	r7, [pc, #236]	; (80016b8 <HAL_TIM_ConfigClockSource+0x164>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80015ca:	43a1      	bics	r1, r4
 80015cc:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80015ce:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80015d0:	0312      	lsls	r2, r2, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80015d2:	403c      	ands	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80015d4:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80015d6:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 80015d8:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80015da:	6182      	str	r2, [r0, #24]
   tmpsmcr &= ~TIM_SMCR_TS;
 80015dc:	2270      	movs	r2, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80015de:	43a1      	bics	r1, r4
  tmpccer |= (TIM_ICPolarity << 4U);
 80015e0:	011b      	lsls	r3, r3, #4
 80015e2:	430b      	orrs	r3, r1
  TIMx->CCER = tmpccer;
 80015e4:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 80015e6:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80015e8:	4393      	bics	r3, r2
 80015ea:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80015ec:	2367      	movs	r3, #103	; 0x67
 80015ee:	e036      	b.n	800165e <HAL_TIM_ConfigClockSource+0x10a>
  switch (sClockSourceConfig->ClockSource)
 80015f0:	2280      	movs	r2, #128	; 0x80
 80015f2:	0152      	lsls	r2, r2, #5
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d00d      	beq.n	8001614 <HAL_TIM_ConfigClockSource+0xc0>
 80015f8:	2280      	movs	r2, #128	; 0x80
 80015fa:	0192      	lsls	r2, r2, #6
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d1c8      	bne.n	8001592 <HAL_TIM_ConfigClockSource+0x3e>
      TIM_ETR_SetConfig(htim->Instance,
 8001600:	68cb      	ldr	r3, [r1, #12]
 8001602:	684a      	ldr	r2, [r1, #4]
 8001604:	6889      	ldr	r1, [r1, #8]
 8001606:	f7ff ff99 	bl	800153c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800160a:	2380      	movs	r3, #128	; 0x80
 800160c:	6822      	ldr	r2, [r4, #0]
 800160e:	01db      	lsls	r3, r3, #7
 8001610:	6891      	ldr	r1, [r2, #8]
 8001612:	e00c      	b.n	800162e <HAL_TIM_ConfigClockSource+0xda>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001614:	2207      	movs	r2, #7
 8001616:	6883      	ldr	r3, [r0, #8]
 8001618:	4393      	bics	r3, r2
   TIMx->SMCR = tmpsmcr;
 800161a:	6083      	str	r3, [r0, #8]
 800161c:	e7b9      	b.n	8001592 <HAL_TIM_ConfigClockSource+0x3e>
      TIM_ETR_SetConfig(htim->Instance,
 800161e:	68cb      	ldr	r3, [r1, #12]
 8001620:	684a      	ldr	r2, [r1, #4]
 8001622:	6889      	ldr	r1, [r1, #8]
 8001624:	f7ff ff8a 	bl	800153c <TIM_ETR_SetConfig>
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001628:	2177      	movs	r1, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 800162a:	6822      	ldr	r2, [r4, #0]
 800162c:	6893      	ldr	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800162e:	430b      	orrs	r3, r1
 8001630:	6093      	str	r3, [r2, #8]
    break;
 8001632:	e7ae      	b.n	8001592 <HAL_TIM_ConfigClockSource+0x3e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001634:	684a      	ldr	r2, [r1, #4]
 8001636:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8001638:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800163a:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800163c:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800163e:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001640:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001642:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001644:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001646:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001648:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800164a:	240a      	movs	r4, #10
 800164c:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 800164e:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001650:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001652:	6202      	str	r2, [r0, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001654:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001656:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001658:	4393      	bics	r3, r2
 800165a:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800165c:	2357      	movs	r3, #87	; 0x57
 800165e:	4313      	orrs	r3, r2
 8001660:	e7db      	b.n	800161a <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001662:	684a      	ldr	r2, [r1, #4]
 8001664:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8001666:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001668:	6a04      	ldr	r4, [r0, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800166a:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800166c:	43bc      	bics	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800166e:	27f0      	movs	r7, #240	; 0xf0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001670:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001672:	6984      	ldr	r4, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001674:	43bc      	bics	r4, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001676:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001678:	240a      	movs	r4, #10
 800167a:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 800167c:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800167e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001680:	6202      	str	r2, [r0, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001682:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001684:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001686:	4393      	bics	r3, r2
 8001688:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800168a:	2347      	movs	r3, #71	; 0x47
 800168c:	e7e7      	b.n	800165e <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 800168e:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001690:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001692:	4393      	bics	r3, r2
 8001694:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001696:	2307      	movs	r3, #7
 8001698:	e7e1      	b.n	800165e <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 800169a:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 800169c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800169e:	4393      	bics	r3, r2
 80016a0:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80016a2:	2317      	movs	r3, #23
 80016a4:	e7db      	b.n	800165e <HAL_TIM_ConfigClockSource+0x10a>
   tmpsmcr &= ~TIM_SMCR_TS;
 80016a6:	2270      	movs	r2, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 80016a8:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80016aa:	4393      	bics	r3, r2
 80016ac:	001a      	movs	r2, r3
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80016ae:	2327      	movs	r3, #39	; 0x27
 80016b0:	e7d5      	b.n	800165e <HAL_TIM_ConfigClockSource+0x10a>
 80016b2:	46c0      	nop			; (mov r8, r8)
 80016b4:	ffff0088 	.word	0xffff0088
 80016b8:	ffff0fff 	.word	0xffff0fff

080016bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80016bc:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80016be:	2401      	movs	r4, #1
 80016c0:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80016c2:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 80016c4:	6a03      	ldr	r3, [r0, #32]
 80016c6:	43a3      	bics	r3, r4
 80016c8:	6203      	str	r3, [r0, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80016ca:	6a03      	ldr	r3, [r0, #32]
 80016cc:	431a      	orrs	r2, r3
 80016ce:	6202      	str	r2, [r0, #32]
}
 80016d0:	bd10      	pop	{r4, pc}
	...

080016d4 <HAL_TIM_PWM_Start>:
{
 80016d4:	b510      	push	{r4, lr}
 80016d6:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80016d8:	2201      	movs	r2, #1
 80016da:	6800      	ldr	r0, [r0, #0]
 80016dc:	f7ff ffee 	bl	80016bc <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80016e0:	6823      	ldr	r3, [r4, #0]
 80016e2:	4a0a      	ldr	r2, [pc, #40]	; (800170c <HAL_TIM_PWM_Start+0x38>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d005      	beq.n	80016f4 <HAL_TIM_PWM_Start+0x20>
 80016e8:	4a09      	ldr	r2, [pc, #36]	; (8001710 <HAL_TIM_PWM_Start+0x3c>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d002      	beq.n	80016f4 <HAL_TIM_PWM_Start+0x20>
 80016ee:	4a09      	ldr	r2, [pc, #36]	; (8001714 <HAL_TIM_PWM_Start+0x40>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d104      	bne.n	80016fe <HAL_TIM_PWM_Start+0x2a>
    __HAL_TIM_MOE_ENABLE(htim);
 80016f4:	2280      	movs	r2, #128	; 0x80
 80016f6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80016f8:	0212      	lsls	r2, r2, #8
 80016fa:	430a      	orrs	r2, r1
 80016fc:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80016fe:	2201      	movs	r2, #1
 8001700:	6819      	ldr	r1, [r3, #0]
}
 8001702:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001704:	430a      	orrs	r2, r1
 8001706:	601a      	str	r2, [r3, #0]
}
 8001708:	bd10      	pop	{r4, pc}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	40012c00 	.word	0x40012c00
 8001710:	40014400 	.word	0x40014400
 8001714:	40014800 	.word	0x40014800

08001718 <HAL_TIM_PWM_Start_IT>:
{
 8001718:	b510      	push	{r4, lr}
 800171a:	0004      	movs	r4, r0
  switch (Channel)
 800171c:	290c      	cmp	r1, #12
 800171e:	d80e      	bhi.n	800173e <HAL_TIM_PWM_Start_IT+0x26>
 8001720:	0008      	movs	r0, r1
 8001722:	f7fe fcf1 	bl	8000108 <__gnu_thumb1_case_uqi>
 8001726:	0c07      	.short	0x0c07
 8001728:	0c250c0c 	.word	0x0c250c0c
 800172c:	0c290c0c 	.word	0x0c290c0c
 8001730:	0c0c      	.short	0x0c0c
 8001732:	2d          	.byte	0x2d
 8001733:	00          	.byte	0x00
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001734:	2302      	movs	r3, #2
 8001736:	6822      	ldr	r2, [r4, #0]
 8001738:	68d0      	ldr	r0, [r2, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800173a:	4303      	orrs	r3, r0
 800173c:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800173e:	2201      	movs	r2, #1
 8001740:	6820      	ldr	r0, [r4, #0]
 8001742:	f7ff ffbb 	bl	80016bc <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001746:	6823      	ldr	r3, [r4, #0]
 8001748:	4a0f      	ldr	r2, [pc, #60]	; (8001788 <HAL_TIM_PWM_Start_IT+0x70>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d005      	beq.n	800175a <HAL_TIM_PWM_Start_IT+0x42>
 800174e:	4a0f      	ldr	r2, [pc, #60]	; (800178c <HAL_TIM_PWM_Start_IT+0x74>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d002      	beq.n	800175a <HAL_TIM_PWM_Start_IT+0x42>
 8001754:	4a0e      	ldr	r2, [pc, #56]	; (8001790 <HAL_TIM_PWM_Start_IT+0x78>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d104      	bne.n	8001764 <HAL_TIM_PWM_Start_IT+0x4c>
    __HAL_TIM_MOE_ENABLE(htim);
 800175a:	2280      	movs	r2, #128	; 0x80
 800175c:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800175e:	0212      	lsls	r2, r2, #8
 8001760:	430a      	orrs	r2, r1
 8001762:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001764:	2201      	movs	r2, #1
 8001766:	6819      	ldr	r1, [r3, #0]
}
 8001768:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 800176a:	430a      	orrs	r2, r1
 800176c:	601a      	str	r2, [r3, #0]
}
 800176e:	bd10      	pop	{r4, pc}
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001770:	6822      	ldr	r2, [r4, #0]
 8001772:	2304      	movs	r3, #4
 8001774:	68d0      	ldr	r0, [r2, #12]
 8001776:	e7e0      	b.n	800173a <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001778:	6822      	ldr	r2, [r4, #0]
 800177a:	2308      	movs	r3, #8
 800177c:	68d0      	ldr	r0, [r2, #12]
 800177e:	e7dc      	b.n	800173a <HAL_TIM_PWM_Start_IT+0x22>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001780:	6822      	ldr	r2, [r4, #0]
 8001782:	2310      	movs	r3, #16
 8001784:	68d0      	ldr	r0, [r2, #12]
 8001786:	e7d8      	b.n	800173a <HAL_TIM_PWM_Start_IT+0x22>
 8001788:	40012c00 	.word	0x40012c00
 800178c:	40014400 	.word	0x40014400
 8001790:	40014800 	.word	0x40014800

08001794 <HAL_TIM_OC_Start_IT>:
 8001794:	b510      	push	{r4, lr}
 8001796:	f7ff ffbf 	bl	8001718 <HAL_TIM_PWM_Start_IT>
 800179a:	bd10      	pop	{r4, pc}

0800179c <HAL_TIM_IC_Start_DMA>:
{
 800179c:	b570      	push	{r4, r5, r6, lr}
 800179e:	000d      	movs	r5, r1
  if((htim->State == HAL_TIM_STATE_BUSY))
 80017a0:	0001      	movs	r1, r0
{
 80017a2:	0004      	movs	r4, r0
     return HAL_BUSY;
 80017a4:	2002      	movs	r0, #2
  if((htim->State == HAL_TIM_STATE_BUSY))
 80017a6:	313d      	adds	r1, #61	; 0x3d
 80017a8:	780e      	ldrb	r6, [r1, #0]
 80017aa:	4286      	cmp	r6, r0
 80017ac:	d02f      	beq.n	800180e <HAL_TIM_IC_Start_DMA+0x72>
  else if((htim->State == HAL_TIM_STATE_READY))
 80017ae:	7808      	ldrb	r0, [r1, #0]
 80017b0:	b2c0      	uxtb	r0, r0
 80017b2:	2801      	cmp	r0, #1
 80017b4:	d105      	bne.n	80017c2 <HAL_TIM_IC_Start_DMA+0x26>
    if((pData == 0U ) && (Length > 0U))
 80017b6:	2a00      	cmp	r2, #0
 80017b8:	d101      	bne.n	80017be <HAL_TIM_IC_Start_DMA+0x22>
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d127      	bne.n	800180e <HAL_TIM_IC_Start_DMA+0x72>
      htim->State = HAL_TIM_STATE_BUSY;
 80017be:	2002      	movs	r0, #2
 80017c0:	7008      	strb	r0, [r1, #0]
  switch (Channel)
 80017c2:	2d0c      	cmp	r5, #12
 80017c4:	d818      	bhi.n	80017f8 <HAL_TIM_IC_Start_DMA+0x5c>
 80017c6:	0028      	movs	r0, r5
 80017c8:	f7fe fc9e 	bl	8000108 <__gnu_thumb1_case_uqi>
 80017cc:	16161607 	.word	0x16161607
 80017d0:	16161622 	.word	0x16161622
 80017d4:	16161630 	.word	0x16161630
 80017d8:	3e          	.byte	0x3e
 80017d9:	00          	.byte	0x00
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80017da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80017dc:	4921      	ldr	r1, [pc, #132]	; (8001864 <HAL_TIM_IC_Start_DMA+0xc8>)
 80017de:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80017e0:	4921      	ldr	r1, [pc, #132]	; (8001868 <HAL_TIM_IC_Start_DMA+0xcc>)
 80017e2:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);
 80017e4:	6821      	ldr	r1, [r4, #0]
 80017e6:	3134      	adds	r1, #52	; 0x34
 80017e8:	f7fe feec 	bl	80005c4 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	6822      	ldr	r2, [r4, #0]
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	68d1      	ldr	r1, [r2, #12]
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80017f4:	430b      	orrs	r3, r1
 80017f6:	60d3      	str	r3, [r2, #12]
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80017f8:	2201      	movs	r2, #1
 80017fa:	0029      	movs	r1, r5
 80017fc:	6820      	ldr	r0, [r4, #0]
 80017fe:	f7ff ff5d 	bl	80016bc <TIM_CCxChannelCmd>
  __HAL_TIM_ENABLE(htim);
 8001802:	2301      	movs	r3, #1
  return HAL_OK;
 8001804:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 8001806:	6822      	ldr	r2, [r4, #0]
 8001808:	6811      	ldr	r1, [r2, #0]
 800180a:	430b      	orrs	r3, r1
 800180c:	6013      	str	r3, [r2, #0]
}
 800180e:	bd70      	pop	{r4, r5, r6, pc}
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8001810:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001812:	4914      	ldr	r1, [pc, #80]	; (8001864 <HAL_TIM_IC_Start_DMA+0xc8>)
 8001814:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001816:	4914      	ldr	r1, [pc, #80]	; (8001868 <HAL_TIM_IC_Start_DMA+0xcc>)
 8001818:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length);
 800181a:	6821      	ldr	r1, [r4, #0]
 800181c:	3138      	adds	r1, #56	; 0x38
 800181e:	f7fe fed1 	bl	80005c4 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001822:	2380      	movs	r3, #128	; 0x80
 8001824:	6822      	ldr	r2, [r4, #0]
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	68d1      	ldr	r1, [r2, #12]
 800182a:	e7e3      	b.n	80017f4 <HAL_TIM_IC_Start_DMA+0x58>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800182c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800182e:	490d      	ldr	r1, [pc, #52]	; (8001864 <HAL_TIM_IC_Start_DMA+0xc8>)
 8001830:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8001832:	490d      	ldr	r1, [pc, #52]	; (8001868 <HAL_TIM_IC_Start_DMA+0xcc>)
 8001834:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length);
 8001836:	6821      	ldr	r1, [r4, #0]
 8001838:	313c      	adds	r1, #60	; 0x3c
 800183a:	f7fe fec3 	bl	80005c4 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	6822      	ldr	r2, [r4, #0]
 8001842:	011b      	lsls	r3, r3, #4
 8001844:	68d1      	ldr	r1, [r2, #12]
 8001846:	e7d5      	b.n	80017f4 <HAL_TIM_IC_Start_DMA+0x58>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8001848:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800184a:	4906      	ldr	r1, [pc, #24]	; (8001864 <HAL_TIM_IC_Start_DMA+0xc8>)
 800184c:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800184e:	4906      	ldr	r1, [pc, #24]	; (8001868 <HAL_TIM_IC_Start_DMA+0xcc>)
 8001850:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length);
 8001852:	6821      	ldr	r1, [r4, #0]
 8001854:	3140      	adds	r1, #64	; 0x40
 8001856:	f7fe feb5 	bl	80005c4 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800185a:	2380      	movs	r3, #128	; 0x80
 800185c:	6822      	ldr	r2, [r4, #0]
 800185e:	015b      	lsls	r3, r3, #5
 8001860:	68d1      	ldr	r1, [r2, #12]
 8001862:	e7c7      	b.n	80017f4 <HAL_TIM_IC_Start_DMA+0x58>
 8001864:	08000f91 	.word	0x08000f91
 8001868:	0800111d 	.word	0x0800111d

0800186c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800186c:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  tmp = TIM_CCER_CC1NE << Channel;
 800186e:	2404      	movs	r4, #4
 8001870:	408c      	lsls	r4, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 8001872:	408a      	lsls	r2, r1
  TIMx->CCER &=  ~tmp;
 8001874:	6a03      	ldr	r3, [r0, #32]
 8001876:	43a3      	bics	r3, r4
 8001878:	6203      	str	r3, [r0, #32]
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 800187a:	6a03      	ldr	r3, [r0, #32]
 800187c:	431a      	orrs	r2, r3
 800187e:	6202      	str	r2, [r0, #32]
}
 8001880:	bd10      	pop	{r4, pc}

08001882 <HAL_TIMEx_PWMN_Start>:
{
 8001882:	b510      	push	{r4, lr}
 8001884:	0004      	movs	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8001886:	2204      	movs	r2, #4
 8001888:	6800      	ldr	r0, [r0, #0]
 800188a:	f7ff ffef 	bl	800186c <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 800188e:	2280      	movs	r2, #128	; 0x80
 8001890:	6823      	ldr	r3, [r4, #0]
 8001892:	0212      	lsls	r2, r2, #8
 8001894:	6c59      	ldr	r1, [r3, #68]	; 0x44
}
 8001896:	2000      	movs	r0, #0
  __HAL_TIM_MOE_ENABLE(htim);
 8001898:	430a      	orrs	r2, r1
 800189a:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 800189c:	2201      	movs	r2, #1
 800189e:	6819      	ldr	r1, [r3, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]
}
 80018a4:	bd10      	pop	{r4, pc}

080018a6 <HAL_TIMEx_MasterConfigSynchronization>:
{
 80018a6:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80018a8:	0004      	movs	r4, r0
 80018aa:	343c      	adds	r4, #60	; 0x3c
 80018ac:	7822      	ldrb	r2, [r4, #0]
{
 80018ae:	0003      	movs	r3, r0
 80018b0:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 80018b2:	2a01      	cmp	r2, #1
 80018b4:	d017      	beq.n	80018e6 <HAL_TIMEx_MasterConfigSynchronization+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 80018b6:	001d      	movs	r5, r3
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80018b8:	681b      	ldr	r3, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80018ba:	353d      	adds	r5, #61	; 0x3d
 80018bc:	7028      	strb	r0, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80018be:	685a      	ldr	r2, [r3, #4]
 80018c0:	306e      	adds	r0, #110	; 0x6e
 80018c2:	4382      	bics	r2, r0
 80018c4:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	6808      	ldr	r0, [r1, #0]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80018ca:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80018cc:	4302      	orrs	r2, r0
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80018ce:	2080      	movs	r0, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80018d0:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	4382      	bics	r2, r0
 80018d6:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80018d8:	689a      	ldr	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 80018da:	2000      	movs	r0, #0
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80018dc:	430a      	orrs	r2, r1
 80018de:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 80018e0:	2301      	movs	r3, #1
 80018e2:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 80018e4:	7020      	strb	r0, [r4, #0]
}
 80018e6:	bd30      	pop	{r4, r5, pc}

080018e8 <HAL_TIMEx_ConfigBreakDeadTime>:
{
 80018e8:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80018ea:	0004      	movs	r4, r0
 80018ec:	343c      	adds	r4, #60	; 0x3c
 80018ee:	7823      	ldrb	r3, [r4, #0]
{
 80018f0:	0002      	movs	r2, r0
 80018f2:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d024      	beq.n	8001942 <HAL_TIMEx_ConfigBreakDeadTime+0x5a>
  htim->State = HAL_TIM_STATE_BUSY;
 80018f8:	0015      	movs	r5, r2
 80018fa:	353d      	adds	r5, #61	; 0x3d
 80018fc:	7028      	strb	r0, [r5, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80018fe:	4b11      	ldr	r3, [pc, #68]	; (8001944 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 8001900:	68c8      	ldr	r0, [r1, #12]
  htim->Instance->BDTR = tmpbdtr;
 8001902:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001904:	4003      	ands	r3, r0
 8001906:	6888      	ldr	r0, [r1, #8]
 8001908:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800190a:	480f      	ldr	r0, [pc, #60]	; (8001948 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 800190c:	4003      	ands	r3, r0
 800190e:	6848      	ldr	r0, [r1, #4]
 8001910:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001912:	480e      	ldr	r0, [pc, #56]	; (800194c <HAL_TIMEx_ConfigBreakDeadTime+0x64>)
 8001914:	4003      	ands	r3, r0
 8001916:	6808      	ldr	r0, [r1, #0]
 8001918:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800191a:	480d      	ldr	r0, [pc, #52]	; (8001950 <HAL_TIMEx_ConfigBreakDeadTime+0x68>)
 800191c:	4003      	ands	r3, r0
 800191e:	6908      	ldr	r0, [r1, #16]
 8001920:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001922:	480c      	ldr	r0, [pc, #48]	; (8001954 <HAL_TIMEx_ConfigBreakDeadTime+0x6c>)
 8001924:	4003      	ands	r3, r0
 8001926:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001928:	6989      	ldr	r1, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800192a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800192c:	480a      	ldr	r0, [pc, #40]	; (8001958 <HAL_TIMEx_ConfigBreakDeadTime+0x70>)
 800192e:	4003      	ands	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001930:	480a      	ldr	r0, [pc, #40]	; (800195c <HAL_TIMEx_ConfigBreakDeadTime+0x74>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001932:	430b      	orrs	r3, r1
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001934:	4003      	ands	r3, r0
 8001936:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8001938:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 800193a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800193c:	2301      	movs	r3, #1
 800193e:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 8001940:	7020      	strb	r0, [r4, #0]
}
 8001942:	bd30      	pop	{r4, r5, pc}
 8001944:	fffffcff 	.word	0xfffffcff
 8001948:	fffffbff 	.word	0xfffffbff
 800194c:	fffff7ff 	.word	0xfffff7ff
 8001950:	ffffefff 	.word	0xffffefff
 8001954:	ffffdfff 	.word	0xffffdfff
 8001958:	ffffbfff 	.word	0xffffbfff
 800195c:	ffff7fff 	.word	0xffff7fff

08001960 <HAL_TIMEx_CommutationCallback>:
 8001960:	4770      	bx	lr

08001962 <HAL_TIMEx_BreakCallback>:
}
 8001962:	4770      	bx	lr

08001964 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001964:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t pinpos     = 0x00000000U;
 8001966:	2600      	movs	r6, #0
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001968:	680f      	ldr	r7, [r1, #0]
{
 800196a:	b085      	sub	sp, #20
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800196c:	003b      	movs	r3, r7
 800196e:	40f3      	lsrs	r3, r6
 8001970:	d10c      	bne.n	800198c <LL_GPIO_Init+0x28>
      }
    }
    pinpos++;
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001972:	684b      	ldr	r3, [r1, #4]
 8001974:	3b01      	subs	r3, #1
 8001976:	2b01      	cmp	r3, #1
 8001978:	d805      	bhi.n	8001986 <LL_GPIO_Init+0x22>
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800197a:	68ca      	ldr	r2, [r1, #12]
 800197c:	6843      	ldr	r3, [r0, #4]
 800197e:	437a      	muls	r2, r7
 8001980:	43bb      	bics	r3, r7
 8001982:	4313      	orrs	r3, r2
 8001984:	6043      	str	r3, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 8001986:	2001      	movs	r0, #1
 8001988:	b005      	add	sp, #20
 800198a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 800198c:	2301      	movs	r3, #1
 800198e:	40b3      	lsls	r3, r6
 8001990:	403b      	ands	r3, r7
    if (currentpin)
 8001992:	d036      	beq.n	8001a02 <LL_GPIO_Init+0x9e>
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001994:	684a      	ldr	r2, [r1, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8001996:	2503      	movs	r5, #3
 8001998:	9201      	str	r2, [sp, #4]
 800199a:	001a      	movs	r2, r3
 800199c:	435a      	muls	r2, r3
 800199e:	4355      	muls	r5, r2
 80019a0:	43ed      	mvns	r5, r5
 80019a2:	6804      	ldr	r4, [r0, #0]
 80019a4:	9502      	str	r5, [sp, #8]
 80019a6:	402c      	ands	r4, r5
 80019a8:	9d01      	ldr	r5, [sp, #4]
 80019aa:	4355      	muls	r5, r2
 80019ac:	432c      	orrs	r4, r5
 80019ae:	6004      	str	r4, [r0, #0]
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80019b0:	9c01      	ldr	r4, [sp, #4]
 80019b2:	3c01      	subs	r4, #1
 80019b4:	2c01      	cmp	r4, #1
 80019b6:	d80a      	bhi.n	80019ce <LL_GPIO_Init+0x6a>
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 80019b8:	6884      	ldr	r4, [r0, #8]
 80019ba:	46a4      	mov	ip, r4
 80019bc:	4665      	mov	r5, ip
 80019be:	688c      	ldr	r4, [r1, #8]
 80019c0:	4354      	muls	r4, r2
 80019c2:	9403      	str	r4, [sp, #12]
 80019c4:	9c02      	ldr	r4, [sp, #8]
 80019c6:	4025      	ands	r5, r4
 80019c8:	9c03      	ldr	r4, [sp, #12]
 80019ca:	432c      	orrs	r4, r5
 80019cc:	6084      	str	r4, [r0, #8]
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 80019ce:	68c4      	ldr	r4, [r0, #12]
 80019d0:	46a4      	mov	ip, r4
 80019d2:	4665      	mov	r5, ip
 80019d4:	690c      	ldr	r4, [r1, #16]
 80019d6:	4354      	muls	r4, r2
 80019d8:	9403      	str	r4, [sp, #12]
 80019da:	9c02      	ldr	r4, [sp, #8]
 80019dc:	402c      	ands	r4, r5
 80019de:	0025      	movs	r5, r4
 80019e0:	9c03      	ldr	r4, [sp, #12]
 80019e2:	4325      	orrs	r5, r4
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80019e4:	9c01      	ldr	r4, [sp, #4]
 80019e6:	60c5      	str	r5, [r0, #12]
 80019e8:	2c02      	cmp	r4, #2
 80019ea:	d10a      	bne.n	8001a02 <LL_GPIO_Init+0x9e>
 80019ec:	694c      	ldr	r4, [r1, #20]
        if (currentpin < LL_GPIO_PIN_8)
 80019ee:	2bff      	cmp	r3, #255	; 0xff
 80019f0:	d809      	bhi.n	8001a06 <LL_GPIO_Init+0xa2>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80019f2:	250f      	movs	r5, #15
 80019f4:	4352      	muls	r2, r2
 80019f6:	4355      	muls	r5, r2
 80019f8:	4362      	muls	r2, r4
 80019fa:	6a03      	ldr	r3, [r0, #32]
 80019fc:	43ab      	bics	r3, r5
 80019fe:	4313      	orrs	r3, r2
 8001a00:	6203      	str	r3, [r0, #32]
    pinpos++;
 8001a02:	3601      	adds	r6, #1
 8001a04:	e7b2      	b.n	800196c <LL_GPIO_Init+0x8>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8001a06:	220f      	movs	r2, #15
 8001a08:	0a1b      	lsrs	r3, r3, #8
 8001a0a:	435b      	muls	r3, r3
 8001a0c:	435b      	muls	r3, r3
 8001a0e:	435a      	muls	r2, r3
 8001a10:	4363      	muls	r3, r4
 8001a12:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8001a14:	4395      	bics	r5, r2
 8001a16:	431d      	orrs	r5, r3
 8001a18:	6245      	str	r5, [r0, #36]	; 0x24
 8001a1a:	e7f2      	b.n	8001a02 <LL_GPIO_Init+0x9e>

08001a1c <LL_AHB1_GRP1_EnableClock>:
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <LL_AHB1_GRP1_EnableClock+0x18>)
{
 8001a1e:	b082      	sub	sp, #8
  SET_BIT(RCC->AHBENR, Periphs);
 8001a20:	695a      	ldr	r2, [r3, #20]
 8001a22:	4302      	orrs	r2, r0
 8001a24:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001a26:	695b      	ldr	r3, [r3, #20]
 8001a28:	4018      	ands	r0, r3
 8001a2a:	9001      	str	r0, [sp, #4]
  (void)tmpreg;
 8001a2c:	9b01      	ldr	r3, [sp, #4]
}
 8001a2e:	b002      	add	sp, #8
 8001a30:	4770      	bx	lr
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	40021000 	.word	0x40021000

08001a38 <map>:
                                

/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/
long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 8001a38:	b510      	push	{r4, lr}
 8001a3a:	001c      	movs	r4, r3
 8001a3c:	4288      	cmp	r0, r1
 8001a3e:	da00      	bge.n	8001a42 <map+0xa>
 8001a40:	0008      	movs	r0, r1
		x = in_min;
	}
	if (x > in_max){
		x = in_max;
	}
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001a42:	0013      	movs	r3, r2
 8001a44:	4282      	cmp	r2, r0
 8001a46:	dd00      	ble.n	8001a4a <map+0x12>
 8001a48:	0003      	movs	r3, r0
 8001a4a:	9802      	ldr	r0, [sp, #8]
 8001a4c:	1a5b      	subs	r3, r3, r1
 8001a4e:	1b00      	subs	r0, r0, r4
 8001a50:	4358      	muls	r0, r3
 8001a52:	1a51      	subs	r1, r2, r1
 8001a54:	f7fe fbec 	bl	8000230 <__divsi3>
 8001a58:	1900      	adds	r0, r0, r4

}
 8001a5a:	bd10      	pop	{r4, pc}

08001a5c <phaseA>:



void phaseA(int newPhase){

		if (newPhase==1){
 8001a5c:	2801      	cmp	r0, #1
 8001a5e:	d111      	bne.n	8001a84 <phaseA+0x28>
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8001a60:	491c      	ldr	r1, [pc, #112]	; (8001ad4 <phaseA+0x78>)
 8001a62:	4a1d      	ldr	r2, [pc, #116]	; (8001ad8 <phaseA+0x7c>)
 8001a64:	680b      	ldr	r3, [r1, #0]
 8001a66:	401a      	ands	r2, r3
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	051b      	lsls	r3, r3, #20
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	600b      	str	r3, [r1, #0]
 8001a70:	2190      	movs	r1, #144	; 0x90
 8001a72:	05c9      	lsls	r1, r1, #23
 8001a74:	680b      	ldr	r3, [r1, #0]
 8001a76:	4a19      	ldr	r2, [pc, #100]	; (8001adc <phaseA+0x80>)
 8001a78:	401a      	ands	r2, r3
 8001a7a:	2380      	movs	r3, #128	; 0x80
 8001a7c:	029b      	lsls	r3, r3, #10
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]

		if (newPhase==3){
		LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_13, LL_GPIO_MODE_OUTPUT); GPIOB->BSRR = GPIO_PIN_13;
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_8, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_8;
		}
}
 8001a82:	4770      	bx	lr
		if (newPhase==2){
 8001a84:	2802      	cmp	r0, #2
 8001a86:	d117      	bne.n	8001ab8 <phaseA+0x5c>
 8001a88:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <phaseA+0x78>)
 8001a8a:	4913      	ldr	r1, [pc, #76]	; (8001ad8 <phaseA+0x7c>)
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	4011      	ands	r1, r2
 8001a90:	2280      	movs	r2, #128	; 0x80
 8001a92:	04d2      	lsls	r2, r2, #19
 8001a94:	430a      	orrs	r2, r1
 8001a96:	601a      	str	r2, [r3, #0]
		LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_13, LL_GPIO_MODE_OUTPUT); GPIOB->BRR = GPIO_PIN_13;
 8001a98:	2280      	movs	r2, #128	; 0x80
 8001a9a:	0192      	lsls	r2, r2, #6
 8001a9c:	629a      	str	r2, [r3, #40]	; 0x28
 8001a9e:	2390      	movs	r3, #144	; 0x90
 8001aa0:	05db      	lsls	r3, r3, #23
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	490d      	ldr	r1, [pc, #52]	; (8001adc <phaseA+0x80>)
 8001aa6:	4011      	ands	r1, r2
 8001aa8:	2280      	movs	r2, #128	; 0x80
 8001aaa:	0252      	lsls	r2, r2, #9
 8001aac:	430a      	orrs	r2, r1
 8001aae:	601a      	str	r2, [r3, #0]
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_8, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_8;
 8001ab0:	2280      	movs	r2, #128	; 0x80
 8001ab2:	0052      	lsls	r2, r2, #1
 8001ab4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ab6:	e7e4      	b.n	8001a82 <phaseA+0x26>
		if (newPhase==3){
 8001ab8:	2803      	cmp	r0, #3
 8001aba:	d1e2      	bne.n	8001a82 <phaseA+0x26>
 8001abc:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <phaseA+0x78>)
 8001abe:	4906      	ldr	r1, [pc, #24]	; (8001ad8 <phaseA+0x7c>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	4011      	ands	r1, r2
 8001ac4:	2280      	movs	r2, #128	; 0x80
 8001ac6:	04d2      	lsls	r2, r2, #19
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	601a      	str	r2, [r3, #0]
		LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_13, LL_GPIO_MODE_OUTPUT); GPIOB->BSRR = GPIO_PIN_13;
 8001acc:	2280      	movs	r2, #128	; 0x80
 8001ace:	0192      	lsls	r2, r2, #6
 8001ad0:	619a      	str	r2, [r3, #24]
 8001ad2:	e7e4      	b.n	8001a9e <phaseA+0x42>
 8001ad4:	48000400 	.word	0x48000400
 8001ad8:	f3ffffff 	.word	0xf3ffffff
 8001adc:	fffcffff 	.word	0xfffcffff

08001ae0 <phaseB>:

void phaseB(int newPhase){
	if (newPhase==1){
 8001ae0:	2801      	cmp	r0, #1
 8001ae2:	d111      	bne.n	8001b08 <phaseB+0x28>
 8001ae4:	491c      	ldr	r1, [pc, #112]	; (8001b58 <phaseB+0x78>)
 8001ae6:	4a1d      	ldr	r2, [pc, #116]	; (8001b5c <phaseB+0x7c>)
 8001ae8:	680b      	ldr	r3, [r1, #0]
 8001aea:	401a      	ands	r2, r3
 8001aec:	2380      	movs	r3, #128	; 0x80
 8001aee:	059b      	lsls	r3, r3, #22
 8001af0:	4313      	orrs	r3, r2
 8001af2:	600b      	str	r3, [r1, #0]
 8001af4:	2190      	movs	r1, #144	; 0x90
 8001af6:	05c9      	lsls	r1, r1, #23
 8001af8:	680b      	ldr	r3, [r1, #0]
 8001afa:	4a19      	ldr	r2, [pc, #100]	; (8001b60 <phaseB+0x80>)
 8001afc:	401a      	ands	r2, r3
 8001afe:	2380      	movs	r3, #128	; 0x80
 8001b00:	031b      	lsls	r3, r3, #12
 8001b02:	4313      	orrs	r3, r2
 8001b04:	600b      	str	r3, [r1, #0]
	if (newPhase==3){          // low mosfet on
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_14, LL_GPIO_MODE_OUTPUT); GPIOB->BSRR = GPIO_PIN_14;
	LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_9, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_9;
	}

}
 8001b06:	4770      	bx	lr
	if (newPhase==2){
 8001b08:	2802      	cmp	r0, #2
 8001b0a:	d117      	bne.n	8001b3c <phaseB+0x5c>
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <phaseB+0x78>)
 8001b0e:	4913      	ldr	r1, [pc, #76]	; (8001b5c <phaseB+0x7c>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	4011      	ands	r1, r2
 8001b14:	2280      	movs	r2, #128	; 0x80
 8001b16:	0552      	lsls	r2, r2, #21
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	601a      	str	r2, [r3, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_14, LL_GPIO_MODE_OUTPUT); GPIOB->BRR = GPIO_PIN_14;
 8001b1c:	2280      	movs	r2, #128	; 0x80
 8001b1e:	01d2      	lsls	r2, r2, #7
 8001b20:	629a      	str	r2, [r3, #40]	; 0x28
 8001b22:	2390      	movs	r3, #144	; 0x90
 8001b24:	05db      	lsls	r3, r3, #23
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	490d      	ldr	r1, [pc, #52]	; (8001b60 <phaseB+0x80>)
 8001b2a:	4011      	ands	r1, r2
 8001b2c:	2280      	movs	r2, #128	; 0x80
 8001b2e:	02d2      	lsls	r2, r2, #11
 8001b30:	430a      	orrs	r2, r1
 8001b32:	601a      	str	r2, [r3, #0]
	LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_9, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_9;
 8001b34:	2280      	movs	r2, #128	; 0x80
 8001b36:	0092      	lsls	r2, r2, #2
 8001b38:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b3a:	e7e4      	b.n	8001b06 <phaseB+0x26>
	if (newPhase==3){          // low mosfet on
 8001b3c:	2803      	cmp	r0, #3
 8001b3e:	d1e2      	bne.n	8001b06 <phaseB+0x26>
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <phaseB+0x78>)
 8001b42:	4906      	ldr	r1, [pc, #24]	; (8001b5c <phaseB+0x7c>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	4011      	ands	r1, r2
 8001b48:	2280      	movs	r2, #128	; 0x80
 8001b4a:	0552      	lsls	r2, r2, #21
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_14, LL_GPIO_MODE_OUTPUT); GPIOB->BSRR = GPIO_PIN_14;
 8001b50:	2280      	movs	r2, #128	; 0x80
 8001b52:	01d2      	lsls	r2, r2, #7
 8001b54:	619a      	str	r2, [r3, #24]
 8001b56:	e7e4      	b.n	8001b22 <phaseB+0x42>
 8001b58:	48000400 	.word	0x48000400
 8001b5c:	cfffffff 	.word	0xcfffffff
 8001b60:	fff3ffff 	.word	0xfff3ffff

08001b64 <phaseC>:

void phaseC(int newPhase){
	if (newPhase==1){
 8001b64:	2801      	cmp	r0, #1
 8001b66:	d111      	bne.n	8001b8c <phaseC+0x28>
 8001b68:	2280      	movs	r2, #128	; 0x80
 8001b6a:	491c      	ldr	r1, [pc, #112]	; (8001bdc <phaseC+0x78>)
 8001b6c:	0612      	lsls	r2, r2, #24
 8001b6e:	680b      	ldr	r3, [r1, #0]
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	089b      	lsrs	r3, r3, #2
 8001b74:	4313      	orrs	r3, r2
 8001b76:	600b      	str	r3, [r1, #0]
 8001b78:	2190      	movs	r1, #144	; 0x90
 8001b7a:	05c9      	lsls	r1, r1, #23
 8001b7c:	680b      	ldr	r3, [r1, #0]
 8001b7e:	4a18      	ldr	r2, [pc, #96]	; (8001be0 <phaseC+0x7c>)
 8001b80:	401a      	ands	r2, r3
 8001b82:	2380      	movs	r3, #128	; 0x80
 8001b84:	039b      	lsls	r3, r3, #14
 8001b86:	4313      	orrs	r3, r2
 8001b88:	600b      	str	r3, [r1, #0]
	if (newPhase==3){
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_15, LL_GPIO_MODE_OUTPUT); GPIOB->BSRR = GPIO_PIN_15;
	LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_10, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_10;
	}

}
 8001b8a:	4770      	bx	lr
	if (newPhase==2){
 8001b8c:	2802      	cmp	r0, #2
 8001b8e:	d117      	bne.n	8001bc0 <phaseC+0x5c>
 8001b90:	2180      	movs	r1, #128	; 0x80
 8001b92:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <phaseC+0x78>)
 8001b94:	05c9      	lsls	r1, r1, #23
 8001b96:	6813      	ldr	r3, [r2, #0]
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	089b      	lsrs	r3, r3, #2
 8001b9c:	430b      	orrs	r3, r1
 8001b9e:	6013      	str	r3, [r2, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_15, LL_GPIO_MODE_OUTPUT); GPIOB->BRR = GPIO_PIN_15;
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	021b      	lsls	r3, r3, #8
 8001ba4:	6293      	str	r3, [r2, #40]	; 0x28
 8001ba6:	2390      	movs	r3, #144	; 0x90
 8001ba8:	05db      	lsls	r3, r3, #23
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	490c      	ldr	r1, [pc, #48]	; (8001be0 <phaseC+0x7c>)
 8001bae:	4011      	ands	r1, r2
 8001bb0:	2280      	movs	r2, #128	; 0x80
 8001bb2:	0352      	lsls	r2, r2, #13
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	601a      	str	r2, [r3, #0]
	LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_10, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_10;
 8001bb8:	2280      	movs	r2, #128	; 0x80
 8001bba:	00d2      	lsls	r2, r2, #3
 8001bbc:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bbe:	e7e4      	b.n	8001b8a <phaseC+0x26>
	if (newPhase==3){
 8001bc0:	2803      	cmp	r0, #3
 8001bc2:	d1e2      	bne.n	8001b8a <phaseC+0x26>
 8001bc4:	2180      	movs	r1, #128	; 0x80
 8001bc6:	4a05      	ldr	r2, [pc, #20]	; (8001bdc <phaseC+0x78>)
 8001bc8:	05c9      	lsls	r1, r1, #23
 8001bca:	6813      	ldr	r3, [r2, #0]
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	089b      	lsrs	r3, r3, #2
 8001bd0:	430b      	orrs	r3, r1
 8001bd2:	6013      	str	r3, [r2, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_15, LL_GPIO_MODE_OUTPUT); GPIOB->BSRR = GPIO_PIN_15;
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	021b      	lsls	r3, r3, #8
 8001bd8:	6193      	str	r3, [r2, #24]
 8001bda:	e7e4      	b.n	8001ba6 <phaseC+0x42>
 8001bdc:	48000400 	.word	0x48000400
 8001be0:	ffcfffff 	.word	0xffcfffff

08001be4 <allOff>:

void allOff(){
 8001be4:	b510      	push	{r4, lr}
	phaseA(floating);
 8001be6:	4c05      	ldr	r4, [pc, #20]	; (8001bfc <allOff+0x18>)
 8001be8:	6820      	ldr	r0, [r4, #0]
 8001bea:	f7ff ff37 	bl	8001a5c <phaseA>
	phaseB(floating);
 8001bee:	6820      	ldr	r0, [r4, #0]
 8001bf0:	f7ff ff76 	bl	8001ae0 <phaseB>
	phaseC(floating);
 8001bf4:	6820      	ldr	r0, [r4, #0]
 8001bf6:	f7ff ffb5 	bl	8001b64 <phaseC>
}
 8001bfa:	bd10      	pop	{r4, pc}
 8001bfc:	2000000c 	.word	0x2000000c

08001c00 <comStep>:



void  comStep (int newStep){
 8001c00:	b510      	push	{r4, lr}


	if(coasting){
 8001c02:	4b2b      	ldr	r3, [pc, #172]	; (8001cb0 <comStep+0xb0>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <comStep+0x10>
	allOff();
 8001c0a:	f7ff ffeb 	bl	8001be4 <allOff>
	//	TIM1->CCR4 = ADCtimer;
	}
	}


}
 8001c0e:	bd10      	pop	{r4, pc}
	if (newStep==1){			//A-B
 8001c10:	2801      	cmp	r0, #1
 8001c12:	d115      	bne.n	8001c40 <comStep+0x40>
		phaseA(pwm);
 8001c14:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <comStep+0xb4>)
 8001c16:	6818      	ldr	r0, [r3, #0]
 8001c18:	f7ff ff20 	bl	8001a5c <phaseA>
		phaseB(lowside);
 8001c1c:	4b26      	ldr	r3, [pc, #152]	; (8001cb8 <comStep+0xb8>)
 8001c1e:	6818      	ldr	r0, [r3, #0]
 8001c20:	f7ff ff5e 	bl	8001ae0 <phaseB>
		phaseC(floating);
 8001c24:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <comStep+0xbc>)
 8001c26:	6818      	ldr	r0, [r3, #0]
 8001c28:	f7ff ff9c 	bl	8001b64 <phaseC>
		phase_A_position = 88;
 8001c2c:	2258      	movs	r2, #88	; 0x58
 8001c2e:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <comStep+0xc0>)
 8001c30:	601a      	str	r2, [r3, #0]
		phase_B_position = 208;
 8001c32:	4b24      	ldr	r3, [pc, #144]	; (8001cc4 <comStep+0xc4>)
 8001c34:	3278      	adds	r2, #120	; 0x78
 8001c36:	601a      	str	r2, [r3, #0]
		phase_C_position = 328;
 8001c38:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <comStep+0xc8>)
 8001c3a:	3278      	adds	r2, #120	; 0x78
 8001c3c:	601a      	str	r2, [r3, #0]
 8001c3e:	e7e6      	b.n	8001c0e <comStep+0xe>
	if (newStep==2){			// C-B
 8001c40:	2802      	cmp	r0, #2
 8001c42:	d10c      	bne.n	8001c5e <comStep+0x5e>
		phaseA(floating);
 8001c44:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <comStep+0xbc>)
 8001c46:	6818      	ldr	r0, [r3, #0]
 8001c48:	f7ff ff08 	bl	8001a5c <phaseA>
		phaseB(lowside);
 8001c4c:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <comStep+0xb8>)
		phaseB(floating);
 8001c4e:	6818      	ldr	r0, [r3, #0]
 8001c50:	f7ff ff46 	bl	8001ae0 <phaseB>
		phaseC(pwm);
 8001c54:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <comStep+0xb4>)
		phaseC(lowside);
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	f7ff ff84 	bl	8001b64 <phaseC>
}
 8001c5c:	e7d7      	b.n	8001c0e <comStep+0xe>
	if (newStep==3){		// C-A
 8001c5e:	2803      	cmp	r0, #3
 8001c60:	d105      	bne.n	8001c6e <comStep+0x6e>
		phaseA(lowside);
 8001c62:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <comStep+0xb8>)
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	f7ff fef9 	bl	8001a5c <phaseA>
		phaseB(floating);
 8001c6a:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <comStep+0xbc>)
 8001c6c:	e7ef      	b.n	8001c4e <comStep+0x4e>
	if (newStep==4){    // B-A
 8001c6e:	2804      	cmp	r0, #4
 8001c70:	d109      	bne.n	8001c86 <comStep+0x86>
		phaseA(lowside);
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <comStep+0xb8>)
 8001c74:	6818      	ldr	r0, [r3, #0]
 8001c76:	f7ff fef1 	bl	8001a5c <phaseA>
		phaseB(pwm);
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <comStep+0xb4>)
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	f7ff ff2f 	bl	8001ae0 <phaseB>
		phaseC(floating);
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <comStep+0xbc>)
 8001c84:	e7e7      	b.n	8001c56 <comStep+0x56>
	if (newStep==5){          // B-C
 8001c86:	2805      	cmp	r0, #5
 8001c88:	d109      	bne.n	8001c9e <comStep+0x9e>
		phaseA(floating);
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <comStep+0xbc>)
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	f7ff fee5 	bl	8001a5c <phaseA>
		phaseB(pwm);
 8001c92:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <comStep+0xb4>)
		phaseB(floating);
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	f7ff ff23 	bl	8001ae0 <phaseB>
		phaseC(lowside);
 8001c9a:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <comStep+0xb8>)
 8001c9c:	e7db      	b.n	8001c56 <comStep+0x56>
	if (newStep==6){       // A-C
 8001c9e:	2806      	cmp	r0, #6
 8001ca0:	d1b5      	bne.n	8001c0e <comStep+0xe>
		phaseA(pwm);
 8001ca2:	4b04      	ldr	r3, [pc, #16]	; (8001cb4 <comStep+0xb4>)
 8001ca4:	6818      	ldr	r0, [r3, #0]
 8001ca6:	f7ff fed9 	bl	8001a5c <phaseA>
		phaseB(floating);
 8001caa:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <comStep+0xbc>)
 8001cac:	e7f2      	b.n	8001c94 <comStep+0x94>
 8001cae:	46c0      	nop			; (mov r8, r8)
 8001cb0:	2000005d 	.word	0x2000005d
 8001cb4:	20000028 	.word	0x20000028
 8001cb8:	20000018 	.word	0x20000018
 8001cbc:	2000000c 	.word	0x2000000c
 8001cc0:	20000110 	.word	0x20000110
 8001cc4:	20000380 	.word	0x20000380
 8001cc8:	20000378 	.word	0x20000378

08001ccc <allpwm>:




void allpwm(){                        // for stepper_sine
 8001ccc:	b510      	push	{r4, lr}
	phaseA(pwm);
 8001cce:	4c05      	ldr	r4, [pc, #20]	; (8001ce4 <allpwm+0x18>)
 8001cd0:	6820      	ldr	r0, [r4, #0]
 8001cd2:	f7ff fec3 	bl	8001a5c <phaseA>
	phaseB(pwm);
 8001cd6:	6820      	ldr	r0, [r4, #0]
 8001cd8:	f7ff ff02 	bl	8001ae0 <phaseB>
	phaseC(pwm);
 8001cdc:	6820      	ldr	r0, [r4, #0]
 8001cde:	f7ff ff41 	bl	8001b64 <phaseC>
}
 8001ce2:	bd10      	pop	{r4, pc}
 8001ce4:	20000028 	.word	0x20000028

08001ce8 <detectInput>:

void detectInput(){
	smallestnumber = 20000;
	dshot = 0;
 8001ce8:	2300      	movs	r3, #0
void detectInput(){
 8001cea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	proshot = 0;
 8001cec:	4931      	ldr	r1, [pc, #196]	; (8001db4 <detectInput+0xcc>)
	smallestnumber = 20000;
 8001cee:	4d32      	ldr	r5, [pc, #200]	; (8001db8 <detectInput+0xd0>)
	proshot = 0;
 8001cf0:	700b      	strb	r3, [r1, #0]
	multishot = 0;
 8001cf2:	4932      	ldr	r1, [pc, #200]	; (8001dbc <detectInput+0xd4>)
	smallestnumber = 20000;
 8001cf4:	4a32      	ldr	r2, [pc, #200]	; (8001dc0 <detectInput+0xd8>)
	multishot = 0;
 8001cf6:	700b      	strb	r3, [r1, #0]
	oneshot42 = 0;
 8001cf8:	4932      	ldr	r1, [pc, #200]	; (8001dc4 <detectInput+0xdc>)
	dshot = 0;
 8001cfa:	4f33      	ldr	r7, [pc, #204]	; (8001dc8 <detectInput+0xe0>)
	oneshot42 = 0;
 8001cfc:	700b      	strb	r3, [r1, #0]
	oneshot125 = 0;
 8001cfe:	4933      	ldr	r1, [pc, #204]	; (8001dcc <detectInput+0xe4>)
	smallestnumber = 20000;
 8001d00:	602a      	str	r2, [r5, #0]
	oneshot125 = 0;
 8001d02:	700b      	strb	r3, [r1, #0]
	servoPwm = 0;
 8001d04:	4932      	ldr	r1, [pc, #200]	; (8001dd0 <detectInput+0xe8>)
	dshot = 0;
 8001d06:	703b      	strb	r3, [r7, #0]
	servoPwm = 0;
 8001d08:	700b      	strb	r3, [r1, #0]
	int lastnumber = dma_buffer[0];
 8001d0a:	4932      	ldr	r1, [pc, #200]	; (8001dd4 <detectInput+0xec>)
 8001d0c:	6808      	ldr	r0, [r1, #0]
	for ( int j = 1 ; j < input_buffer_size; j++){
 8001d0e:	4932      	ldr	r1, [pc, #200]	; (8001dd8 <detectInput+0xf0>)
 8001d10:	6809      	ldr	r1, [r1, #0]
 8001d12:	9101      	str	r1, [sp, #4]
 8001d14:	2101      	movs	r1, #1
 8001d16:	9c01      	ldr	r4, [sp, #4]
 8001d18:	42a1      	cmp	r1, r4
 8001d1a:	db24      	blt.n	8001d66 <detectInput+0x7e>
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d000      	beq.n	8001d22 <detectInput+0x3a>
 8001d20:	602a      	str	r2, [r5, #0]

		}
		lastnumber = dma_buffer[j];
	}

	if ((smallestnumber > 3)&&(smallestnumber < 22)){
 8001d22:	682b      	ldr	r3, [r5, #0]
 8001d24:	1f1a      	subs	r2, r3, #4
 8001d26:	2a11      	cmp	r2, #17
 8001d28:	d801      	bhi.n	8001d2e <detectInput+0x46>
		dshot = 1;
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	703a      	strb	r2, [r7, #0]
	}
	if ((smallestnumber > 40 )&&(smallestnumber < 80)){
 8001d2e:	001a      	movs	r2, r3
 8001d30:	3a29      	subs	r2, #41	; 0x29
 8001d32:	2a26      	cmp	r2, #38	; 0x26
 8001d34:	d807      	bhi.n	8001d46 <detectInput+0x5e>
		proshot = 1;
 8001d36:	2101      	movs	r1, #1
 8001d38:	4a1e      	ldr	r2, [pc, #120]	; (8001db4 <detectInput+0xcc>)
 8001d3a:	7011      	strb	r1, [r2, #0]
		TIM2->PSC=1;
 8001d3c:	2280      	movs	r2, #128	; 0x80
 8001d3e:	05d2      	lsls	r2, r2, #23
 8001d40:	6291      	str	r1, [r2, #40]	; 0x28
		TIM2->CNT = 0xffff;
 8001d42:	4926      	ldr	r1, [pc, #152]	; (8001ddc <detectInput+0xf4>)
 8001d44:	6251      	str	r1, [r2, #36]	; 0x24
	}
	if ((smallestnumber > 100 )&&(smallestnumber < 400)){
 8001d46:	001a      	movs	r2, r3
 8001d48:	2095      	movs	r0, #149	; 0x95
 8001d4a:	3a65      	subs	r2, #101	; 0x65
 8001d4c:	0040      	lsls	r0, r0, #1
 8001d4e:	4924      	ldr	r1, [pc, #144]	; (8001de0 <detectInput+0xf8>)
 8001d50:	4282      	cmp	r2, r0
 8001d52:	d816      	bhi.n	8001d82 <detectInput+0x9a>
		multishot = 1;
 8001d54:	2301      	movs	r3, #1
 8001d56:	4a19      	ldr	r2, [pc, #100]	; (8001dbc <detectInput+0xd4>)
 8001d58:	7013      	strb	r3, [r2, #0]

	if (smallestnumber == 0){
		inputSet = 0;
	}else{

		inputSet = 1;
 8001d5a:	2301      	movs	r3, #1

		HAL_Delay(50);
 8001d5c:	2032      	movs	r0, #50	; 0x32
		inputSet = 1;
 8001d5e:	700b      	strb	r3, [r1, #0]
		HAL_Delay(50);
 8001d60:	f7fe fb82 	bl	8000468 <HAL_Delay>
 8001d64:	e01e      	b.n	8001da4 <detectInput+0xbc>
		if((dma_buffer[j] - lastnumber) < smallestnumber){ // blank space
 8001d66:	008c      	lsls	r4, r1, #2
 8001d68:	46a4      	mov	ip, r4
 8001d6a:	4666      	mov	r6, ip
 8001d6c:	4c19      	ldr	r4, [pc, #100]	; (8001dd4 <detectInput+0xec>)
 8001d6e:	59a4      	ldr	r4, [r4, r6]
 8001d70:	46a4      	mov	ip, r4
 8001d72:	1a20      	subs	r0, r4, r0
 8001d74:	4290      	cmp	r0, r2
 8001d76:	d201      	bcs.n	8001d7c <detectInput+0x94>
			smallestnumber = dma_buffer[j] - lastnumber;
 8001d78:	0002      	movs	r2, r0
 8001d7a:	2301      	movs	r3, #1
		lastnumber = dma_buffer[j];
 8001d7c:	4660      	mov	r0, ip
	for ( int j = 1 ; j < input_buffer_size; j++){
 8001d7e:	3101      	adds	r1, #1
 8001d80:	e7c9      	b.n	8001d16 <detectInput+0x2e>
	if (smallestnumber > 500){
 8001d82:	22fa      	movs	r2, #250	; 0xfa
 8001d84:	0052      	lsls	r2, r2, #1
 8001d86:	4293      	cmp	r3, r2
 8001d88:	dd09      	ble.n	8001d9e <detectInput+0xb6>
		servoPwm = 1;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	4a10      	ldr	r2, [pc, #64]	; (8001dd0 <detectInput+0xe8>)
 8001d8e:	7013      	strb	r3, [r2, #0]
		TIM2->PSC = 47;
 8001d90:	2380      	movs	r3, #128	; 0x80
 8001d92:	222f      	movs	r2, #47	; 0x2f
 8001d94:	05db      	lsls	r3, r3, #23
 8001d96:	629a      	str	r2, [r3, #40]	; 0x28
		TIM2->CNT = 0xffff;
 8001d98:	4a10      	ldr	r2, [pc, #64]	; (8001ddc <detectInput+0xf4>)
 8001d9a:	625a      	str	r2, [r3, #36]	; 0x24
 8001d9c:	e7dd      	b.n	8001d5a <detectInput+0x72>
	if (smallestnumber == 0){
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1db      	bne.n	8001d5a <detectInput+0x72>
		inputSet = 0;
 8001da2:	700b      	strb	r3, [r1, #0]
		//	playInputTune();
	}
	HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_4, dma_buffer , 64);
 8001da4:	2340      	movs	r3, #64	; 0x40
 8001da6:	4a0b      	ldr	r2, [pc, #44]	; (8001dd4 <detectInput+0xec>)
 8001da8:	210c      	movs	r1, #12
 8001daa:	480e      	ldr	r0, [pc, #56]	; (8001de4 <detectInput+0xfc>)
 8001dac:	f7ff fcf6 	bl	800179c <HAL_TIM_IC_Start_DMA>
}
 8001db0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001db2:	46c0      	nop			; (mov r8, r8)
 8001db4:	200000cc 	.word	0x200000cc
 8001db8:	20000030 	.word	0x20000030
 8001dbc:	200000b1 	.word	0x200000b1
 8001dc0:	00004e20 	.word	0x00004e20
 8001dc4:	200000b9 	.word	0x200000b9
 8001dc8:	200000a8 	.word	0x200000a8
 8001dcc:	200000b8 	.word	0x200000b8
 8001dd0:	200000d4 	.word	0x200000d4
 8001dd4:	20000168 	.word	0x20000168
 8001dd8:	20000014 	.word	0x20000014
 8001ddc:	0000ffff 	.word	0x0000ffff
 8001de0:	200000b0 	.word	0x200000b0
 8001de4:	200002f8 	.word	0x200002f8

08001de8 <computeProshotDMA>:

void computeProshotDMA(){
 8001de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int lastnumber = dma_buffer[0];
	for ( int j = 1 ; j < 9; j++){
 8001dea:	2301      	movs	r3, #1
	int lastnumber = dma_buffer[0];
 8001dec:	4d30      	ldr	r5, [pc, #192]	; (8001eb0 <computeProshotDMA+0xc8>)

		if(((dma_buffer[j] - lastnumber) > 1500) && ((dma_buffer[j] - lastnumber) < 50000)){ // blank space
 8001dee:	4831      	ldr	r0, [pc, #196]	; (8001eb4 <computeProshotDMA+0xcc>)
	int lastnumber = dma_buffer[0];
 8001df0:	682a      	ldr	r2, [r5, #0]
		if(((dma_buffer[j] - lastnumber) > 1500) && ((dma_buffer[j] - lastnumber) < 50000)){ // blank space
 8001df2:	4c31      	ldr	r4, [pc, #196]	; (8001eb8 <computeProshotDMA+0xd0>)
 8001df4:	009f      	lsls	r7, r3, #2
 8001df6:	59e9      	ldr	r1, [r5, r7]
 8001df8:	1a82      	subs	r2, r0, r2
 8001dfa:	1852      	adds	r2, r2, r1
 8001dfc:	42a2      	cmp	r2, r4
 8001dfe:	d852      	bhi.n	8001ea6 <computeProshotDMA+0xbe>
			if ((dma_buffer[j+7] - dma_buffer[j])<10000){
 8001e00:	3307      	adds	r3, #7
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	58eb      	ldr	r3, [r5, r3]
 8001e06:	1a59      	subs	r1, r3, r1
 8001e08:	4b2c      	ldr	r3, [pc, #176]	; (8001ebc <computeProshotDMA+0xd4>)
 8001e0a:	4299      	cmp	r1, r3
 8001e0c:	d824      	bhi.n	8001e58 <computeProshotDMA+0x70>
 8001e0e:	2600      	movs	r6, #0
				//		for ( int i = 0; i < 8; i+= 2){
				//			 propulse[i>>1] = ((dma_buffer[j+i+1] - dma_buffer[j+i]) - 46)*11>>6;
				//		}
				for (int i = 0; i < 4; i++){

					propulse[i] = (((dma_buffer[j + i*2 +1] - dma_buffer[j + i*2])) - 23)/3;
 8001e10:	4c2b      	ldr	r4, [pc, #172]	; (8001ec0 <computeProshotDMA+0xd8>)
 8001e12:	19eb      	adds	r3, r5, r7
 8001e14:	6858      	ldr	r0, [r3, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2103      	movs	r1, #3
 8001e1a:	1ac0      	subs	r0, r0, r3
 8001e1c:	3817      	subs	r0, #23
 8001e1e:	f7fe f97d 	bl	800011c <__udivsi3>
 8001e22:	5130      	str	r0, [r6, r4]
 8001e24:	3604      	adds	r6, #4
 8001e26:	3708      	adds	r7, #8
				for (int i = 0; i < 4; i++){
 8001e28:	2e10      	cmp	r6, #16
 8001e2a:	d1f2      	bne.n	8001e12 <computeProshotDMA+0x2a>


				}

				calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 8001e2c:	6862      	ldr	r2, [r4, #4]
 8001e2e:	6823      	ldr	r3, [r4, #0]
 8001e30:	4053      	eors	r3, r2
 8001e32:	68a2      	ldr	r2, [r4, #8]
 8001e34:	4053      	eors	r3, r2
						|(propulse[0]^propulse[1]^propulse[2])<<2
 8001e36:	0099      	lsls	r1, r3, #2
				calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 8001e38:	00da      	lsls	r2, r3, #3
						|(propulse[0]^propulse[1]^propulse[2])<<2
 8001e3a:	430a      	orrs	r2, r1
						|(propulse[0]^propulse[1]^propulse[2])<<1
						|(propulse[0]^propulse[1]^propulse[2]));
 8001e3c:	431a      	orrs	r2, r3
						|(propulse[0]^propulse[1]^propulse[2])<<1
 8001e3e:	005b      	lsls	r3, r3, #1
						|(propulse[0]^propulse[1]^propulse[2]));
 8001e40:	4313      	orrs	r3, r2
				calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 8001e42:	4a20      	ldr	r2, [pc, #128]	; (8001ec4 <computeProshotDMA+0xdc>)
 8001e44:	6013      	str	r3, [r2, #0]
				checkCRC = (propulse[3]<<3 | propulse[3]<<2 | propulse[3]<<1 | propulse[3]);
 8001e46:	68e2      	ldr	r2, [r4, #12]
 8001e48:	00d3      	lsls	r3, r2, #3
 8001e4a:	0091      	lsls	r1, r2, #2
 8001e4c:	430b      	orrs	r3, r1
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	0052      	lsls	r2, r2, #1
 8001e52:	4313      	orrs	r3, r2
 8001e54:	4a1c      	ldr	r2, [pc, #112]	; (8001ec8 <computeProshotDMA+0xe0>)
 8001e56:	6013      	str	r3, [r2, #0]
			}


            if (calcCRC == checkCRC){
 8001e58:	4b1a      	ldr	r3, [pc, #104]	; (8001ec4 <computeProshotDMA+0xdc>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4b1a      	ldr	r3, [pc, #104]	; (8001ec8 <computeProshotDMA+0xe0>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d11a      	bne.n	8001e9a <computeProshotDMA+0xb2>
			int tocheck = ((propulse[0]<<7 | propulse[1]<<3 | propulse[2]>>1));
 8001e64:	4a16      	ldr	r2, [pc, #88]	; (8001ec0 <computeProshotDMA+0xd8>)
 8001e66:	6813      	ldr	r3, [r2, #0]
 8001e68:	6851      	ldr	r1, [r2, #4]
 8001e6a:	6892      	ldr	r2, [r2, #8]
 8001e6c:	01db      	lsls	r3, r3, #7
 8001e6e:	00c9      	lsls	r1, r1, #3
 8001e70:	1052      	asrs	r2, r2, #1
 8001e72:	430b      	orrs	r3, r1
 8001e74:	4313      	orrs	r3, r2
			if (tocheck > 2047 || tocheck < 0){
 8001e76:	4a15      	ldr	r2, [pc, #84]	; (8001ecc <computeProshotDMA+0xe4>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d80e      	bhi.n	8001e9a <computeProshotDMA+0xb2>
				break;
			}else{
				if(tocheck > 47){
 8001e7c:	2b2f      	cmp	r3, #47	; 0x2f
 8001e7e:	dd04      	ble.n	8001e8a <computeProshotDMA+0xa2>
					newinput = tocheck;
					dshotcommand = 0;
 8001e80:	2100      	movs	r1, #0
					newinput = tocheck;
 8001e82:	4a13      	ldr	r2, [pc, #76]	; (8001ed0 <computeProshotDMA+0xe8>)
 8001e84:	6013      	str	r3, [r2, #0]
					dshotcommand = 0;
 8001e86:	4a13      	ldr	r2, [pc, #76]	; (8001ed4 <computeProshotDMA+0xec>)
 8001e88:	6011      	str	r1, [r2, #0]
				}
				if ((tocheck <= 47)&& (tocheck > 0)){
 8001e8a:	1e5a      	subs	r2, r3, #1
 8001e8c:	2a2e      	cmp	r2, #46	; 0x2e
 8001e8e:	d805      	bhi.n	8001e9c <computeProshotDMA+0xb4>
					newinput = 0;
 8001e90:	2100      	movs	r1, #0
 8001e92:	4a0f      	ldr	r2, [pc, #60]	; (8001ed0 <computeProshotDMA+0xe8>)
 8001e94:	6011      	str	r1, [r2, #0]
					dshotcommand = tocheck;    //  todo
				}
				if (tocheck == 0){
					newinput = 0;
					dshotcommand = 0;
 8001e96:	4a0f      	ldr	r2, [pc, #60]	; (8001ed4 <computeProshotDMA+0xec>)
 8001e98:	6013      	str	r3, [r2, #0]
            }
			break;
		}
		lastnumber = dma_buffer[j];
	}
}
 8001e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if (tocheck == 0){
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1fc      	bne.n	8001e9a <computeProshotDMA+0xb2>
					newinput = 0;
 8001ea0:	4a0b      	ldr	r2, [pc, #44]	; (8001ed0 <computeProshotDMA+0xe8>)
 8001ea2:	6013      	str	r3, [r2, #0]
 8001ea4:	e7f7      	b.n	8001e96 <computeProshotDMA+0xae>
	for ( int j = 1 ; j < 9; j++){
 8001ea6:	3301      	adds	r3, #1
		lastnumber = dma_buffer[j];
 8001ea8:	000a      	movs	r2, r1
	for ( int j = 1 ; j < 9; j++){
 8001eaa:	2b09      	cmp	r3, #9
 8001eac:	d1a2      	bne.n	8001df4 <computeProshotDMA+0xc>
 8001eae:	e7f4      	b.n	8001e9a <computeProshotDMA+0xb2>
 8001eb0:	20000168 	.word	0x20000168
 8001eb4:	fffffa23 	.word	0xfffffa23
 8001eb8:	0000bd72 	.word	0x0000bd72
 8001ebc:	0000270f 	.word	0x0000270f
 8001ec0:	200000bc 	.word	0x200000bc
 8001ec4:	200000f8 	.word	0x200000f8
 8001ec8:	2000010c 	.word	0x2000010c
 8001ecc:	000007ff 	.word	0x000007ff
 8001ed0:	200000b4 	.word	0x200000b4
 8001ed4:	20000114 	.word	0x20000114

08001ed8 <computeMSInput>:

void computeMSInput(){

	int lastnumber = dma_buffer[0];
 8001ed8:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <computeMSInput+0x2c>)
void computeMSInput(){
 8001eda:	b507      	push	{r0, r1, r2, lr}
	int lastnumber = dma_buffer[0];
 8001edc:	681a      	ldr	r2, [r3, #0]
	for ( int j = 1 ; j < 2; j++){

		if(((dma_buffer[j] - lastnumber) < 1500) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 8001ede:	490a      	ldr	r1, [pc, #40]	; (8001f08 <computeMSInput+0x30>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	1a98      	subs	r0, r3, r2
 8001ee4:	4288      	cmp	r0, r1
 8001ee6:	d80c      	bhi.n	8001f02 <computeMSInput+0x2a>
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d00a      	beq.n	8001f02 <computeMSInput+0x2a>

			newinput = map((dma_buffer[j] - lastnumber),243,1200, 0, 2000);
 8001eec:	23fa      	movs	r3, #250	; 0xfa
 8001eee:	2296      	movs	r2, #150	; 0x96
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	00d2      	lsls	r2, r2, #3
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	21f3      	movs	r1, #243	; 0xf3
 8001efa:	f7ff fd9d 	bl	8001a38 <map>
 8001efe:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <computeMSInput+0x34>)
 8001f00:	6018      	str	r0, [r3, #0]
			break;
		}
		lastnumber = dma_buffer[j];
	}
}
 8001f02:	bd07      	pop	{r0, r1, r2, pc}
 8001f04:	20000168 	.word	0x20000168
 8001f08:	000005db 	.word	0x000005db
 8001f0c:	200000b4 	.word	0x200000b4

08001f10 <computeOS125Input>:

void computeOS125Input(){

	int lastnumber = dma_buffer[0];
 8001f10:	4b0a      	ldr	r3, [pc, #40]	; (8001f3c <computeOS125Input+0x2c>)
void computeOS125Input(){
 8001f12:	b507      	push	{r0, r1, r2, lr}
	int lastnumber = dma_buffer[0];
 8001f14:	681a      	ldr	r2, [r3, #0]
	for ( int j = 1 ; j < 2; j++){

		if(((dma_buffer[j] - lastnumber) < 12300) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 8001f16:	490a      	ldr	r1, [pc, #40]	; (8001f40 <computeOS125Input+0x30>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	1a98      	subs	r0, r3, r2
 8001f1c:	4288      	cmp	r0, r1
 8001f1e:	d80b      	bhi.n	8001f38 <computeOS125Input+0x28>
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d009      	beq.n	8001f38 <computeOS125Input+0x28>

			newinput = map((dma_buffer[j] - lastnumber),6500,12000, 0, 2000);
 8001f24:	23fa      	movs	r3, #250	; 0xfa
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	4a06      	ldr	r2, [pc, #24]	; (8001f44 <computeOS125Input+0x34>)
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	4906      	ldr	r1, [pc, #24]	; (8001f48 <computeOS125Input+0x38>)
 8001f30:	f7ff fd82 	bl	8001a38 <map>
 8001f34:	4b05      	ldr	r3, [pc, #20]	; (8001f4c <computeOS125Input+0x3c>)
 8001f36:	6018      	str	r0, [r3, #0]
			break;
		}
		lastnumber = dma_buffer[j];
	}
}
 8001f38:	bd07      	pop	{r0, r1, r2, pc}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	20000168 	.word	0x20000168
 8001f40:	0000300b 	.word	0x0000300b
 8001f44:	00002ee0 	.word	0x00002ee0
 8001f48:	00001964 	.word	0x00001964
 8001f4c:	200000b4 	.word	0x200000b4

08001f50 <computeOS42Input>:

void computeOS42Input(){

	int lastnumber = dma_buffer[0];
 8001f50:	4b0a      	ldr	r3, [pc, #40]	; (8001f7c <computeOS42Input+0x2c>)
void computeOS42Input(){
 8001f52:	b507      	push	{r0, r1, r2, lr}
	int lastnumber = dma_buffer[0];
 8001f54:	681a      	ldr	r2, [r3, #0]
	for ( int j = 1 ; j < 2; j++){

		if(((dma_buffer[j] - lastnumber) < 4500) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 8001f56:	490a      	ldr	r1, [pc, #40]	; (8001f80 <computeOS42Input+0x30>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	1a98      	subs	r0, r3, r2
 8001f5c:	4288      	cmp	r0, r1
 8001f5e:	d80c      	bhi.n	8001f7a <computeOS42Input+0x2a>
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d00a      	beq.n	8001f7a <computeOS42Input+0x2a>

			newinput = map((dma_buffer[j] - lastnumber),2020, 4032, 0, 2000);
 8001f64:	23fa      	movs	r3, #250	; 0xfa
 8001f66:	22fc      	movs	r2, #252	; 0xfc
 8001f68:	00db      	lsls	r3, r3, #3
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	0112      	lsls	r2, r2, #4
 8001f6e:	2300      	movs	r3, #0
 8001f70:	4904      	ldr	r1, [pc, #16]	; (8001f84 <computeOS42Input+0x34>)
 8001f72:	f7ff fd61 	bl	8001a38 <map>
 8001f76:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <computeOS42Input+0x38>)
 8001f78:	6018      	str	r0, [r3, #0]
			break;
		}
		lastnumber = dma_buffer[j];
	}
}
 8001f7a:	bd07      	pop	{r0, r1, r2, pc}
 8001f7c:	20000168 	.word	0x20000168
 8001f80:	00001193 	.word	0x00001193
 8001f84:	000007e4 	.word	0x000007e4
 8001f88:	200000b4 	.word	0x200000b4

08001f8c <computeServoInput>:
void computeServoInput(){

	int lastnumber = dma_buffer[0];
	for ( int j = 1 ; j < 3; j++){

		if(((dma_buffer[j] - lastnumber) >1000 ) && ((dma_buffer[j] - lastnumber) < 2010)){ // blank space
 8001f8c:	4b0d      	ldr	r3, [pc, #52]	; (8001fc4 <computeServoInput+0x38>)
void computeServoInput(){
 8001f8e:	b513      	push	{r0, r1, r4, lr}
		if(((dma_buffer[j] - lastnumber) >1000 ) && ((dma_buffer[j] - lastnumber) < 2010)){ // blank space
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	6859      	ldr	r1, [r3, #4]
 8001f94:	1a88      	subs	r0, r1, r2
 8001f96:	4a0c      	ldr	r2, [pc, #48]	; (8001fc8 <computeServoInput+0x3c>)
 8001f98:	1884      	adds	r4, r0, r2
 8001f9a:	22fc      	movs	r2, #252	; 0xfc
 8001f9c:	0092      	lsls	r2, r2, #2
 8001f9e:	4294      	cmp	r4, r2
 8001fa0:	d905      	bls.n	8001fae <computeServoInput+0x22>
 8001fa2:	6898      	ldr	r0, [r3, #8]
 8001fa4:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <computeServoInput+0x3c>)
 8001fa6:	1a40      	subs	r0, r0, r1
 8001fa8:	18c3      	adds	r3, r0, r3
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d808      	bhi.n	8001fc0 <computeServoInput+0x34>

			newinput = map((dma_buffer[j] - lastnumber), 1090, 2000, 0, 2000);
 8001fae:	22fa      	movs	r2, #250	; 0xfa
 8001fb0:	00d2      	lsls	r2, r2, #3
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	9200      	str	r2, [sp, #0]
 8001fb6:	4905      	ldr	r1, [pc, #20]	; (8001fcc <computeServoInput+0x40>)
 8001fb8:	f7ff fd3e 	bl	8001a38 <map>
 8001fbc:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <computeServoInput+0x44>)
 8001fbe:	6018      	str	r0, [r3, #0]
			break;
		}
		lastnumber = dma_buffer[j];
	}
}
 8001fc0:	bd13      	pop	{r0, r1, r4, pc}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	20000168 	.word	0x20000168
 8001fc8:	fffffc17 	.word	0xfffffc17
 8001fcc:	00000442 	.word	0x00000442
 8001fd0:	200000b4 	.word	0x200000b4

08001fd4 <computeDshotDMA>:


void computeDshotDMA(){

	int lastnumber = dma_buffer[0];
	for ( int j = 1 ; j < input_buffer_size; j++){
 8001fd4:	4a3d      	ldr	r2, [pc, #244]	; (80020cc <computeDshotDMA+0xf8>)
void computeDshotDMA(){
 8001fd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

		if(((dma_buffer[j] - lastnumber) > 50) && ((dma_buffer[j] - lastnumber) < 65000)){ // blank space
 8001fd8:	2633      	movs	r6, #51	; 0x33
	for ( int j = 1 ; j < input_buffer_size; j++){
 8001fda:	6814      	ldr	r4, [r2, #0]
 8001fdc:	2201      	movs	r2, #1
	int lastnumber = dma_buffer[0];
 8001fde:	493c      	ldr	r1, [pc, #240]	; (80020d0 <computeDshotDMA+0xfc>)
		if(((dma_buffer[j] - lastnumber) > 50) && ((dma_buffer[j] - lastnumber) < 65000)){ // blank space
 8001fe0:	4f3c      	ldr	r7, [pc, #240]	; (80020d4 <computeDshotDMA+0x100>)
	int lastnumber = dma_buffer[0];
 8001fe2:	680b      	ldr	r3, [r1, #0]
		if(((dma_buffer[j] - lastnumber) > 50) && ((dma_buffer[j] - lastnumber) < 65000)){ // blank space
 8001fe4:	4276      	negs	r6, r6
	for ( int j = 1 ; j < input_buffer_size; j++){
 8001fe6:	42a2      	cmp	r2, r4
 8001fe8:	da67      	bge.n	80020ba <computeDshotDMA+0xe6>
 8001fea:	0095      	lsls	r5, r2, #2
		if(((dma_buffer[j] - lastnumber) > 50) && ((dma_buffer[j] - lastnumber) < 65000)){ // blank space
 8001fec:	194d      	adds	r5, r1, r5
 8001fee:	6828      	ldr	r0, [r5, #0]
 8001ff0:	1af3      	subs	r3, r6, r3
 8001ff2:	181b      	adds	r3, r3, r0
 8001ff4:	42bb      	cmp	r3, r7
 8001ff6:	d865      	bhi.n	80020c4 <computeDshotDMA+0xf0>
 8001ff8:	2400      	movs	r4, #0

			for (int i = 0; i < 16; i++){
				dpulse[i] = ((dma_buffer[j + i*2 +1] - dma_buffer[j + i*2]) / 13) - 1;
 8001ffa:	260d      	movs	r6, #13
 8001ffc:	4f36      	ldr	r7, [pc, #216]	; (80020d8 <computeDshotDMA+0x104>)
 8001ffe:	0063      	lsls	r3, r4, #1
 8002000:	18ea      	adds	r2, r5, r3
 8002002:	6850      	ldr	r0, [r2, #4]
 8002004:	58eb      	ldr	r3, [r5, r3]
 8002006:	0031      	movs	r1, r6
 8002008:	1ac0      	subs	r0, r0, r3
 800200a:	f7fe f887 	bl	800011c <__udivsi3>
 800200e:	3801      	subs	r0, #1
 8002010:	51e0      	str	r0, [r4, r7]
 8002012:	3404      	adds	r4, #4
			for (int i = 0; i < 16; i++){
 8002014:	2c40      	cmp	r4, #64	; 0x40
 8002016:	d1f2      	bne.n	8001ffe <computeDshotDMA+0x2a>
			}

			uint8_t calcCRC = ((dpulse[0]^dpulse[4]^dpulse[8])<<3
 8002018:	683a      	ldr	r2, [r7, #0]
					|(dpulse[1]^dpulse[5]^dpulse[9])<<2
 800201a:	687b      	ldr	r3, [r7, #4]
			);
			uint8_t checkCRC = (dpulse[12]<<3 | dpulse[13]<<2 | dpulse[14]<<1 | dpulse[15]);
			//

			int tocheck = (
					dpulse[0]<<10 | dpulse[1]<<9 | dpulse[2]<<8 | dpulse[3]<<7
 800201c:	0291      	lsls	r1, r2, #10
 800201e:	025c      	lsls	r4, r3, #9
 8002020:	4321      	orrs	r1, r4
			int tocheck = (
 8002022:	6abc      	ldr	r4, [r7, #40]	; 0x28
					|(dpulse[3]^dpulse[7]^dpulse[11])
 8002024:	68f8      	ldr	r0, [r7, #12]
			int tocheck = (
 8002026:	4321      	orrs	r1, r4
					dpulse[0]<<10 | dpulse[1]<<9 | dpulse[2]<<8 | dpulse[3]<<7
 8002028:	68bc      	ldr	r4, [r7, #8]
					|(dpulse[2]^dpulse[6]^dpulse[10])<<1
 800202a:	69bd      	ldr	r5, [r7, #24]
					dpulse[0]<<10 | dpulse[1]<<9 | dpulse[2]<<8 | dpulse[3]<<7
 800202c:	0224      	lsls	r4, r4, #8
			int tocheck = (
 800202e:	430c      	orrs	r4, r1
					dpulse[0]<<10 | dpulse[1]<<9 | dpulse[2]<<8 | dpulse[3]<<7
 8002030:	01c1      	lsls	r1, r0, #7
			int tocheck = (
 8002032:	4321      	orrs	r1, r4
					| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 8002034:	693c      	ldr	r4, [r7, #16]
			uint8_t calcCRC = ((dpulse[0]^dpulse[4]^dpulse[8])<<3
 8002036:	6a3e      	ldr	r6, [r7, #32]
					| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 8002038:	01a4      	lsls	r4, r4, #6
			int tocheck = (
 800203a:	4321      	orrs	r1, r4
					| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 800203c:	697c      	ldr	r4, [r7, #20]
 800203e:	0164      	lsls	r4, r4, #5
			int tocheck = (
 8002040:	430c      	orrs	r4, r1
					| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 8002042:	0129      	lsls	r1, r5, #4
			int tocheck = (
 8002044:	4321      	orrs	r1, r4
					| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 8002046:	69fc      	ldr	r4, [r7, #28]
 8002048:	00e4      	lsls	r4, r4, #3
			int tocheck = (
 800204a:	430c      	orrs	r4, r1
					| dpulse[8]<<2 | dpulse[9]<<1 | dpulse[10]);
 800204c:	00b1      	lsls	r1, r6, #2
			int tocheck = (
 800204e:	4321      	orrs	r1, r4
					| dpulse[8]<<2 | dpulse[9]<<1 | dpulse[10]);
 8002050:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8002052:	0064      	lsls	r4, r4, #1
			int tocheck = (
 8002054:	4321      	orrs	r1, r4
			uint8_t calcCRC = ((dpulse[0]^dpulse[4]^dpulse[8])<<3
 8002056:	693c      	ldr	r4, [r7, #16]
 8002058:	4062      	eors	r2, r4
					|(dpulse[1]^dpulse[5]^dpulse[9])<<2
 800205a:	697c      	ldr	r4, [r7, #20]
			uint8_t calcCRC = ((dpulse[0]^dpulse[4]^dpulse[8])<<3
 800205c:	4072      	eors	r2, r6
					|(dpulse[1]^dpulse[5]^dpulse[9])<<2
 800205e:	4063      	eors	r3, r4
 8002060:	6a7c      	ldr	r4, [r7, #36]	; 0x24
			uint8_t calcCRC = ((dpulse[0]^dpulse[4]^dpulse[8])<<3
 8002062:	00d2      	lsls	r2, r2, #3
					|(dpulse[1]^dpulse[5]^dpulse[9])<<2
 8002064:	4063      	eors	r3, r4
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	431a      	orrs	r2, r3
					|(dpulse[3]^dpulse[7]^dpulse[11])
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	4058      	eors	r0, r3
 800206e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002070:	4058      	eors	r0, r3
					|(dpulse[2]^dpulse[6]^dpulse[10])<<1
 8002072:	68bb      	ldr	r3, [r7, #8]
					|(dpulse[3]^dpulse[7]^dpulse[11])
 8002074:	4302      	orrs	r2, r0
					|(dpulse[2]^dpulse[6]^dpulse[10])<<1
 8002076:	405d      	eors	r5, r3
 8002078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800207a:	405d      	eors	r5, r3
			uint8_t checkCRC = (dpulse[12]<<3 | dpulse[13]<<2 | dpulse[14]<<1 | dpulse[15]);
 800207c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
					|(dpulse[2]^dpulse[6]^dpulse[10])<<1
 800207e:	006d      	lsls	r5, r5, #1
			uint8_t checkCRC = (dpulse[12]<<3 | dpulse[13]<<2 | dpulse[14]<<1 | dpulse[15]);
 8002080:	00de      	lsls	r6, r3, #3
 8002082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
					|(dpulse[3]^dpulse[7]^dpulse[11])
 8002084:	4315      	orrs	r5, r2
			uint8_t checkCRC = (dpulse[12]<<3 | dpulse[13]<<2 | dpulse[14]<<1 | dpulse[15]);
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	431e      	orrs	r6, r3
 800208a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

			if(calcCRC == checkCRC){
 800208c:	b26d      	sxtb	r5, r5
			uint8_t checkCRC = (dpulse[12]<<3 | dpulse[13]<<2 | dpulse[14]<<1 | dpulse[15]);
 800208e:	431e      	orrs	r6, r3
 8002090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	431e      	orrs	r6, r3
			if(calcCRC == checkCRC){
 8002096:	b276      	sxtb	r6, r6
 8002098:	42b5      	cmp	r5, r6
 800209a:	d106      	bne.n	80020aa <computeDshotDMA+0xd6>

				if (tocheck > 47){
 800209c:	292f      	cmp	r1, #47	; 0x2f
 800209e:	dd04      	ble.n	80020aa <computeDshotDMA+0xd6>
					newinput = tocheck;
                    dshotcommand = 0;
 80020a0:	2200      	movs	r2, #0
					newinput = tocheck;
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <computeDshotDMA+0x108>)
 80020a4:	6019      	str	r1, [r3, #0]
                    dshotcommand = 0;
 80020a6:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <computeDshotDMA+0x10c>)
 80020a8:	601a      	str	r2, [r3, #0]
				}
			}
			if ((tocheck <= 47)&& (tocheck > 0)){
 80020aa:	1e4b      	subs	r3, r1, #1
 80020ac:	2b2e      	cmp	r3, #46	; 0x2e
 80020ae:	d805      	bhi.n	80020bc <computeDshotDMA+0xe8>
				newinput = 0;
 80020b0:	2200      	movs	r2, #0
 80020b2:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <computeDshotDMA+0x108>)
 80020b4:	601a      	str	r2, [r3, #0]
				dshotcommand = tocheck;    //  todo
 80020b6:	4b0a      	ldr	r3, [pc, #40]	; (80020e0 <computeDshotDMA+0x10c>)
			}
			if (tocheck == 0){
				newinput = 0;
 80020b8:	6019      	str	r1, [r3, #0]

			break;
		}
		lastnumber = dma_buffer[j];
	}
}
 80020ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (tocheck == 0){
 80020bc:	2900      	cmp	r1, #0
 80020be:	d1fc      	bne.n	80020ba <computeDshotDMA+0xe6>
				newinput = 0;
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <computeDshotDMA+0x108>)
 80020c2:	e7f9      	b.n	80020b8 <computeDshotDMA+0xe4>
		lastnumber = dma_buffer[j];
 80020c4:	0003      	movs	r3, r0
	for ( int j = 1 ; j < input_buffer_size; j++){
 80020c6:	3201      	adds	r2, #1
 80020c8:	e78d      	b.n	8001fe6 <computeDshotDMA+0x12>
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	20000014 	.word	0x20000014
 80020d0:	20000168 	.word	0x20000168
 80020d4:	0000fdb4 	.word	0x0000fdb4
 80020d8:	20000068 	.word	0x20000068
 80020dc:	200000b4 	.word	0x200000b4
 80020e0:	20000114 	.word	0x20000114

080020e4 <transferComplete>:

void transferComplete(){
	//	TIM15->CNT = 1;
//	compit = 0;
	signaltimeout = 0;
 80020e4:	2200      	movs	r2, #0
 80020e6:	4b33      	ldr	r3, [pc, #204]	; (80021b4 <transferComplete+0xd0>)
void transferComplete(){
 80020e8:	b510      	push	{r4, lr}
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 80020ea:	2108      	movs	r1, #8
 80020ec:	4832      	ldr	r0, [pc, #200]	; (80021b8 <transferComplete+0xd4>)
	signaltimeout = 0;
 80020ee:	601a      	str	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 80020f0:	f7fe fb9c 	bl	800082c <HAL_GPIO_TogglePin>


	if (inputSet == 1){
 80020f4:	4b31      	ldr	r3, [pc, #196]	; (80021bc <transferComplete+0xd8>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d157      	bne.n	80021ac <transferComplete+0xc8>
		if (dshot == 1){
 80020fc:	4b30      	ldr	r3, [pc, #192]	; (80021c0 <transferComplete+0xdc>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b01      	cmp	r3, #1
 8002102:	d107      	bne.n	8002114 <transferComplete+0x30>
			computeDshotDMA();
 8002104:	f7ff ff66 	bl	8001fd4 <computeDshotDMA>
			HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_4, dma_buffer , 64);
 8002108:	2340      	movs	r3, #64	; 0x40
 800210a:	4a2e      	ldr	r2, [pc, #184]	; (80021c4 <transferComplete+0xe0>)
 800210c:	210c      	movs	r1, #12
 800210e:	482e      	ldr	r0, [pc, #184]	; (80021c8 <transferComplete+0xe4>)
 8002110:	f7ff fb44 	bl	800179c <HAL_TIM_IC_Start_DMA>
		}
		if (proshot == 1){
 8002114:	4b2d      	ldr	r3, [pc, #180]	; (80021cc <transferComplete+0xe8>)
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b01      	cmp	r3, #1
 800211a:	d107      	bne.n	800212c <transferComplete+0x48>
			computeProshotDMA();
 800211c:	f7ff fe64 	bl	8001de8 <computeProshotDMA>
			HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_4, dma_buffer , 16);
 8002120:	2310      	movs	r3, #16
 8002122:	4a28      	ldr	r2, [pc, #160]	; (80021c4 <transferComplete+0xe0>)
 8002124:	210c      	movs	r1, #12
 8002126:	4828      	ldr	r0, [pc, #160]	; (80021c8 <transferComplete+0xe4>)
 8002128:	f7ff fb38 	bl	800179c <HAL_TIM_IC_Start_DMA>
		}

		if  (servoPwm == 1){
 800212c:	4b28      	ldr	r3, [pc, #160]	; (80021d0 <transferComplete+0xec>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d107      	bne.n	8002144 <transferComplete+0x60>
			computeServoInput();
 8002134:	f7ff ff2a 	bl	8001f8c <computeServoInput>
			HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_4, dma_buffer , 3);
 8002138:	2303      	movs	r3, #3
 800213a:	4a22      	ldr	r2, [pc, #136]	; (80021c4 <transferComplete+0xe0>)
 800213c:	210c      	movs	r1, #12
 800213e:	4822      	ldr	r0, [pc, #136]	; (80021c8 <transferComplete+0xe4>)
 8002140:	f7ff fb2c 	bl	800179c <HAL_TIM_IC_Start_DMA>

		}
		if  (multishot){
 8002144:	4b23      	ldr	r3, [pc, #140]	; (80021d4 <transferComplete+0xf0>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d007      	beq.n	800215c <transferComplete+0x78>
			computeMSInput();
 800214c:	f7ff fec4 	bl	8001ed8 <computeMSInput>
			HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_4, dma_buffer , 3);
 8002150:	2303      	movs	r3, #3
 8002152:	4a1c      	ldr	r2, [pc, #112]	; (80021c4 <transferComplete+0xe0>)
 8002154:	210c      	movs	r1, #12
 8002156:	481c      	ldr	r0, [pc, #112]	; (80021c8 <transferComplete+0xe4>)
 8002158:	f7ff fb20 	bl	800179c <HAL_TIM_IC_Start_DMA>

		}
		if  (oneshot125){
 800215c:	4b1e      	ldr	r3, [pc, #120]	; (80021d8 <transferComplete+0xf4>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d007      	beq.n	8002174 <transferComplete+0x90>
			computeOS125Input();
 8002164:	f7ff fed4 	bl	8001f10 <computeOS125Input>
			HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_4, dma_buffer , 3);
 8002168:	2303      	movs	r3, #3
 800216a:	4a16      	ldr	r2, [pc, #88]	; (80021c4 <transferComplete+0xe0>)
 800216c:	210c      	movs	r1, #12
 800216e:	4816      	ldr	r0, [pc, #88]	; (80021c8 <transferComplete+0xe4>)
 8002170:	f7ff fb14 	bl	800179c <HAL_TIM_IC_Start_DMA>

		}
		if  (oneshot42){
 8002174:	4b19      	ldr	r3, [pc, #100]	; (80021dc <transferComplete+0xf8>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d007      	beq.n	800218c <transferComplete+0xa8>
			computeOS42Input();
 800217c:	f7ff fee8 	bl	8001f50 <computeOS42Input>
			HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_4, dma_buffer , 3);
 8002180:	2303      	movs	r3, #3
 8002182:	4a10      	ldr	r2, [pc, #64]	; (80021c4 <transferComplete+0xe0>)
 8002184:	210c      	movs	r1, #12
 8002186:	4810      	ldr	r0, [pc, #64]	; (80021c8 <transferComplete+0xe4>)
 8002188:	f7ff fb08 	bl	800179c <HAL_TIM_IC_Start_DMA>

		}
		if (!armed){
 800218c:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <transferComplete+0xfc>)
 800218e:	781a      	ldrb	r2, [r3, #0]
 8002190:	2a00      	cmp	r2, #0
 8002192:	d10b      	bne.n	80021ac <transferComplete+0xc8>
			if (input < 0){
 8002194:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <transferComplete+0x100>)
 8002196:	6819      	ldr	r1, [r3, #0]
 8002198:	2900      	cmp	r1, #0
 800219a:	da00      	bge.n	800219e <transferComplete+0xba>
				  						input = 0;
 800219c:	601a      	str	r2, [r3, #0]
				  					}
			 		 if (input == 0){                       // note this in input..not newinput so it will be adjusted be main loop
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <transferComplete+0x104>)
 80021a2:	2a00      	cmp	r2, #0
 80021a4:	d103      	bne.n	80021ae <transferComplete+0xca>
			 		 			zero_input_count++;
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	3201      	adds	r2, #1
			 		 		}else{
			 		 			zero_input_count = 0;
 80021aa:	601a      	str	r2, [r3, #0]


	  }

	}
}
 80021ac:	bd10      	pop	{r4, pc}
			 		 			zero_input_count = 0;
 80021ae:	2200      	movs	r2, #0
 80021b0:	e7fb      	b.n	80021aa <transferComplete+0xc6>
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	200000d8 	.word	0x200000d8
 80021b8:	48000800 	.word	0x48000800
 80021bc:	200000b0 	.word	0x200000b0
 80021c0:	200000a8 	.word	0x200000a8
 80021c4:	20000168 	.word	0x20000168
 80021c8:	200002f8 	.word	0x200002f8
 80021cc:	200000cc 	.word	0x200000cc
 80021d0:	200000d4 	.word	0x200000d4
 80021d4:	200000b1 	.word	0x200000b1
 80021d8:	200000b8 	.word	0x200000b8
 80021dc:	200000b9 	.word	0x200000b9
 80021e0:	2000005c 	.word	0x2000005c
 80021e4:	200000ac 	.word	0x200000ac
 80021e8:	200000ec 	.word	0x200000ec

080021ec <playStartupTune>:

void playStartupTune(){
	TIM1->PSC = 75;
 80021ec:	234b      	movs	r3, #75	; 0x4b
void playStartupTune(){
 80021ee:	b510      	push	{r4, lr}
	TIM1->PSC = 75;
 80021f0:	4c0d      	ldr	r4, [pc, #52]	; (8002228 <playStartupTune+0x3c>)
	TIM1->CCR1 = 5;
	TIM1->CCR2 = 5;
	TIM1->CCR3 = 5;
	comStep(2);
 80021f2:	2002      	movs	r0, #2
	TIM1->PSC = 75;
 80021f4:	62a3      	str	r3, [r4, #40]	; 0x28
	TIM1->CCR1 = 5;
 80021f6:	3b46      	subs	r3, #70	; 0x46
 80021f8:	6363      	str	r3, [r4, #52]	; 0x34
	TIM1->CCR2 = 5;
 80021fa:	63a3      	str	r3, [r4, #56]	; 0x38
	TIM1->CCR3 = 5;
 80021fc:	63e3      	str	r3, [r4, #60]	; 0x3c
	comStep(2);
 80021fe:	f7ff fcff 	bl	8001c00 <comStep>
	HAL_Delay(100);
 8002202:	2064      	movs	r0, #100	; 0x64
 8002204:	f7fe f930 	bl	8000468 <HAL_Delay>
	TIM1->PSC = 50;
 8002208:	2332      	movs	r3, #50	; 0x32
	HAL_Delay(100);
 800220a:	2064      	movs	r0, #100	; 0x64
	TIM1->PSC = 50;
 800220c:	62a3      	str	r3, [r4, #40]	; 0x28
	HAL_Delay(100);
 800220e:	f7fe f92b 	bl	8000468 <HAL_Delay>
	TIM1->PSC = 25;
 8002212:	2319      	movs	r3, #25
	HAL_Delay(100);
 8002214:	2064      	movs	r0, #100	; 0x64
	TIM1->PSC = 25;
 8002216:	62a3      	str	r3, [r4, #40]	; 0x28
	HAL_Delay(100);
 8002218:	f7fe f926 	bl	8000468 <HAL_Delay>
	allOff();
 800221c:	f7ff fce2 	bl	8001be4 <allOff>
	TIM1->PSC = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8002224:	bd10      	pop	{r4, pc}
 8002226:	46c0      	nop			; (mov r8, r8)
 8002228:	40012c00 	.word	0x40012c00

0800222c <playInputTune>:

void playInputTune(){
 800222c:	b570      	push	{r4, r5, r6, lr}
	TIM1->PSC = 100;
	TIM1->CCR1 = 5;
 800222e:	2305      	movs	r3, #5
	TIM1->PSC = 100;
 8002230:	2564      	movs	r5, #100	; 0x64
 8002232:	4c0a      	ldr	r4, [pc, #40]	; (800225c <playInputTune+0x30>)
	TIM1->CCR2 = 5;
	TIM1->CCR3 = 5;
	comStep(2);
 8002234:	2002      	movs	r0, #2
	TIM1->PSC = 100;
 8002236:	62a5      	str	r5, [r4, #40]	; 0x28
	TIM1->CCR1 = 5;
 8002238:	6363      	str	r3, [r4, #52]	; 0x34
	TIM1->CCR2 = 5;
 800223a:	63a3      	str	r3, [r4, #56]	; 0x38
	TIM1->CCR3 = 5;
 800223c:	63e3      	str	r3, [r4, #60]	; 0x3c
	comStep(2);
 800223e:	f7ff fcdf 	bl	8001c00 <comStep>
	HAL_Delay(100);
 8002242:	0028      	movs	r0, r5
 8002244:	f7fe f910 	bl	8000468 <HAL_Delay>
	TIM1->PSC = 50;
 8002248:	2332      	movs	r3, #50	; 0x32
	HAL_Delay(100);
 800224a:	0028      	movs	r0, r5
	TIM1->PSC = 50;
 800224c:	62a3      	str	r3, [r4, #40]	; 0x28
	HAL_Delay(100);
 800224e:	f7fe f90b 	bl	8000468 <HAL_Delay>
	allOff();
 8002252:	f7ff fcc7 	bl	8001be4 <allOff>
	TIM1->PSC = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800225a:	bd70      	pop	{r4, r5, r6, pc}
 800225c:	40012c00 	.word	0x40012c00

08002260 <getBemfState>:

void getBemfState(){
 8002260:	b570      	push	{r4, r5, r6, lr}



	if (step == 1 || step == 4){
 8002262:	4d1a      	ldr	r5, [pc, #104]	; (80022cc <getBemfState+0x6c>)
 8002264:	4c1a      	ldr	r4, [pc, #104]	; (80022d0 <getBemfState+0x70>)
 8002266:	682b      	ldr	r3, [r5, #0]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d001      	beq.n	8002270 <getBemfState+0x10>
 800226c:	2b04      	cmp	r3, #4
 800226e:	d105      	bne.n	800227c <getBemfState+0x1c>
	   current_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8002270:	2090      	movs	r0, #144	; 0x90
 8002272:	2101      	movs	r1, #1
 8002274:	05c0      	lsls	r0, r0, #23
 8002276:	f7fe fad3 	bl	8000820 <HAL_GPIO_ReadPin>
 800227a:	6020      	str	r0, [r4, #0]
	}
    if (step == 2 || step == 5){            //        in phase two or 5 read from phase A PA2
 800227c:	682b      	ldr	r3, [r5, #0]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d001      	beq.n	8002286 <getBemfState+0x26>
 8002282:	2b05      	cmp	r3, #5
 8002284:	d105      	bne.n	8002292 <getBemfState+0x32>
    	current_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 8002286:	2090      	movs	r0, #144	; 0x90
 8002288:	2104      	movs	r1, #4
 800228a:	05c0      	lsls	r0, r0, #23
 800228c:	f7fe fac8 	bl	8000820 <HAL_GPIO_ReadPin>
 8002290:	6020      	str	r0, [r4, #0]
	}
    if (step == 3 || step == 6){                         // phase B pa1
 8002292:	682b      	ldr	r3, [r5, #0]
 8002294:	2b03      	cmp	r3, #3
 8002296:	d001      	beq.n	800229c <getBemfState+0x3c>
 8002298:	2b06      	cmp	r3, #6
 800229a:	d105      	bne.n	80022a8 <getBemfState+0x48>
    	current_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 800229c:	2090      	movs	r0, #144	; 0x90
 800229e:	2102      	movs	r1, #2
 80022a0:	05c0      	lsls	r0, r0, #23
 80022a2:	f7fe fabd 	bl	8000820 <HAL_GPIO_ReadPin>
 80022a6:	6020      	str	r0, [r4, #0]

	}

    if (rising){
 80022a8:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <getBemfState+0x74>)
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <getBemfState+0x78>)
 80022ae:	2a00      	cmp	r2, #0
 80022b0:	d006      	beq.n	80022c0 <getBemfState+0x60>
    	if (current_state){
 80022b2:	6822      	ldr	r2, [r4, #0]
 80022b4:	2a00      	cmp	r2, #0
 80022b6:	d006      	beq.n	80022c6 <getBemfState+0x66>
    		bemfcounter++;
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	3201      	adds	r2, #1
    		}else{
    		bemfcounter = 0;
 80022bc:	601a      	str	r2, [r3, #0]
    	}
    }



}
 80022be:	bd70      	pop	{r4, r5, r6, pc}
    	if(!current_state){
 80022c0:	6822      	ldr	r2, [r4, #0]
 80022c2:	2a00      	cmp	r2, #0
 80022c4:	d0f8      	beq.n	80022b8 <getBemfState+0x58>
    		bemfcounter = 0;
 80022c6:	2200      	movs	r2, #0
 80022c8:	e7f8      	b.n	80022bc <getBemfState+0x5c>
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	20000034 	.word	0x20000034
 80022d0:	20000064 	.word	0x20000064
 80022d4:	2000002c 	.word	0x2000002c
 80022d8:	20000164 	.word	0x20000164

080022dc <commutate>:




void commutate(){
	if (forward == 1){
 80022dc:	4b23      	ldr	r3, [pc, #140]	; (800236c <commutate+0x90>)
void commutate(){
 80022de:	b510      	push	{r4, lr}
	if (forward == 1){
 80022e0:	6819      	ldr	r1, [r3, #0]
 80022e2:	4b23      	ldr	r3, [pc, #140]	; (8002370 <commutate+0x94>)
 80022e4:	2901      	cmp	r1, #1
 80022e6:	d124      	bne.n	8002332 <commutate+0x56>
		step++;
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	3201      	adds	r2, #1
		if (step > 6) {
 80022ec:	2a06      	cmp	r2, #6
 80022ee:	dc1e      	bgt.n	800232e <commutate+0x52>
		step++;
 80022f0:	601a      	str	r2, [r3, #0]
			step = 1;
		}
		if (step == 1 || step == 3 || step == 5) {
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	2102      	movs	r1, #2
 80022f6:	0010      	movs	r0, r2
 80022f8:	4388      	bics	r0, r1
 80022fa:	2801      	cmp	r0, #1
 80022fc:	d001      	beq.n	8002302 <commutate+0x26>
 80022fe:	2a05      	cmp	r2, #5
 8002300:	d102      	bne.n	8002308 <commutate+0x2c>
			rising = 1;                                // is back emf rising or falling
 8002302:	2001      	movs	r0, #1
 8002304:	491b      	ldr	r1, [pc, #108]	; (8002374 <commutate+0x98>)
 8002306:	6008      	str	r0, [r1, #0]
		}
		if (step == 2 || step == 4 || step == 6) {
 8002308:	2104      	movs	r1, #4
 800230a:	0010      	movs	r0, r2
 800230c:	4388      	bics	r0, r1
 800230e:	2802      	cmp	r0, #2
 8002310:	d001      	beq.n	8002316 <commutate+0x3a>
 8002312:	2a04      	cmp	r2, #4
 8002314:	d102      	bne.n	800231c <commutate+0x40>
			rising = 0;
 8002316:	2100      	movs	r1, #0
		}
		if (step == 1 || step == 3 || step == 5) {
			rising = 0;
		}
		if (step == 2 || step == 4 || step == 6) {
			rising = 1;
 8002318:	4a16      	ldr	r2, [pc, #88]	; (8002374 <commutate+0x98>)
 800231a:	6011      	str	r1, [r2, #0]
		}
	}
	comStep(step);
 800231c:	6818      	ldr	r0, [r3, #0]
 800231e:	f7ff fc6f 	bl	8001c00 <comStep>
//	switchADCPhase();
	bemfcounter = 0;
 8002322:	2300      	movs	r3, #0
 8002324:	4a14      	ldr	r2, [pc, #80]	; (8002378 <commutate+0x9c>)
 8002326:	6013      	str	r3, [r2, #0]
	zcfound = 0;
 8002328:	4a14      	ldr	r2, [pc, #80]	; (800237c <commutate+0xa0>)
 800232a:	6013      	str	r3, [r2, #0]
}
 800232c:	bd10      	pop	{r4, pc}
			step = 1;
 800232e:	6019      	str	r1, [r3, #0]
 8002330:	e7df      	b.n	80022f2 <commutate+0x16>
	if (forward == 0){
 8002332:	2900      	cmp	r1, #0
 8002334:	d1f2      	bne.n	800231c <commutate+0x40>
		step--;
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	3a01      	subs	r2, #1
		if (step < 1) {
 800233a:	2a00      	cmp	r2, #0
 800233c:	dd14      	ble.n	8002368 <commutate+0x8c>
			step = 6;
 800233e:	601a      	str	r2, [r3, #0]
		if (step == 1 || step == 3 || step == 5) {
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	2102      	movs	r1, #2
 8002344:	0010      	movs	r0, r2
 8002346:	4388      	bics	r0, r1
 8002348:	2801      	cmp	r0, #1
 800234a:	d001      	beq.n	8002350 <commutate+0x74>
 800234c:	2a05      	cmp	r2, #5
 800234e:	d102      	bne.n	8002356 <commutate+0x7a>
			rising = 0;
 8002350:	2000      	movs	r0, #0
 8002352:	4908      	ldr	r1, [pc, #32]	; (8002374 <commutate+0x98>)
 8002354:	6008      	str	r0, [r1, #0]
		if (step == 2 || step == 4 || step == 6) {
 8002356:	2104      	movs	r1, #4
 8002358:	0010      	movs	r0, r2
 800235a:	4388      	bics	r0, r1
 800235c:	2802      	cmp	r0, #2
 800235e:	d001      	beq.n	8002364 <commutate+0x88>
 8002360:	2a04      	cmp	r2, #4
 8002362:	d1db      	bne.n	800231c <commutate+0x40>
			rising = 1;
 8002364:	2101      	movs	r1, #1
 8002366:	e7d7      	b.n	8002318 <commutate+0x3c>
			step = 6;
 8002368:	2206      	movs	r2, #6
 800236a:	e7e8      	b.n	800233e <commutate+0x62>
 800236c:	20000010 	.word	0x20000010
 8002370:	20000034 	.word	0x20000034
 8002374:	2000002c 	.word	0x2000002c
 8002378:	20000164 	.word	0x20000164
 800237c:	200000e4 	.word	0x200000e4

08002380 <HAL_TIM_PeriodElapsedCallback>:
//				}
//			}else{

//			}

}
 8002380:	4770      	bx	lr
	...

08002384 <zcfoundroutine>:
	//					sensorless = 1;
}



void zcfoundroutine(){
 8002384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	thiszctime = TIM3->CNT;
	TIM3->CNT = 0;
 8002386:	2300      	movs	r3, #0
	thiszctime = TIM3->CNT;
 8002388:	4f1a      	ldr	r7, [pc, #104]	; (80023f4 <zcfoundroutine+0x70>)
	commutation_interval = (thiszctime + (3*commutation_interval)) / 4;
 800238a:	4c1b      	ldr	r4, [pc, #108]	; (80023f8 <zcfoundroutine+0x74>)
	thiszctime = TIM3->CNT;
 800238c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800238e:	4e1b      	ldr	r6, [pc, #108]	; (80023fc <zcfoundroutine+0x78>)
	commutation_interval = (thiszctime + (3*commutation_interval)) / 4;
 8002390:	6820      	ldr	r0, [r4, #0]
	thiszctime = TIM3->CNT;
 8002392:	6031      	str	r1, [r6, #0]
	TIM3->CNT = 0;
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
	commutation_interval = (thiszctime + (3*commutation_interval)) / 4;
 8002396:	3303      	adds	r3, #3
 8002398:	4358      	muls	r0, r3
 800239a:	1840      	adds	r0, r0, r1
 800239c:	17c2      	asrs	r2, r0, #31
 800239e:	4013      	ands	r3, r2
 80023a0:	181b      	adds	r3, r3, r0
 80023a2:	109b      	asrs	r3, r3, #2
 80023a4:	6023      	str	r3, [r4, #0]
	waitTime = commutation_interval / 2;
 80023a6:	2307      	movs	r3, #7
	blanktime = commutation_interval / 4;
 80023a8:	240f      	movs	r4, #15
	waitTime = commutation_interval / 2;
 80023aa:	4013      	ands	r3, r2
	blanktime = commutation_interval / 4;
 80023ac:	4022      	ands	r2, r4
	waitTime = commutation_interval / 2;
 80023ae:	181b      	adds	r3, r3, r0
	blanktime = commutation_interval / 4;
 80023b0:	1812      	adds	r2, r2, r0
 80023b2:	4813      	ldr	r0, [pc, #76]	; (8002400 <zcfoundroutine+0x7c>)
 80023b4:	1112      	asrs	r2, r2, #4
 80023b6:	6002      	str	r2, [r0, #0]
	while (TIM3->CNT - thiszctime < waitTime - advance){
 80023b8:	4a12      	ldr	r2, [pc, #72]	; (8002404 <zcfoundroutine+0x80>)
	waitTime = commutation_interval / 2;
 80023ba:	4d13      	ldr	r5, [pc, #76]	; (8002408 <zcfoundroutine+0x84>)
	while (TIM3->CNT - thiszctime < waitTime - advance){
 80023bc:	6812      	ldr	r2, [r2, #0]
	waitTime = commutation_interval / 2;
 80023be:	10db      	asrs	r3, r3, #3
 80023c0:	602b      	str	r3, [r5, #0]
	while (TIM3->CNT - thiszctime < waitTime - advance){
 80023c2:	1a9b      	subs	r3, r3, r2
 80023c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c6:	1a52      	subs	r2, r2, r1
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d3fb      	bcc.n	80023c4 <zcfoundroutine+0x40>

	}
	commutate();
 80023cc:	f7ff ff86 	bl	80022dc <commutate>
	while (TIM3->CNT - thiszctime < waitTime + blanktime){
 80023d0:	4a0b      	ldr	r2, [pc, #44]	; (8002400 <zcfoundroutine+0x7c>)
 80023d2:	682b      	ldr	r3, [r5, #0]
 80023d4:	6812      	ldr	r2, [r2, #0]
 80023d6:	6831      	ldr	r1, [r6, #0]
 80023d8:	189b      	adds	r3, r3, r2
 80023da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023dc:	1a52      	subs	r2, r2, r1
 80023de:	429a      	cmp	r2, r3
 80023e0:	d3fb      	bcc.n	80023da <zcfoundroutine+0x56>

	}
    bemfcounter = 0;
 80023e2:	2200      	movs	r2, #0
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <zcfoundroutine+0x88>)
 80023e6:	601a      	str	r2, [r3, #0]


zcs++;
 80023e8:	4a09      	ldr	r2, [pc, #36]	; (8002410 <zcfoundroutine+0x8c>)
 80023ea:	6813      	ldr	r3, [r2, #0]
 80023ec:	3301      	adds	r3, #1
 80023ee:	6013      	str	r3, [r2, #0]


}
 80023f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023f2:	46c0      	nop			; (mov r8, r8)
 80023f4:	40000400 	.word	0x40000400
 80023f8:	20000004 	.word	0x20000004
 80023fc:	200002f4 	.word	0x200002f4
 8002400:	2000026c 	.word	0x2000026c
 8002404:	20000058 	.word	0x20000058
 8002408:	200000e0 	.word	0x200000e0
 800240c:	20000164 	.word	0x20000164
 8002410:	200000e8 	.word	0x200000e8

08002414 <SystemClock_Config>:
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002414:	230a      	movs	r3, #10
{
 8002416:	b530      	push	{r4, r5, lr}
 8002418:	b091      	sub	sp, #68	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800241a:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800241c:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800241e:	3306      	adds	r3, #6
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002420:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8002422:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002424:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002426:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002428:	0392      	lsls	r2, r2, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800242a:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800242c:	9407      	str	r4, [sp, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800242e:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002430:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002432:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002434:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8002436:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002438:	f7fe fa30 	bl	800089c <HAL_RCC_OscConfig>
 800243c:	2800      	cmp	r0, #0
 800243e:	d000      	beq.n	8002442 <SystemClock_Config+0x2e>
 8002440:	e7fe      	b.n	8002440 <SystemClock_Config+0x2c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002442:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002444:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002446:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002448:	0021      	movs	r1, r4
 800244a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800244c:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800244e:	9501      	str	r5, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002450:	f7fe fc38 	bl	8000cc4 <HAL_RCC_ClockConfig>
 8002454:	1e04      	subs	r4, r0, #0
 8002456:	d000      	beq.n	800245a <SystemClock_Config+0x46>
 8002458:	e7fe      	b.n	8002458 <SystemClock_Config+0x44>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800245a:	f7fe fcc9 	bl	8000df0 <HAL_RCC_GetHCLKFreq>
 800245e:	21fa      	movs	r1, #250	; 0xfa
 8002460:	0089      	lsls	r1, r1, #2
 8002462:	f7fd fe5b 	bl	800011c <__udivsi3>
 8002466:	f7fe f849 	bl	80004fc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800246a:	2004      	movs	r0, #4
 800246c:	f7fe f860 	bl	8000530 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002470:	2001      	movs	r0, #1
 8002472:	0022      	movs	r2, r4
 8002474:	0021      	movs	r1, r4
 8002476:	4240      	negs	r0, r0
 8002478:	f7fe f806 	bl	8000488 <HAL_NVIC_SetPriority>
}
 800247c:	b011      	add	sp, #68	; 0x44
 800247e:	bd30      	pop	{r4, r5, pc}

08002480 <main>:
{
 8002480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002482:	b09b      	sub	sp, #108	; 0x6c
  HAL_Init();
 8002484:	f7fd ffd2 	bl	800042c <HAL_Init>
  SystemClock_Config();
 8002488:	f7ff ffc4 	bl	8002414 <SystemClock_Config>
{

  LL_GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 800248c:	2080      	movs	r0, #128	; 0x80
 800248e:	03c0      	lsls	r0, r0, #15
 8002490:	f7ff fac4 	bl	8001a1c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8002494:	2080      	movs	r0, #128	; 0x80
 8002496:	0280      	lsls	r0, r0, #10
 8002498:	f7ff fac0 	bl	8001a1c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800249c:	2080      	movs	r0, #128	; 0x80
 800249e:	02c0      	lsls	r0, r0, #11
 80024a0:	f7ff fabc 	bl	8001a1c <LL_AHB1_GRP1_EnableClock>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80024a4:	2501      	movs	r5, #1
 80024a6:	2340      	movs	r3, #64	; 0x40
  LL_GPIO_ResetOutputPin(GPIOF, LL_GPIO_PIN_7);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80024a8:	2400      	movs	r4, #0
 80024aa:	4ed0      	ldr	r6, [pc, #832]	; (80027ec <main+0x36c>)
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024ac:	a913      	add	r1, sp, #76	; 0x4c
 80024ae:	62b5      	str	r5, [r6, #40]	; 0x28
 80024b0:	62b3      	str	r3, [r6, #40]	; 0x28
 80024b2:	18db      	adds	r3, r3, r3
 80024b4:	62b3      	str	r3, [r6, #40]	; 0x28
 80024b6:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80024b8:	9513      	str	r5, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80024ba:	9514      	str	r5, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80024bc:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80024be:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80024c0:	9417      	str	r4, [sp, #92]	; 0x5c
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024c2:	f7ff fa4f 	bl	8001964 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c6:	2090      	movs	r0, #144	; 0x90
 80024c8:	a913      	add	r1, sp, #76	; 0x4c
 80024ca:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 80024cc:	9513      	str	r5, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80024ce:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80024d0:	9417      	str	r4, [sp, #92]	; 0x5c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d2:	f7ff fa47 	bl	8001964 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d6:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80024d8:	2302      	movs	r3, #2
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024da:	a913      	add	r1, sp, #76	; 0x4c
 80024dc:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80024de:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80024e0:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80024e2:	9417      	str	r4, [sp, #92]	; 0x5c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e4:	f7ff fa3e 	bl	8001964 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024e8:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80024ea:	2704      	movs	r7, #4
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ec:	a913      	add	r1, sp, #76	; 0x4c
 80024ee:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 80024f0:	9713      	str	r7, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 80024f2:	9414      	str	r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80024f4:	9417      	str	r4, [sp, #92]	; 0x5c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f6:	f7ff fa35 	bl	8001964 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80024fa:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80024fc:	a913      	add	r1, sp, #76	; 0x4c
 80024fe:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8002500:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002502:	9514      	str	r5, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002504:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002506:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002508:	9417      	str	r4, [sp, #92]	; 0x5c
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800250a:	f7ff fa2b 	bl	8001964 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 800250e:	2380      	movs	r3, #128	; 0x80
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002510:	a913      	add	r1, sp, #76	; 0x4c
 8002512:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 8002514:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002516:	9514      	str	r5, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002518:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800251a:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800251c:	9417      	str	r4, [sp, #92]	; 0x5c
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800251e:	f7ff fa21 	bl	8001964 <LL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002522:	4bb3      	ldr	r3, [pc, #716]	; (80027f0 <main+0x370>)
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8002524:	0021      	movs	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002526:	695a      	ldr	r2, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8002528:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800252a:	432a      	orrs	r2, r5
 800252c:	615a      	str	r2, [r3, #20]
 800252e:	695b      	ldr	r3, [r3, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8002530:	0022      	movs	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002532:	401d      	ands	r5, r3
 8002534:	9505      	str	r5, [sp, #20]
 8002536:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 8002538:	f7fd ffa6 	bl	8000488 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 800253c:	200b      	movs	r0, #11
 800253e:	f7fd ffd3 	bl	80004e8 <HAL_NVIC_EnableIRQ>
  htim1.Instance = TIM1;
 8002542:	4dac      	ldr	r5, [pc, #688]	; (80027f4 <main+0x374>)
 8002544:	4bac      	ldr	r3, [pc, #688]	; (80027f8 <main+0x378>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002546:	0028      	movs	r0, r5
  htim1.Instance = TIM1;
 8002548:	602b      	str	r3, [r5, #0]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800254a:	2320      	movs	r3, #32
 800254c:	60ab      	str	r3, [r5, #8]
  htim1.Init.Period = 999;
 800254e:	4bab      	ldr	r3, [pc, #684]	; (80027fc <main+0x37c>)
  htim1.Init.Prescaler = 0;
 8002550:	606c      	str	r4, [r5, #4]
  htim1.Init.Period = 999;
 8002552:	60eb      	str	r3, [r5, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002554:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8002556:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002558:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800255a:	f7fe fe31 	bl	80011c0 <HAL_TIM_Base_Init>
 800255e:	4ba6      	ldr	r3, [pc, #664]	; (80027f8 <main+0x378>)
 8002560:	9600      	str	r6, [sp, #0]
 8002562:	9301      	str	r3, [sp, #4]
 8002564:	42a0      	cmp	r0, r4
 8002566:	d000      	beq.n	800256a <main+0xea>
 8002568:	e7fe      	b.n	8002568 <main+0xe8>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800256a:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800256c:	a908      	add	r1, sp, #32
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800256e:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002570:	0028      	movs	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002572:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002574:	f7fe ffee 	bl	8001554 <HAL_TIM_ConfigClockSource>
 8002578:	2800      	cmp	r0, #0
 800257a:	d000      	beq.n	800257e <main+0xfe>
 800257c:	e7fe      	b.n	800257c <main+0xfc>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800257e:	0028      	movs	r0, r5
 8002580:	f7fe fe39 	bl	80011f6 <HAL_TIM_PWM_Init>
 8002584:	2800      	cmp	r0, #0
 8002586:	d000      	beq.n	800258a <main+0x10a>
 8002588:	e7fe      	b.n	8002588 <main+0x108>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800258a:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800258c:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800258e:	a906      	add	r1, sp, #24
 8002590:	0028      	movs	r0, r5
 8002592:	f7ff f988 	bl	80018a6 <HAL_TIMEx_MasterConfigSynchronization>
 8002596:	1e02      	subs	r2, r0, #0
 8002598:	d000      	beq.n	800259c <main+0x11c>
 800259a:	e7fe      	b.n	800259a <main+0x11a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800259c:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 800259e:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025a0:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80025a2:	900f      	str	r0, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025a4:	9010      	str	r0, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80025a6:	9011      	str	r0, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80025a8:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025aa:	a90c      	add	r1, sp, #48	; 0x30
 80025ac:	0028      	movs	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025ae:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025b0:	f7fe fe94 	bl	80012dc <HAL_TIM_PWM_ConfigChannel>
 80025b4:	2800      	cmp	r0, #0
 80025b6:	d000      	beq.n	80025ba <main+0x13a>
 80025b8:	e7fe      	b.n	80025b8 <main+0x138>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025ba:	003a      	movs	r2, r7
 80025bc:	a90c      	add	r1, sp, #48	; 0x30
 80025be:	0028      	movs	r0, r5
 80025c0:	f7fe fe8c 	bl	80012dc <HAL_TIM_PWM_ConfigChannel>
 80025c4:	2800      	cmp	r0, #0
 80025c6:	d000      	beq.n	80025ca <main+0x14a>
 80025c8:	e7fe      	b.n	80025c8 <main+0x148>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025ca:	2208      	movs	r2, #8
 80025cc:	a90c      	add	r1, sp, #48	; 0x30
 80025ce:	0028      	movs	r0, r5
 80025d0:	f7fe fe84 	bl	80012dc <HAL_TIM_PWM_ConfigChannel>
 80025d4:	2800      	cmp	r0, #0
 80025d6:	d000      	beq.n	80025da <main+0x15a>
 80025d8:	e7fe      	b.n	80025d8 <main+0x158>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80025da:	220c      	movs	r2, #12
 80025dc:	a90c      	add	r1, sp, #48	; 0x30
 80025de:	0028      	movs	r0, r5
 80025e0:	f7fe fe7c 	bl	80012dc <HAL_TIM_PWM_ConfigChannel>
 80025e4:	2800      	cmp	r0, #0
 80025e6:	d000      	beq.n	80025ea <main+0x16a>
 80025e8:	e7fe      	b.n	80025e8 <main+0x168>
  sBreakDeadTimeConfig.DeadTime = 80;
 80025ea:	2350      	movs	r3, #80	; 0x50
 80025ec:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025ee:	2380      	movs	r3, #128	; 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80025f0:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025f2:	9014      	str	r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025f4:	9015      	str	r0, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025f6:	9017      	str	r0, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025f8:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025fa:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80025fc:	a913      	add	r1, sp, #76	; 0x4c
 80025fe:	0028      	movs	r0, r5
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002600:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002602:	f7ff f971 	bl	80018e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8002606:	1e07      	subs	r7, r0, #0
 8002608:	d000      	beq.n	800260c <main+0x18c>
 800260a:	e7fe      	b.n	800260a <main+0x18a>
  HAL_TIM_MspPostInit(&htim1);
 800260c:	0028      	movs	r0, r5
 800260e:	f000 fb05 	bl	8002c1c <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8002612:	2380      	movs	r3, #128	; 0x80
 8002614:	4c7a      	ldr	r4, [pc, #488]	; (8002800 <main+0x380>)
  htim2.Init.Period = 65535;
 8002616:	4e7b      	ldr	r6, [pc, #492]	; (8002804 <main+0x384>)
  htim2.Instance = TIM2;
 8002618:	05db      	lsls	r3, r3, #23
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800261a:	0020      	movs	r0, r4
  htim2.Instance = TIM2;
 800261c:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 0;
 800261e:	6067      	str	r7, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002620:	60a7      	str	r7, [r4, #8]
  htim2.Init.Period = 65535;
 8002622:	60e6      	str	r6, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002624:	6127      	str	r7, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002626:	61a7      	str	r7, [r4, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002628:	f7fe fdca 	bl	80011c0 <HAL_TIM_Base_Init>
 800262c:	9601      	str	r6, [sp, #4]
 800262e:	2800      	cmp	r0, #0
 8002630:	d000      	beq.n	8002634 <main+0x1b4>
 8002632:	e7fe      	b.n	8002632 <main+0x1b2>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002634:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002636:	a90c      	add	r1, sp, #48	; 0x30
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002638:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800263a:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800263c:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800263e:	f7fe ff89 	bl	8001554 <HAL_TIM_ConfigClockSource>
 8002642:	2800      	cmp	r0, #0
 8002644:	d000      	beq.n	8002648 <main+0x1c8>
 8002646:	e7fe      	b.n	8002646 <main+0x1c6>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8002648:	0020      	movs	r0, r4
 800264a:	f7fe fdef 	bl	800122c <HAL_TIM_IC_Init>
 800264e:	2800      	cmp	r0, #0
 8002650:	d000      	beq.n	8002654 <main+0x1d4>
 8002652:	e7fe      	b.n	8002652 <main+0x1d2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002654:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002656:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002658:	a908      	add	r1, sp, #32
 800265a:	0020      	movs	r0, r4
 800265c:	f7ff f923 	bl	80018a6 <HAL_TIMEx_MasterConfigSynchronization>
 8002660:	2800      	cmp	r0, #0
 8002662:	d000      	beq.n	8002666 <main+0x1e6>
 8002664:	e7fe      	b.n	8002664 <main+0x1e4>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8002666:	230a      	movs	r3, #10
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8002668:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800266a:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigIC.ICFilter = 0;
 800266c:	9016      	str	r0, [sp, #88]	; 0x58
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800266e:	3b09      	subs	r3, #9
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002670:	220c      	movs	r2, #12
 8002672:	a913      	add	r1, sp, #76	; 0x4c
 8002674:	0020      	movs	r0, r4
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8002676:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8002678:	f7fe fec2 	bl	8001400 <HAL_TIM_IC_ConfigChannel>
 800267c:	2800      	cmp	r0, #0
 800267e:	d000      	beq.n	8002682 <main+0x202>
 8002680:	e7fe      	b.n	8002680 <main+0x200>
  htim3.Init.Prescaler = 10;
 8002682:	230a      	movs	r3, #10
  htim3.Instance = TIM3;
 8002684:	4f60      	ldr	r7, [pc, #384]	; (8002808 <main+0x388>)
 8002686:	4e61      	ldr	r6, [pc, #388]	; (800280c <main+0x38c>)
  htim3.Init.Prescaler = 10;
 8002688:	607b      	str	r3, [r7, #4]
  htim3.Init.Period = 65535;
 800268a:	9b01      	ldr	r3, [sp, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800268c:	60b8      	str	r0, [r7, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800268e:	6138      	str	r0, [r7, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002690:	61b8      	str	r0, [r7, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002692:	0038      	movs	r0, r7
  htim3.Instance = TIM3;
 8002694:	603e      	str	r6, [r7, #0]
  htim3.Init.Period = 65535;
 8002696:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002698:	f7fe fd92 	bl	80011c0 <HAL_TIM_Base_Init>
 800269c:	9603      	str	r6, [sp, #12]
 800269e:	2800      	cmp	r0, #0
 80026a0:	d000      	beq.n	80026a4 <main+0x224>
 80026a2:	e7fe      	b.n	80026a2 <main+0x222>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026a4:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026a6:	a913      	add	r1, sp, #76	; 0x4c
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026a8:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026aa:	0038      	movs	r0, r7
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ac:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80026ae:	f7fe ff51 	bl	8001554 <HAL_TIM_ConfigClockSource>
 80026b2:	2800      	cmp	r0, #0
 80026b4:	d000      	beq.n	80026b8 <main+0x238>
 80026b6:	e7fe      	b.n	80026b6 <main+0x236>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026b8:	900c      	str	r0, [sp, #48]	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ba:	900d      	str	r0, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80026bc:	a90c      	add	r1, sp, #48	; 0x30
 80026be:	0038      	movs	r0, r7
 80026c0:	f7ff f8f1 	bl	80018a6 <HAL_TIMEx_MasterConfigSynchronization>
 80026c4:	2800      	cmp	r0, #0
 80026c6:	d000      	beq.n	80026ca <main+0x24a>
 80026c8:	e7fe      	b.n	80026c8 <main+0x248>
	hiwdg.Instance = IWDG;
 80026ca:	4a51      	ldr	r2, [pc, #324]	; (8002810 <main+0x390>)
 80026cc:	4b51      	ldr	r3, [pc, #324]	; (8002814 <main+0x394>)
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80026ce:	0010      	movs	r0, r2
	hiwdg.Instance = IWDG;
 80026d0:	6013      	str	r3, [r2, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 80026d2:	2302      	movs	r3, #2
 80026d4:	6053      	str	r3, [r2, #4]
	hiwdg.Init.Window = IWDG_WINDOW_DISABLE;
 80026d6:	4b50      	ldr	r3, [pc, #320]	; (8002818 <main+0x398>)
 80026d8:	60d3      	str	r3, [r2, #12]
	hiwdg.Init.Reload = 2000;
 80026da:	23fa      	movs	r3, #250	; 0xfa
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	6093      	str	r3, [r2, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80026e0:	f7fe f8a8 	bl	8000834 <HAL_IWDG_Init>
 80026e4:	2800      	cmp	r0, #0
 80026e6:	d000      	beq.n	80026ea <main+0x26a>
 80026e8:	e7fe      	b.n	80026e8 <main+0x268>
  htim14.Instance = TIM14;
 80026ea:	4e4c      	ldr	r6, [pc, #304]	; (800281c <main+0x39c>)
 80026ec:	4b4c      	ldr	r3, [pc, #304]	; (8002820 <main+0x3a0>)
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026ee:	60b0      	str	r0, [r6, #8]
  htim14.Instance = TIM14;
 80026f0:	6033      	str	r3, [r6, #0]
  htim14.Init.Prescaler = 14;
 80026f2:	230e      	movs	r3, #14
 80026f4:	6073      	str	r3, [r6, #4]
  htim14.Init.Period = 50000;
 80026f6:	4b4b      	ldr	r3, [pc, #300]	; (8002824 <main+0x3a4>)
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026f8:	6130      	str	r0, [r6, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026fa:	61b0      	str	r0, [r6, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80026fc:	0030      	movs	r0, r6
  htim14.Init.Period = 50000;
 80026fe:	60f3      	str	r3, [r6, #12]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002700:	f7fe fd5e 	bl	80011c0 <HAL_TIM_Base_Init>
 8002704:	4b46      	ldr	r3, [pc, #280]	; (8002820 <main+0x3a0>)
 8002706:	9001      	str	r0, [sp, #4]
 8002708:	9302      	str	r3, [sp, #8]
 800270a:	2800      	cmp	r0, #0
 800270c:	d000      	beq.n	8002710 <main+0x290>
 800270e:	e7fe      	b.n	800270e <main+0x28e>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002710:	9901      	ldr	r1, [sp, #4]
 8002712:	0028      	movs	r0, r5
 8002714:	f7fe ffde 	bl	80016d4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);             // uncomment for comp_pwm
 8002718:	9901      	ldr	r1, [sp, #4]
 800271a:	0028      	movs	r0, r5
 800271c:	f7ff f8b1 	bl	8001882 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002720:	2104      	movs	r1, #4
 8002722:	0028      	movs	r0, r5
 8002724:	f7fe ffd6 	bl	80016d4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8002728:	2104      	movs	r1, #4
 800272a:	0028      	movs	r0, r5
 800272c:	f7ff f8a9 	bl	8001882 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002730:	2108      	movs	r1, #8
 8002732:	0028      	movs	r0, r5
 8002734:	f7fe ffce 	bl	80016d4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8002738:	2108      	movs	r1, #8
 800273a:	0028      	movs	r0, r5
 800273c:	f7ff f8a1 	bl	8001882 <HAL_TIMEx_PWMN_Start>
  HAL_Delay(10);
 8002740:	200a      	movs	r0, #10
 8002742:	f7fd fe91 	bl	8000468 <HAL_Delay>
  if (HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8002746:	210c      	movs	r1, #12
 8002748:	0028      	movs	r0, r5
 800274a:	f7ff f823 	bl	8001794 <HAL_TIM_OC_Start_IT>
 800274e:	2800      	cmp	r0, #0
 8002750:	d000      	beq.n	8002754 <main+0x2d4>
 8002752:	e7fe      	b.n	8002752 <main+0x2d2>
  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_4, dma_buffer , 64);
 8002754:	210c      	movs	r1, #12
 8002756:	2340      	movs	r3, #64	; 0x40
 8002758:	4a33      	ldr	r2, [pc, #204]	; (8002828 <main+0x3a8>)
 800275a:	0020      	movs	r0, r4
 800275c:	f7ff f81e 	bl	800179c <HAL_TIM_IC_Start_DMA>
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8002760:	2203      	movs	r2, #3
 8002762:	2501      	movs	r5, #1
 8002764:	9b00      	ldr	r3, [sp, #0]
  HAL_TIM_Base_Start_IT(&htim2);
 8002766:	0020      	movs	r0, r4
 8002768:	681b      	ldr	r3, [r3, #0]
  phase_A_position = 0;
 800276a:	2400      	movs	r4, #0
 800276c:	4393      	bics	r3, r2
 800276e:	9a00      	ldr	r2, [sp, #0]
 8002770:	432b      	orrs	r3, r5
 8002772:	6013      	str	r3, [r2, #0]
  TIM1->CCR4 = 350;                // adc read timer.
 8002774:	23af      	movs	r3, #175	; 0xaf
 8002776:	4a20      	ldr	r2, [pc, #128]	; (80027f8 <main+0x378>)
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	6413      	str	r3, [r2, #64]	; 0x40
  HAL_TIM_Base_Start_IT(&htim2);
 800277c:	f7fe fbfa 	bl	8000f74 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim3);
 8002780:	0038      	movs	r0, r7
 8002782:	f7fe fbeb 	bl	8000f5c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim14);
 8002786:	0030      	movs	r0, r6
 8002788:	f7fe fbf4 	bl	8000f74 <HAL_TIM_Base_Start_IT>
  GPIOF->BSRR = GPIO_PIN_6;            // uncomment to take bridge out of standby mode
 800278c:	2340      	movs	r3, #64	; 0x40
 800278e:	9a00      	ldr	r2, [sp, #0]
 8002790:	6193      	str	r3, [r2, #24]
  GPIOF->BSRR = GPIO_PIN_7;				// out of standby mode
 8002792:	9a00      	ldr	r2, [sp, #0]
 8002794:	18db      	adds	r3, r3, r3
 8002796:	6193      	str	r3, [r2, #24]
  phase_B_position = 119;
 8002798:	2277      	movs	r2, #119	; 0x77
  phase_A_position = 0;
 800279a:	4b24      	ldr	r3, [pc, #144]	; (800282c <main+0x3ac>)
 800279c:	601c      	str	r4, [r3, #0]
  phase_B_position = 119;
 800279e:	4b24      	ldr	r3, [pc, #144]	; (8002830 <main+0x3b0>)
 80027a0:	601a      	str	r2, [r3, #0]
  phase_C_position = 239;
 80027a2:	4b24      	ldr	r3, [pc, #144]	; (8002834 <main+0x3b4>)
 80027a4:	3278      	adds	r2, #120	; 0x78
 80027a6:	601a      	str	r2, [r3, #0]
  playStartupTune();
 80027a8:	f7ff fd20 	bl	80021ec <playStartupTune>
  running = 0;
 80027ac:	4e22      	ldr	r6, [pc, #136]	; (8002838 <main+0x3b8>)
	if(HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80027ae:	4818      	ldr	r0, [pc, #96]	; (8002810 <main+0x390>)
  running = 0;
 80027b0:	6034      	str	r4, [r6, #0]
  duty_cycle = 1;
 80027b2:	4c22      	ldr	r4, [pc, #136]	; (800283c <main+0x3bc>)
 80027b4:	6025      	str	r5, [r4, #0]
	if(HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80027b6:	f7fe f83d 	bl	8000834 <HAL_IWDG_Init>
 80027ba:	2800      	cmp	r0, #0
 80027bc:	d000      	beq.n	80027c0 <main+0x340>
 80027be:	e7fe      	b.n	80027be <main+0x33e>
	allpwm();
 80027c0:	f7ff fa84 	bl	8001ccc <allpwm>
			  armed = 1;
 80027c4:	002f      	movs	r7, r5
	  looptime = TIM14->CNT;
 80027c6:	9b02      	ldr	r3, [sp, #8]
	  count++;
 80027c8:	4d1d      	ldr	r5, [pc, #116]	; (8002840 <main+0x3c0>)
	  looptime = TIM14->CNT;
 80027ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027cc:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <main+0x3c4>)
 80027ce:	601a      	str	r2, [r3, #0]
	  TIM14->CNT = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	9a02      	ldr	r2, [sp, #8]
 80027d4:	6253      	str	r3, [r2, #36]	; 0x24
	  count++;
 80027d6:	682b      	ldr	r3, [r5, #0]
 80027d8:	3301      	adds	r3, #1
 80027da:	602b      	str	r3, [r5, #0]
	  if (count  > 200){
 80027dc:	2bc8      	cmp	r3, #200	; 0xc8
 80027de:	dd34      	ble.n	800284a <main+0x3ca>
	 	  if(HAL_IWDG_Refresh(&hiwdg) != HAL_OK)                   // watchdog refresh
 80027e0:	480b      	ldr	r0, [pc, #44]	; (8002810 <main+0x390>)
 80027e2:	f7fe f853 	bl	800088c <HAL_IWDG_Refresh>
 80027e6:	2800      	cmp	r0, #0
 80027e8:	d02e      	beq.n	8002848 <main+0x3c8>
 80027ea:	e7fe      	b.n	80027ea <main+0x36a>
 80027ec:	48001400 	.word	0x48001400
 80027f0:	40021000 	.word	0x40021000
 80027f4:	20000270 	.word	0x20000270
 80027f8:	40012c00 	.word	0x40012c00
 80027fc:	000003e7 	.word	0x000003e7
 8002800:	200002f8 	.word	0x200002f8
 8002804:	0000ffff 	.word	0x0000ffff
 8002808:	20000118 	.word	0x20000118
 800280c:	40000400 	.word	0x40000400
 8002810:	200000fc 	.word	0x200000fc
 8002814:	40003000 	.word	0x40003000
 8002818:	00000fff 	.word	0x00000fff
 800281c:	20000338 	.word	0x20000338
 8002820:	40002000 	.word	0x40002000
 8002824:	0000c350 	.word	0x0000c350
 8002828:	20000168 	.word	0x20000168
 800282c:	20000110 	.word	0x20000110
 8002830:	20000380 	.word	0x20000380
 8002834:	20000378 	.word	0x20000378
 8002838:	200000d0 	.word	0x200000d0
 800283c:	20000008 	.word	0x20000008
 8002840:	20000060 	.word	0x20000060
 8002844:	20000158 	.word	0x20000158
	 	  count = 0;
 8002848:	6028      	str	r0, [r5, #0]
	  if (inputSet == 0){
 800284a:	4b83      	ldr	r3, [pc, #524]	; (8002a58 <main+0x5d8>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <main+0x3d6>
	 	 detectInput();
 8002852:	f7ff fa49 	bl	8001ce8 <detectInput>
		  if (zero_input_count > 1000 && !armed){
 8002856:	22fa      	movs	r2, #250	; 0xfa
 8002858:	4b80      	ldr	r3, [pc, #512]	; (8002a5c <main+0x5dc>)
 800285a:	0092      	lsls	r2, r2, #2
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4293      	cmp	r3, r2
 8002860:	dd06      	ble.n	8002870 <main+0x3f0>
 8002862:	4b7f      	ldr	r3, [pc, #508]	; (8002a60 <main+0x5e0>)
 8002864:	781a      	ldrb	r2, [r3, #0]
 8002866:	2a00      	cmp	r2, #0
 8002868:	d102      	bne.n	8002870 <main+0x3f0>
			  armed = 1;
 800286a:	701f      	strb	r7, [r3, #0]
			  playInputTune();
 800286c:	f7ff fcde 	bl	800222c <playInputTune>
		  if (bi_direction == 1 && proshot == 0){
 8002870:	4b7c      	ldr	r3, [pc, #496]	; (8002a64 <main+0x5e4>)
 8002872:	487d      	ldr	r0, [pc, #500]	; (8002a68 <main+0x5e8>)
 8002874:	7819      	ldrb	r1, [r3, #0]
 8002876:	4a7d      	ldr	r2, [pc, #500]	; (8002a6c <main+0x5ec>)
 8002878:	4b7d      	ldr	r3, [pc, #500]	; (8002a70 <main+0x5f0>)
 800287a:	2901      	cmp	r1, #1
 800287c:	d13a      	bne.n	80028f4 <main+0x474>
 800287e:	7805      	ldrb	r5, [r0, #0]
 8002880:	9500      	str	r5, [sp, #0]
 8002882:	2d00      	cmp	r5, #0
 8002884:	d136      	bne.n	80028f4 <main+0x474>
			if ( newinput > 1100 ){
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	487a      	ldr	r0, [pc, #488]	; (8002a74 <main+0x5f4>)
 800288a:	4282      	cmp	r2, r0
 800288c:	dd1d      	ble.n	80028ca <main+0x44a>
				if(reversed_direction){
 800288e:	487a      	ldr	r0, [pc, #488]	; (8002a78 <main+0x5f8>)
 8002890:	7800      	ldrb	r0, [r0, #0]
 8002892:	4684      	mov	ip, r0
 8002894:	4665      	mov	r5, ip
 8002896:	4879      	ldr	r0, [pc, #484]	; (8002a7c <main+0x5fc>)
 8002898:	2d00      	cmp	r5, #0
 800289a:	d005      	beq.n	80028a8 <main+0x428>
				if (forward == 1){
 800289c:	6801      	ldr	r1, [r0, #0]
 800289e:	2901      	cmp	r1, #1
 80028a0:	d105      	bne.n	80028ae <main+0x42e>
					forward = 0 ;
 80028a2:	9900      	ldr	r1, [sp, #0]
					forward = 1 ;
 80028a4:	6001      	str	r1, [r0, #0]
 80028a6:	e002      	b.n	80028ae <main+0x42e>
				if (forward == 0){
 80028a8:	6805      	ldr	r5, [r0, #0]
 80028aa:	2d00      	cmp	r5, #0
 80028ac:	d0fa      	beq.n	80028a4 <main+0x424>
					input = (newinput - 1050)*3;
 80028ae:	4974      	ldr	r1, [pc, #464]	; (8002a80 <main+0x600>)
 80028b0:	1850      	adds	r0, r2, r1
					input = (800 - newinput) * 3;
 80028b2:	2103      	movs	r1, #3
 80028b4:	4341      	muls	r1, r0
 80028b6:	6019      	str	r1, [r3, #0]
			if (newinput > 800 && newinput < 1100){
 80028b8:	4972      	ldr	r1, [pc, #456]	; (8002a84 <main+0x604>)
 80028ba:	1852      	adds	r2, r2, r1
 80028bc:	2195      	movs	r1, #149	; 0x95
 80028be:	0049      	lsls	r1, r1, #1
 80028c0:	428a      	cmp	r2, r1
 80028c2:	d835      	bhi.n	8002930 <main+0x4b0>
				input = 0;
 80028c4:	2200      	movs	r2, #0
		 input = newinput;
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	e032      	b.n	8002930 <main+0x4b0>
			if (newinput < 800) {
 80028ca:	486f      	ldr	r0, [pc, #444]	; (8002a88 <main+0x608>)
 80028cc:	4282      	cmp	r2, r0
 80028ce:	dcf3      	bgt.n	80028b8 <main+0x438>
				if(reversed_direction){
 80028d0:	4869      	ldr	r0, [pc, #420]	; (8002a78 <main+0x5f8>)
 80028d2:	7805      	ldrb	r5, [r0, #0]
 80028d4:	4869      	ldr	r0, [pc, #420]	; (8002a7c <main+0x5fc>)
 80028d6:	2d00      	cmp	r5, #0
 80028d8:	d007      	beq.n	80028ea <main+0x46a>
					if (forward == 0){
 80028da:	6805      	ldr	r5, [r0, #0]
 80028dc:	2d00      	cmp	r5, #0
 80028de:	d100      	bne.n	80028e2 <main+0x462>
					forward = 1;
 80028e0:	6001      	str	r1, [r0, #0]
					input = (800 - newinput) * 3;
 80028e2:	20c8      	movs	r0, #200	; 0xc8
 80028e4:	0080      	lsls	r0, r0, #2
 80028e6:	1a80      	subs	r0, r0, r2
 80028e8:	e7e3      	b.n	80028b2 <main+0x432>
				if (forward == 1){
 80028ea:	6801      	ldr	r1, [r0, #0]
 80028ec:	2901      	cmp	r1, #1
 80028ee:	d1f8      	bne.n	80028e2 <main+0x462>
					forward = 0;
 80028f0:	6005      	str	r5, [r0, #0]
 80028f2:	e7f6      	b.n	80028e2 <main+0x462>
		}else if((proshot || dshot)&& bi_direction){
 80028f4:	7800      	ldrb	r0, [r0, #0]
 80028f6:	2800      	cmp	r0, #0
 80028f8:	d104      	bne.n	8002904 <main+0x484>
 80028fa:	4864      	ldr	r0, [pc, #400]	; (8002a8c <main+0x60c>)
 80028fc:	7800      	ldrb	r0, [r0, #0]
 80028fe:	2800      	cmp	r0, #0
 8002900:	d100      	bne.n	8002904 <main+0x484>
 8002902:	e08e      	b.n	8002a22 <main+0x5a2>
 8002904:	2900      	cmp	r1, #0
 8002906:	d100      	bne.n	800290a <main+0x48a>
 8002908:	e08b      	b.n	8002a22 <main+0x5a2>
	  					if ( newinput > 1100 ){
 800290a:	6812      	ldr	r2, [r2, #0]
 800290c:	4959      	ldr	r1, [pc, #356]	; (8002a74 <main+0x5f4>)
 800290e:	428a      	cmp	r2, r1
 8002910:	dd7b      	ble.n	8002a0a <main+0x58a>
	  					  if (!forward){
 8002912:	495a      	ldr	r1, [pc, #360]	; (8002a7c <main+0x5fc>)
 8002914:	6808      	ldr	r0, [r1, #0]
 8002916:	2800      	cmp	r0, #0
 8002918:	d100      	bne.n	800291c <main+0x49c>
	  						forward = 1 ;
 800291a:	600f      	str	r7, [r1, #0]
	  						input = (newinput - 1100) * 2 ;
 800291c:	495c      	ldr	r1, [pc, #368]	; (8002a90 <main+0x610>)
 800291e:	1851      	adds	r1, r2, r1
	  						input = (newinput - 90) * 2 ;
 8002920:	0049      	lsls	r1, r1, #1
 8002922:	6019      	str	r1, [r3, #0]
	  					if ((newinput > 1047 && newinput < 1100) || newinput < 100){
 8002924:	495b      	ldr	r1, [pc, #364]	; (8002a94 <main+0x614>)
 8002926:	1851      	adds	r1, r2, r1
 8002928:	2933      	cmp	r1, #51	; 0x33
 800292a:	d9cb      	bls.n	80028c4 <main+0x444>
 800292c:	2a63      	cmp	r2, #99	; 0x63
 800292e:	ddc9      	ble.n	80028c4 <main+0x444>
	  if (input >= 130 && armed){
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	2a81      	cmp	r2, #129	; 0x81
 8002934:	dc00      	bgt.n	8002938 <main+0x4b8>
 8002936:	e080      	b.n	8002a3a <main+0x5ba>
 8002938:	4b49      	ldr	r3, [pc, #292]	; (8002a60 <main+0x5e0>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d006      	beq.n	800294e <main+0x4ce>
		  coasting = 0;
 8002940:	2100      	movs	r1, #0
 8002942:	4b55      	ldr	r3, [pc, #340]	; (8002a98 <main+0x618>)
	 	 running = 1;
 8002944:	6037      	str	r7, [r6, #0]
		  coasting = 0;
 8002946:	7019      	strb	r1, [r3, #0]
	 	 duty_cycle = input / 2 - 20 ;
 8002948:	1053      	asrs	r3, r2, #1
 800294a:	3b14      	subs	r3, #20
 800294c:	6023      	str	r3, [r4, #0]
   if (zcs < 20 && running){
 800294e:	4b53      	ldr	r3, [pc, #332]	; (8002a9c <main+0x61c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2b13      	cmp	r3, #19
 8002954:	dc0e      	bgt.n	8002974 <main+0x4f4>
 8002956:	6833      	ldr	r3, [r6, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d00b      	beq.n	8002974 <main+0x4f4>
	   if (duty_cycle < min_startup_duty){
 800295c:	4b50      	ldr	r3, [pc, #320]	; (8002aa0 <main+0x620>)
 800295e:	6821      	ldr	r1, [r4, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4299      	cmp	r1, r3
 8002964:	da00      	bge.n	8002968 <main+0x4e8>
	   duty_cycle = min_startup_duty;
 8002966:	6023      	str	r3, [r4, #0]
	   if (duty_cycle > 350){
 8002968:	23af      	movs	r3, #175	; 0xaf
 800296a:	6821      	ldr	r1, [r4, #0]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	4299      	cmp	r1, r3
 8002970:	dd00      	ble.n	8002974 <main+0x4f4>
		   duty_cycle = 350;
 8002972:	6023      	str	r3, [r4, #0]
   if(commutation_interval > 20000 && running){
 8002974:	4b4b      	ldr	r3, [pc, #300]	; (8002aa4 <main+0x624>)
 8002976:	6819      	ldr	r1, [r3, #0]
 8002978:	4b4b      	ldr	r3, [pc, #300]	; (8002aa8 <main+0x628>)
 800297a:	4299      	cmp	r1, r3
 800297c:	dd0c      	ble.n	8002998 <main+0x518>
 800297e:	6833      	ldr	r3, [r6, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d009      	beq.n	8002998 <main+0x518>
	   duty_cycle = input / 2 - 10 ;
 8002984:	0fd3      	lsrs	r3, r2, #31
 8002986:	189b      	adds	r3, r3, r2
 8002988:	105b      	asrs	r3, r3, #1
 800298a:	001a      	movs	r2, r3
 800298c:	3a0a      	subs	r2, #10
 800298e:	6022      	str	r2, [r4, #0]
	   if(commutation_interval > 30000){
 8002990:	4a46      	ldr	r2, [pc, #280]	; (8002aac <main+0x62c>)
 8002992:	4291      	cmp	r1, r2
 8002994:	dd00      	ble.n	8002998 <main+0x518>
	  	   duty_cycle = input / 2;
 8002996:	6023      	str	r3, [r4, #0]
   if (duty_cycle < 48 && running){
 8002998:	6823      	ldr	r3, [r4, #0]
 800299a:	2b2f      	cmp	r3, #47	; 0x2f
 800299c:	dc04      	bgt.n	80029a8 <main+0x528>
 800299e:	6833      	ldr	r3, [r6, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <main+0x528>
	   duty_cycle = 48;
 80029a4:	2330      	movs	r3, #48	; 0x30
 80029a6:	6023      	str	r3, [r4, #0]
	 if (duty_cycle > 998){
 80029a8:	4b41      	ldr	r3, [pc, #260]	; (8002ab0 <main+0x630>)
 80029aa:	6822      	ldr	r2, [r4, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	dd00      	ble.n	80029b2 <main+0x532>
		 duty_cycle = 998;
 80029b0:	6023      	str	r3, [r4, #0]
	if (armed){
 80029b2:	4b2b      	ldr	r3, [pc, #172]	; (8002a60 <main+0x5e0>)
 80029b4:	781a      	ldrb	r2, [r3, #0]
 80029b6:	4b3f      	ldr	r3, [pc, #252]	; (8002ab4 <main+0x634>)
 80029b8:	2a00      	cmp	r2, #0
 80029ba:	d000      	beq.n	80029be <main+0x53e>
	 	 TIM1->CCR1 = duty_cycle;												// set duty cycle to 50 out of 768 to start.
 80029bc:	6822      	ldr	r2, [r4, #0]
		  TIM1->CCR1 = 0;												// set duty cycle to 50 out of 768 to start.
 80029be:	635a      	str	r2, [r3, #52]	; 0x34
		  TIM1->CCR2 = 0;
 80029c0:	639a      	str	r2, [r3, #56]	; 0x38
		  TIM1->CCR3 = 0;
 80029c2:	63da      	str	r2, [r3, #60]	; 0x3c
	 		 getBemfState();                                      // uncomment to make run !!!!!!!!!!!!!!!
 80029c4:	f7ff fc4c 	bl	8002260 <getBemfState>
	 	  if (!zcfound){
 80029c8:	4a3b      	ldr	r2, [pc, #236]	; (8002ab8 <main+0x638>)
 80029ca:	6810      	ldr	r0, [r2, #0]
 80029cc:	2800      	cmp	r0, #0
 80029ce:	d10f      	bne.n	80029f0 <main+0x570>
	 		  if (rising){
 80029d0:	4b3a      	ldr	r3, [pc, #232]	; (8002abc <main+0x63c>)
 80029d2:	6819      	ldr	r1, [r3, #0]
 80029d4:	4b3a      	ldr	r3, [pc, #232]	; (8002ac0 <main+0x640>)
 80029d6:	2900      	cmp	r1, #0
 80029d8:	d025      	beq.n	8002a26 <main+0x5a6>
	 		 if (bemfcounter > min_bemf_counts_up){
 80029da:	493a      	ldr	r1, [pc, #232]	; (8002ac4 <main+0x644>)
 80029dc:	681d      	ldr	r5, [r3, #0]
 80029de:	6809      	ldr	r1, [r1, #0]
 80029e0:	428d      	cmp	r5, r1
 80029e2:	dd05      	ble.n	80029f0 <main+0x570>
	 			 GPIOF->BSRR = GPIO_PIN_0;
 80029e4:	4938      	ldr	r1, [pc, #224]	; (8002ac8 <main+0x648>)
 80029e6:	618f      	str	r7, [r1, #24]
	 			 zcfound = 1;
 80029e8:	6017      	str	r7, [r2, #0]
	 			 bemfcounter = 0;
 80029ea:	6018      	str	r0, [r3, #0]
	 			  			 zcfoundroutine();
 80029ec:	f7ff fcca 	bl	8002384 <zcfoundroutine>
	 	  if (TIM3->CNT > 60000 && running == 1){
 80029f0:	9b03      	ldr	r3, [sp, #12]
 80029f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029f4:	4b35      	ldr	r3, [pc, #212]	; (8002acc <main+0x64c>)
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d800      	bhi.n	80029fc <main+0x57c>
 80029fa:	e6e4      	b.n	80027c6 <main+0x346>
 80029fc:	6833      	ldr	r3, [r6, #0]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d000      	beq.n	8002a04 <main+0x584>
 8002a02:	e6e0      	b.n	80027c6 <main+0x346>
	 		  zcfoundroutine();
 8002a04:	f7ff fcbe 	bl	8002384 <zcfoundroutine>
 8002a08:	e6dd      	b.n	80027c6 <main+0x346>
	  					}if ( newinput <= 1047 ){
 8002a0a:	4931      	ldr	r1, [pc, #196]	; (8002ad0 <main+0x650>)
 8002a0c:	428a      	cmp	r2, r1
 8002a0e:	dc89      	bgt.n	8002924 <main+0x4a4>
	  						if(forward){
 8002a10:	491a      	ldr	r1, [pc, #104]	; (8002a7c <main+0x5fc>)
 8002a12:	6808      	ldr	r0, [r1, #0]
 8002a14:	2800      	cmp	r0, #0
 8002a16:	d001      	beq.n	8002a1c <main+0x59c>
	  					forward = 0;
 8002a18:	2000      	movs	r0, #0
 8002a1a:	6008      	str	r0, [r1, #0]
	  						input = (newinput - 90) * 2 ;
 8002a1c:	0011      	movs	r1, r2
 8002a1e:	395a      	subs	r1, #90	; 0x5a
 8002a20:	e77e      	b.n	8002920 <main+0x4a0>
		 input = newinput;
 8002a22:	6812      	ldr	r2, [r2, #0]
 8002a24:	e74f      	b.n	80028c6 <main+0x446>
	 			  if (bemfcounter > min_bemf_counts_down){
 8002a26:	482b      	ldr	r0, [pc, #172]	; (8002ad4 <main+0x654>)
 8002a28:	681d      	ldr	r5, [r3, #0]
 8002a2a:	6800      	ldr	r0, [r0, #0]
 8002a2c:	4285      	cmp	r5, r0
 8002a2e:	dddf      	ble.n	80029f0 <main+0x570>
	 			  			 GPIOF->BSRR = GPIO_PIN_0;
 8002a30:	4825      	ldr	r0, [pc, #148]	; (8002ac8 <main+0x648>)
 8002a32:	6187      	str	r7, [r0, #24]
	 			  			 zcfound = 1;
 8002a34:	6017      	str	r7, [r2, #0]
	 			  			 bemfcounter = 0;
 8002a36:	6019      	str	r1, [r3, #0]
 8002a38:	e7d8      	b.n	80029ec <main+0x56c>
		  if (running == 1){
 8002a3a:	6833      	ldr	r3, [r6, #0]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d102      	bne.n	8002a46 <main+0x5c6>
		  coasting = 0;
 8002a40:	2100      	movs	r1, #0
 8002a42:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <main+0x618>)
 8002a44:	7019      	strb	r1, [r3, #0]
	 	 running = 0;
 8002a46:	2300      	movs	r3, #0
	 	 stepper_sine = 0;
 8002a48:	4923      	ldr	r1, [pc, #140]	; (8002ad8 <main+0x658>)
	 	 running = 0;
 8002a4a:	6033      	str	r3, [r6, #0]
	 	 stepper_sine = 0;
 8002a4c:	700b      	strb	r3, [r1, #0]
	 	 zcs = 0;
 8002a4e:	4913      	ldr	r1, [pc, #76]	; (8002a9c <main+0x61c>)
	 	 duty_cycle = 0;
 8002a50:	6023      	str	r3, [r4, #0]
	 	 zcs = 0;
 8002a52:	600b      	str	r3, [r1, #0]
 8002a54:	e77b      	b.n	800294e <main+0x4ce>
 8002a56:	46c0      	nop			; (mov r8, r8)
 8002a58:	200000b0 	.word	0x200000b0
 8002a5c:	200000ec 	.word	0x200000ec
 8002a60:	2000005c 	.word	0x2000005c
 8002a64:	20000000 	.word	0x20000000
 8002a68:	200000cc 	.word	0x200000cc
 8002a6c:	200000b4 	.word	0x200000b4
 8002a70:	200000ac 	.word	0x200000ac
 8002a74:	0000044c 	.word	0x0000044c
 8002a78:	200000cd 	.word	0x200000cd
 8002a7c:	20000010 	.word	0x20000010
 8002a80:	fffffbe6 	.word	0xfffffbe6
 8002a84:	fffffcdf 	.word	0xfffffcdf
 8002a88:	0000031f 	.word	0x0000031f
 8002a8c:	200000a8 	.word	0x200000a8
 8002a90:	fffffbb4 	.word	0xfffffbb4
 8002a94:	fffffbe8 	.word	0xfffffbe8
 8002a98:	2000005d 	.word	0x2000005d
 8002a9c:	200000e8 	.word	0x200000e8
 8002aa0:	20000024 	.word	0x20000024
 8002aa4:	20000004 	.word	0x20000004
 8002aa8:	00004e20 	.word	0x00004e20
 8002aac:	00007530 	.word	0x00007530
 8002ab0:	000003e6 	.word	0x000003e6
 8002ab4:	40012c00 	.word	0x40012c00
 8002ab8:	200000e4 	.word	0x200000e4
 8002abc:	2000002c 	.word	0x2000002c
 8002ac0:	20000164 	.word	0x20000164
 8002ac4:	20000020 	.word	0x20000020
 8002ac8:	48001400 	.word	0x48001400
 8002acc:	0000ea60 	.word	0x0000ea60
 8002ad0:	00000417 	.word	0x00000417
 8002ad4:	2000001c 	.word	0x2000001c
 8002ad8:	200000dc 	.word	0x200000dc

08002adc <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8002adc:	e7fe      	b.n	8002adc <_Error_Handler>
	...

08002ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ae0:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae2:	2001      	movs	r0, #1
 8002ae4:	4a0c      	ldr	r2, [pc, #48]	; (8002b18 <HAL_MspInit+0x38>)
 8002ae6:	6991      	ldr	r1, [r2, #24]
 8002ae8:	4301      	orrs	r1, r0
 8002aea:	6191      	str	r1, [r2, #24]
 8002aec:	6993      	ldr	r3, [r2, #24]

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002aee:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002af0:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002af2:	0011      	movs	r1, r2
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002af4:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002af6:	3806      	subs	r0, #6
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002af8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 8002afa:	f7fd fcc5 	bl	8000488 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8002afe:	2200      	movs	r2, #0
 8002b00:	2002      	movs	r0, #2
 8002b02:	0011      	movs	r1, r2
 8002b04:	4240      	negs	r0, r0
 8002b06:	f7fd fcbf 	bl	8000488 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	0011      	movs	r1, r2
 8002b10:	4240      	negs	r0, r0
 8002b12:	f7fd fcb9 	bl	8000488 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b16:	bd07      	pop	{r0, r1, r2, pc}
 8002b18:	40021000 	.word	0x40021000

08002b1c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b1c:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM1)
 8002b1e:	6803      	ldr	r3, [r0, #0]
 8002b20:	4a37      	ldr	r2, [pc, #220]	; (8002c00 <HAL_TIM_Base_MspInit+0xe4>)
{
 8002b22:	b088      	sub	sp, #32
 8002b24:	0006      	movs	r6, r0
  if(htim_base->Instance==TIM1)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d10b      	bne.n	8002b42 <HAL_TIM_Base_MspInit+0x26>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b2a:	2080      	movs	r0, #128	; 0x80
 8002b2c:	4a35      	ldr	r2, [pc, #212]	; (8002c04 <HAL_TIM_Base_MspInit+0xe8>)
 8002b2e:	0100      	lsls	r0, r0, #4
 8002b30:	6991      	ldr	r1, [r2, #24]
 8002b32:	4301      	orrs	r1, r0
 8002b34:	6191      	str	r1, [r2, #24]
 8002b36:	6993      	ldr	r3, [r2, #24]
 8002b38:	4003      	ands	r3, r0
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002b3e:	b008      	add	sp, #32
 8002b40:	bd70      	pop	{r4, r5, r6, pc}
  else if(htim_base->Instance==TIM2)
 8002b42:	2280      	movs	r2, #128	; 0x80
 8002b44:	05d2      	lsls	r2, r2, #23
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d139      	bne.n	8002bbe <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b4a:	2001      	movs	r0, #1
 8002b4c:	4a2d      	ldr	r2, [pc, #180]	; (8002c04 <HAL_TIM_Base_MspInit+0xe8>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4e:	2500      	movs	r5, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b50:	69d1      	ldr	r1, [r2, #28]
 8002b52:	4301      	orrs	r1, r0
 8002b54:	61d1      	str	r1, [r2, #28]
 8002b56:	69d3      	ldr	r3, [r2, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b58:	a903      	add	r1, sp, #12
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b5a:	4003      	ands	r3, r0
 8002b5c:	9301      	str	r3, [sp, #4]
 8002b5e:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b60:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b62:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b64:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b66:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b68:	3b06      	subs	r3, #6
 8002b6a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8002b6c:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6e:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b70:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b72:	f7fd fdab 	bl	80006cc <HAL_GPIO_Init>
    hdma_tim2_ch4.Instance = DMA1_Channel4;
 8002b76:	4c24      	ldr	r4, [pc, #144]	; (8002c08 <HAL_TIM_Base_MspInit+0xec>)
 8002b78:	4b24      	ldr	r3, [pc, #144]	; (8002c0c <HAL_TIM_Base_MspInit+0xf0>)
    if (HAL_DMA_Init(&hdma_tim2_ch4) != HAL_OK)
 8002b7a:	0020      	movs	r0, r4
    hdma_tim2_ch4.Instance = DMA1_Channel4;
 8002b7c:	6023      	str	r3, [r4, #0]
    hdma_tim2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002b7e:	2380      	movs	r3, #128	; 0x80
 8002b80:	60e3      	str	r3, [r4, #12]
    hdma_tim2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b82:	18db      	adds	r3, r3, r3
 8002b84:	6123      	str	r3, [r4, #16]
    hdma_tim2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002b86:	2380      	movs	r3, #128	; 0x80
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	6163      	str	r3, [r4, #20]
    hdma_tim2_ch4.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002b8c:	2380      	movs	r3, #128	; 0x80
 8002b8e:	015b      	lsls	r3, r3, #5
    hdma_tim2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b90:	6065      	str	r5, [r4, #4]
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b92:	60a5      	str	r5, [r4, #8]
    hdma_tim2_ch4.Init.Mode = DMA_NORMAL;
 8002b94:	61a5      	str	r5, [r4, #24]
    hdma_tim2_ch4.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002b96:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch4) != HAL_OK)
 8002b98:	f7fd fcde 	bl	8000558 <HAL_DMA_Init>
 8002b9c:	42a8      	cmp	r0, r5
 8002b9e:	d003      	beq.n	8002ba8 <HAL_TIM_Base_MspInit+0x8c>
      _Error_Handler(__FILE__, __LINE__);
 8002ba0:	2175      	movs	r1, #117	; 0x75
 8002ba2:	481b      	ldr	r0, [pc, #108]	; (8002c10 <HAL_TIM_Base_MspInit+0xf4>)
 8002ba4:	f7ff ff9a 	bl	8002adc <_Error_Handler>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002ba8:	2200      	movs	r2, #0
 8002baa:	200f      	movs	r0, #15
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch4);
 8002bac:	6334      	str	r4, [r6, #48]	; 0x30
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002bae:	0011      	movs	r1, r2
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch4);
 8002bb0:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002bb2:	f7fd fc69 	bl	8000488 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002bb6:	200f      	movs	r0, #15
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002bb8:	f7fd fc96 	bl	80004e8 <HAL_NVIC_EnableIRQ>
}
 8002bbc:	e7bf      	b.n	8002b3e <HAL_TIM_Base_MspInit+0x22>
  else if(htim_base->Instance==TIM3)
 8002bbe:	4a15      	ldr	r2, [pc, #84]	; (8002c14 <HAL_TIM_Base_MspInit+0xf8>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d109      	bne.n	8002bd8 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bc4:	2002      	movs	r0, #2
 8002bc6:	4a0f      	ldr	r2, [pc, #60]	; (8002c04 <HAL_TIM_Base_MspInit+0xe8>)
 8002bc8:	69d1      	ldr	r1, [r2, #28]
 8002bca:	4301      	orrs	r1, r0
 8002bcc:	61d1      	str	r1, [r2, #28]
 8002bce:	69d3      	ldr	r3, [r2, #28]
 8002bd0:	4003      	ands	r3, r0
 8002bd2:	9302      	str	r3, [sp, #8]
 8002bd4:	9b02      	ldr	r3, [sp, #8]
 8002bd6:	e7b2      	b.n	8002b3e <HAL_TIM_Base_MspInit+0x22>
  else if(htim_base->Instance==TIM14)
 8002bd8:	4a0f      	ldr	r2, [pc, #60]	; (8002c18 <HAL_TIM_Base_MspInit+0xfc>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d1af      	bne.n	8002b3e <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002bde:	2080      	movs	r0, #128	; 0x80
 8002be0:	4a08      	ldr	r2, [pc, #32]	; (8002c04 <HAL_TIM_Base_MspInit+0xe8>)
 8002be2:	0040      	lsls	r0, r0, #1
 8002be4:	69d1      	ldr	r1, [r2, #28]
 8002be6:	4301      	orrs	r1, r0
 8002be8:	61d1      	str	r1, [r2, #28]
 8002bea:	69d3      	ldr	r3, [r2, #28]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8002bec:	2200      	movs	r2, #0
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002bee:	4003      	ands	r3, r0
 8002bf0:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8002bf2:	38ed      	subs	r0, #237	; 0xed
 8002bf4:	0011      	movs	r1, r2
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002bf6:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8002bf8:	f7fd fc46 	bl	8000488 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8002bfc:	2013      	movs	r0, #19
 8002bfe:	e7db      	b.n	8002bb8 <HAL_TIM_Base_MspInit+0x9c>
 8002c00:	40012c00 	.word	0x40012c00
 8002c04:	40021000 	.word	0x40021000
 8002c08:	200002b0 	.word	0x200002b0
 8002c0c:	40020044 	.word	0x40020044
 8002c10:	08002df8 	.word	0x08002df8
 8002c14:	40000400 	.word	0x40000400
 8002c18:	40002000 	.word	0x40002000

08002c1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c1c:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8002c1e:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <HAL_TIM_MspPostInit+0x44>)
 8002c20:	6802      	ldr	r2, [r0, #0]
{
 8002c22:	b087      	sub	sp, #28
  if(htim->Instance==TIM1)
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d118      	bne.n	8002c5a <HAL_TIM_MspPostInit+0x3e>
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002c28:	23e0      	movs	r3, #224	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2a:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2c:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002c2e:	021b      	lsls	r3, r3, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c30:	a901      	add	r1, sp, #4
 8002c32:	480c      	ldr	r0, [pc, #48]	; (8002c64 <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002c34:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c36:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c38:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3a:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002c3c:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c3e:	f7fd fd45 	bl	80006cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002c42:	23e0      	movs	r3, #224	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c44:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002c46:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c48:	a901      	add	r1, sp, #4
 8002c4a:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002c4c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4e:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c52:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002c54:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c56:	f7fd fd39 	bl	80006cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002c5a:	b007      	add	sp, #28
 8002c5c:	bd30      	pop	{r4, r5, pc}
 8002c5e:	46c0      	nop			; (mov r8, r8)
 8002c60:	40012c00 	.word	0x40012c00
 8002c64:	48000400 	.word	0x48000400

08002c68 <NMI_Handler>:
 8002c68:	4770      	bx	lr

08002c6a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002c6a:	e7fe      	b.n	8002c6a <HardFault_Handler>

08002c6c <SVC_Handler>:
 8002c6c:	4770      	bx	lr

08002c6e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c6e:	4770      	bx	lr

08002c70 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002c70:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c72:	f7fd fbeb 	bl	800044c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8002c76:	f7fd fc6a 	bl	800054e <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  transferComplete();
 8002c7a:	f7ff fa33 	bl	80020e4 <transferComplete>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002c7e:	bd10      	pop	{r4, pc}

08002c80 <DMA1_Channel4_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 and 5 interrupts.
*/
void DMA1_Channel4_5_IRQHandler(void)
{
 8002c80:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch4);
 8002c82:	4802      	ldr	r0, [pc, #8]	; (8002c8c <DMA1_Channel4_5_IRQHandler+0xc>)
 8002c84:	f7fd fcd9 	bl	800063a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8002c88:	bd10      	pop	{r4, pc}
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	200002b0 	.word	0x200002b0

08002c90 <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 8002c90:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c92:	4802      	ldr	r0, [pc, #8]	; (8002c9c <TIM2_IRQHandler+0xc>)
 8002c94:	f7fe f99d 	bl	8000fd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c98:	bd10      	pop	{r4, pc}
 8002c9a:	46c0      	nop			; (mov r8, r8)
 8002c9c:	200002f8 	.word	0x200002f8

08002ca0 <TIM14_IRQHandler>:

/**
* @brief This function handles TIM14 global interrupt.
*/
void TIM14_IRQHandler(void)
{
 8002ca0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002ca2:	4802      	ldr	r0, [pc, #8]	; (8002cac <TIM14_IRQHandler+0xc>)
 8002ca4:	f7fe f995 	bl	8000fd2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8002ca8:	bd10      	pop	{r4, pc}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	20000338 	.word	0x20000338

08002cb0 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	4b11      	ldr	r3, [pc, #68]	; (8002cf8 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002cb4:	4811      	ldr	r0, [pc, #68]	; (8002cfc <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	4002      	ands	r2, r0
 8002cc0:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	480e      	ldr	r0, [pc, #56]	; (8002d00 <SystemInit+0x50>)
 8002cc6:	4002      	ands	r2, r0
 8002cc8:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	480d      	ldr	r0, [pc, #52]	; (8002d04 <SystemInit+0x54>)
 8002cce:	4002      	ands	r2, r0
 8002cd0:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	480c      	ldr	r0, [pc, #48]	; (8002d08 <SystemInit+0x58>)
 8002cd6:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002cd8:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002cda:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cde:	4382      	bics	r2, r0
 8002ce0:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 8002ce2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ce4:	4809      	ldr	r0, [pc, #36]	; (8002d0c <SystemInit+0x5c>)
 8002ce6:	4002      	ands	r2, r0
 8002ce8:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002cea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cec:	438a      	bics	r2, r1
 8002cee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	609a      	str	r2, [r3, #8]

}
 8002cf4:	4770      	bx	lr
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	08ffb80c 	.word	0x08ffb80c
 8002d00:	fef6ffff 	.word	0xfef6ffff
 8002d04:	fffbffff 	.word	0xfffbffff
 8002d08:	ffc0ffff 	.word	0xffc0ffff
 8002d0c:	fffffeec 	.word	0xfffffeec

08002d10 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d10:	480d      	ldr	r0, [pc, #52]	; (8002d48 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d12:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d14:	480d      	ldr	r0, [pc, #52]	; (8002d4c <LoopForever+0x6>)
  ldr r1, =_edata
 8002d16:	490e      	ldr	r1, [pc, #56]	; (8002d50 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d18:	4a0e      	ldr	r2, [pc, #56]	; (8002d54 <LoopForever+0xe>)
  movs r3, #0
 8002d1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d1c:	e002      	b.n	8002d24 <LoopCopyDataInit>

08002d1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d22:	3304      	adds	r3, #4

08002d24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d28:	d3f9      	bcc.n	8002d1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d2a:	4a0b      	ldr	r2, [pc, #44]	; (8002d58 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d2c:	4c0b      	ldr	r4, [pc, #44]	; (8002d5c <LoopForever+0x16>)
  movs r3, #0
 8002d2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d30:	e001      	b.n	8002d36 <LoopFillZerobss>

08002d32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d34:	3204      	adds	r2, #4

08002d36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d38:	d3fb      	bcc.n	8002d32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002d3a:	f7ff ffb9 	bl	8002cb0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002d3e:	f000 f811 	bl	8002d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d42:	f7ff fb9d 	bl	8002480 <main>

08002d46 <LoopForever>:

LoopForever:
    b LoopForever
 8002d46:	e7fe      	b.n	8002d46 <LoopForever>
  ldr   r0, =_estack
 8002d48:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d50:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8002d54:	08002e2c 	.word	0x08002e2c
  ldr r2, =_sbss
 8002d58:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8002d5c:	20000388 	.word	0x20000388

08002d60 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d60:	e7fe      	b.n	8002d60 <ADC1_IRQHandler>
	...

08002d64 <__libc_init_array>:
 8002d64:	b570      	push	{r4, r5, r6, lr}
 8002d66:	2600      	movs	r6, #0
 8002d68:	4d0c      	ldr	r5, [pc, #48]	; (8002d9c <__libc_init_array+0x38>)
 8002d6a:	4c0d      	ldr	r4, [pc, #52]	; (8002da0 <__libc_init_array+0x3c>)
 8002d6c:	1b64      	subs	r4, r4, r5
 8002d6e:	10a4      	asrs	r4, r4, #2
 8002d70:	42a6      	cmp	r6, r4
 8002d72:	d109      	bne.n	8002d88 <__libc_init_array+0x24>
 8002d74:	2600      	movs	r6, #0
 8002d76:	f000 f823 	bl	8002dc0 <_init>
 8002d7a:	4d0a      	ldr	r5, [pc, #40]	; (8002da4 <__libc_init_array+0x40>)
 8002d7c:	4c0a      	ldr	r4, [pc, #40]	; (8002da8 <__libc_init_array+0x44>)
 8002d7e:	1b64      	subs	r4, r4, r5
 8002d80:	10a4      	asrs	r4, r4, #2
 8002d82:	42a6      	cmp	r6, r4
 8002d84:	d105      	bne.n	8002d92 <__libc_init_array+0x2e>
 8002d86:	bd70      	pop	{r4, r5, r6, pc}
 8002d88:	00b3      	lsls	r3, r6, #2
 8002d8a:	58eb      	ldr	r3, [r5, r3]
 8002d8c:	4798      	blx	r3
 8002d8e:	3601      	adds	r6, #1
 8002d90:	e7ee      	b.n	8002d70 <__libc_init_array+0xc>
 8002d92:	00b3      	lsls	r3, r6, #2
 8002d94:	58eb      	ldr	r3, [r5, r3]
 8002d96:	4798      	blx	r3
 8002d98:	3601      	adds	r6, #1
 8002d9a:	e7f2      	b.n	8002d82 <__libc_init_array+0x1e>
 8002d9c:	08002e24 	.word	0x08002e24
 8002da0:	08002e24 	.word	0x08002e24
 8002da4:	08002e24 	.word	0x08002e24
 8002da8:	08002e28 	.word	0x08002e28

08002dac <memcpy>:
 8002dac:	2300      	movs	r3, #0
 8002dae:	b510      	push	{r4, lr}
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d100      	bne.n	8002db6 <memcpy+0xa>
 8002db4:	bd10      	pop	{r4, pc}
 8002db6:	5ccc      	ldrb	r4, [r1, r3]
 8002db8:	54c4      	strb	r4, [r0, r3]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	e7f8      	b.n	8002db0 <memcpy+0x4>
	...

08002dc0 <_init>:
 8002dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dc6:	bc08      	pop	{r3}
 8002dc8:	469e      	mov	lr, r3
 8002dca:	4770      	bx	lr

08002dcc <_fini>:
 8002dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dce:	46c0      	nop			; (mov r8, r8)
 8002dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dd2:	bc08      	pop	{r3}
 8002dd4:	469e      	mov	lr, r3
 8002dd6:	4770      	bx	lr
