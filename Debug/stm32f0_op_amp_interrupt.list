
stm32f0_op_amp_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044a0  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004560  08004560  00014560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080045c8  080045c8  000145c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080045cc  080045cc  000145cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000040  20000000  080045d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000005ac  20000040  08004610  00020040  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200005ec  08004610  000205ec  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
  9 .debug_info   00018363  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002bec  00000000  00000000  000383cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000db3e  00000000  00000000  0003afb7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000960  00000000  00000000  00048af8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00002988  00000000  00000000  00049458  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00006c84  00000000  00000000  0004bde0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003a15  00000000  00000000  00052a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00056479  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001b18  00000000  00000000  000564f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000040 	.word	0x20000040
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004548 	.word	0x08004548

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000044 	.word	0x20000044
 8000104:	08004548 	.word	0x08004548

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80003f4:	b510      	push	{r4, lr}
 80003f6:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 80003f8:	f000 ffb2 	bl	8001360 <HAL_RCC_GetHCLKFreq>
 80003fc:	21fa      	movs	r1, #250	; 0xfa
 80003fe:	0089      	lsls	r1, r1, #2
 8000400:	f7ff fe82 	bl	8000108 <__udivsi3>
 8000404:	f000 fa96 	bl	8000934 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000408:	2001      	movs	r0, #1
 800040a:	2200      	movs	r2, #0
 800040c:	0021      	movs	r1, r4
 800040e:	4240      	negs	r0, r0
 8000410:	f000 fa52 	bl	80008b8 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000414:	2000      	movs	r0, #0
 8000416:	bd10      	pop	{r4, pc}

08000418 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000418:	2110      	movs	r1, #16
 800041a:	4a06      	ldr	r2, [pc, #24]	; (8000434 <HAL_Init+0x1c>)
{
 800041c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800041e:	6813      	ldr	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000420:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000422:	430b      	orrs	r3, r1
 8000424:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000426:	f7ff ffe5 	bl	80003f4 <HAL_InitTick>
  HAL_MspInit();
 800042a:	f003 feb7 	bl	800419c <HAL_MspInit>
}
 800042e:	2000      	movs	r0, #0
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)
 8000434:	40022000 	.word	0x40022000

08000438 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000438:	4a02      	ldr	r2, [pc, #8]	; (8000444 <HAL_IncTick+0xc>)
 800043a:	6813      	ldr	r3, [r2, #0]
 800043c:	3301      	adds	r3, #1
 800043e:	6013      	str	r3, [r2, #0]
}
 8000440:	4770      	bx	lr
 8000442:	46c0      	nop			; (mov r8, r8)
 8000444:	20000114 	.word	0x20000114

08000448 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000448:	4b01      	ldr	r3, [pc, #4]	; (8000450 <HAL_GetTick+0x8>)
 800044a:	6818      	ldr	r0, [r3, #0]
}
 800044c:	4770      	bx	lr
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	20000114 	.word	0x20000114

08000454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000454:	b530      	push	{r4, r5, lr}
 8000456:	b083      	sub	sp, #12
 8000458:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800045a:	f7ff fff5 	bl	8000448 <HAL_GetTick>
  uint32_t wait = Delay;
 800045e:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000460:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 8000462:	1c63      	adds	r3, r4, #1
 8000464:	1e5a      	subs	r2, r3, #1
 8000466:	4193      	sbcs	r3, r2
 8000468:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800046a:	f7ff ffed 	bl	8000448 <HAL_GetTick>
 800046e:	1b40      	subs	r0, r0, r5
 8000470:	42a0      	cmp	r0, r4
 8000472:	d3fa      	bcc.n	800046a <HAL_Delay+0x16>
  {
  }
}
 8000474:	b003      	add	sp, #12
 8000476:	bd30      	pop	{r4, r5, pc}

08000478 <ADC_Enable>:
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000478:	2300      	movs	r3, #0
{
 800047a:	b570      	push	{r4, r5, r6, lr}
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800047c:	6802      	ldr	r2, [r0, #0]
{
 800047e:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 8000480:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000482:	6891      	ldr	r1, [r2, #8]
 8000484:	3303      	adds	r3, #3
{
 8000486:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000488:	400b      	ands	r3, r1
 800048a:	2b01      	cmp	r3, #1
 800048c:	d031      	beq.n	80004f2 <ADC_Enable+0x7a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800048e:	6891      	ldr	r1, [r2, #8]
 8000490:	4b20      	ldr	r3, [pc, #128]	; (8000514 <ADC_Enable+0x9c>)
 8000492:	4219      	tst	r1, r3
 8000494:	d122      	bne.n	80004dc <ADC_Enable+0x64>
      
      return HAL_ERROR;
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000496:	2101      	movs	r1, #1
 8000498:	6893      	ldr	r3, [r2, #8]
 800049a:	430b      	orrs	r3, r1
 800049c:	6093      	str	r3, [r2, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800049e:	4b1e      	ldr	r3, [pc, #120]	; (8000518 <ADC_Enable+0xa0>)
 80004a0:	491e      	ldr	r1, [pc, #120]	; (800051c <ADC_Enable+0xa4>)
 80004a2:	6818      	ldr	r0, [r3, #0]
 80004a4:	f7ff fe30 	bl	8000108 <__udivsi3>
 80004a8:	9001      	str	r0, [sp, #4]
    while(wait_loop_index != 0U)
 80004aa:	9b01      	ldr	r3, [sp, #4]
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d005      	beq.n	80004bc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80004b0:	9b01      	ldr	r3, [sp, #4]
 80004b2:	3b01      	subs	r3, #1
 80004b4:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80004b6:	9b01      	ldr	r3, [sp, #4]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d1f9      	bne.n	80004b0 <ADC_Enable+0x38>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 80004bc:	f7ff ffc4 	bl	8000448 <HAL_GetTick>
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80004c0:	2501      	movs	r5, #1
    tickstart = HAL_GetTick();
 80004c2:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80004c4:	e004      	b.n	80004d0 <ADC_Enable+0x58>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80004c6:	f7ff ffbf 	bl	8000448 <HAL_GetTick>
 80004ca:	1b80      	subs	r0, r0, r6
 80004cc:	2802      	cmp	r0, #2
 80004ce:	d818      	bhi.n	8000502 <ADC_Enable+0x8a>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80004d0:	6823      	ldr	r3, [r4, #0]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	421d      	tst	r5, r3
 80004d6:	d0f6      	beq.n	80004c6 <ADC_Enable+0x4e>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80004d8:	2000      	movs	r0, #0
 80004da:	e008      	b.n	80004ee <ADC_Enable+0x76>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004dc:	2210      	movs	r2, #16
      return HAL_ERROR;
 80004de:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004e0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004e2:	4313      	orrs	r3, r2
 80004e4:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004e6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80004e8:	3a0f      	subs	r2, #15
 80004ea:	4313      	orrs	r3, r2
 80004ec:	64a3      	str	r3, [r4, #72]	; 0x48
}
 80004ee:	b002      	add	sp, #8
 80004f0:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 80004f2:	6811      	ldr	r1, [r2, #0]
 80004f4:	420b      	tst	r3, r1
 80004f6:	d1ef      	bne.n	80004d8 <ADC_Enable+0x60>
 80004f8:	68d3      	ldr	r3, [r2, #12]
 80004fa:	041b      	lsls	r3, r3, #16
 80004fc:	d5c7      	bpl.n	800048e <ADC_Enable+0x16>
  return HAL_OK;
 80004fe:	2000      	movs	r0, #0
 8000500:	e7f5      	b.n	80004ee <ADC_Enable+0x76>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000502:	2210      	movs	r2, #16
 8000504:	6c63      	ldr	r3, [r4, #68]	; 0x44
        return HAL_ERROR;
 8000506:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000508:	4313      	orrs	r3, r2
 800050a:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800050c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800050e:	431d      	orrs	r5, r3
 8000510:	64a5      	str	r5, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000512:	e7ec      	b.n	80004ee <ADC_Enable+0x76>
 8000514:	80000017 	.word	0x80000017
 8000518:	2000003c 	.word	0x2000003c
 800051c:	000f4240 	.word	0x000f4240

08000520 <HAL_ADC_Init>:
{
 8000520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000522:	1e04      	subs	r4, r0, #0
  if(hadc == NULL)
 8000524:	d100      	bne.n	8000528 <HAL_ADC_Init+0x8>
 8000526:	e080      	b.n	800062a <HAL_ADC_Init+0x10a>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000528:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800052a:	2b00      	cmp	r3, #0
 800052c:	d067      	beq.n	80005fe <HAL_ADC_Init+0xde>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800052e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000530:	06db      	lsls	r3, r3, #27
 8000532:	d45e      	bmi.n	80005f2 <HAL_ADC_Init+0xd2>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000534:	2004      	movs	r0, #4
 8000536:	6823      	ldr	r3, [r4, #0]
 8000538:	689a      	ldr	r2, [r3, #8]
 800053a:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 800053c:	d159      	bne.n	80005f2 <HAL_ADC_Init+0xd2>
    ADC_STATE_CLR_SET(hadc->State,
 800053e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000540:	4948      	ldr	r1, [pc, #288]	; (8000664 <HAL_ADC_Init+0x144>)
 8000542:	400a      	ands	r2, r1
 8000544:	3106      	adds	r1, #6
 8000546:	31ff      	adds	r1, #255	; 0xff
 8000548:	430a      	orrs	r2, r1
 800054a:	6462      	str	r2, [r4, #68]	; 0x44
    if (ADC_IS_ENABLE(hadc) == RESET)
 800054c:	2203      	movs	r2, #3
 800054e:	6899      	ldr	r1, [r3, #8]
 8000550:	400a      	ands	r2, r1
 8000552:	2a01      	cmp	r2, #1
 8000554:	d059      	beq.n	800060a <HAL_ADC_Init+0xea>
      MODIFY_REG(hadc->Instance->CFGR1,
 8000556:	2118      	movs	r1, #24
 8000558:	68da      	ldr	r2, [r3, #12]
 800055a:	438a      	bics	r2, r1
 800055c:	68a1      	ldr	r1, [r4, #8]
 800055e:	430a      	orrs	r2, r1
 8000560:	60da      	str	r2, [r3, #12]
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000562:	691a      	ldr	r2, [r3, #16]
 8000564:	6861      	ldr	r1, [r4, #4]
 8000566:	0092      	lsls	r2, r2, #2
 8000568:	0892      	lsrs	r2, r2, #2
 800056a:	430a      	orrs	r2, r1
 800056c:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800056e:	68da      	ldr	r2, [r3, #12]
 8000570:	493d      	ldr	r1, [pc, #244]	; (8000668 <HAL_ADC_Init+0x148>)
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000572:	6a26      	ldr	r6, [r4, #32]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000574:	400a      	ands	r2, r1
 8000576:	60da      	str	r2, [r3, #12]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000578:	69a2      	ldr	r2, [r4, #24]
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 800057a:	0377      	lsls	r7, r6, #13
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800057c:	0391      	lsls	r1, r2, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 800057e:	69e2      	ldr	r2, [r4, #28]
 8000580:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000582:	4311      	orrs	r1, r2
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8000584:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000586:	3a01      	subs	r2, #1
 8000588:	1e55      	subs	r5, r2, #1
 800058a:	41aa      	sbcs	r2, r5
 800058c:	0315      	lsls	r5, r2, #12
 800058e:	68e2      	ldr	r2, [r4, #12]
 8000590:	4311      	orrs	r1, r2
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000592:	6922      	ldr	r2, [r4, #16]
 8000594:	4339      	orrs	r1, r7
 8000596:	2a02      	cmp	r2, #2
 8000598:	d059      	beq.n	800064e <HAL_ADC_Init+0x12e>
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 800059a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800059c:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800059e:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80005a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80005a2:	432a      	orrs	r2, r5
 80005a4:	4302      	orrs	r2, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80005a6:	2901      	cmp	r1, #1
 80005a8:	d04b      	beq.n	8000642 <HAL_ADC_Init+0x122>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80005aa:	20c2      	movs	r0, #194	; 0xc2
 80005ac:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80005ae:	30ff      	adds	r0, #255	; 0xff
 80005b0:	4281      	cmp	r1, r0
 80005b2:	d002      	beq.n	80005ba <HAL_ADC_Init+0x9a>
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80005b4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80005b6:	4301      	orrs	r1, r0
 80005b8:	430a      	orrs	r2, r1
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80005ba:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80005bc:	6ba5      	ldr	r5, [r4, #56]	; 0x38
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80005be:	4311      	orrs	r1, r2
 80005c0:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80005c2:	2180      	movs	r1, #128	; 0x80
 80005c4:	0549      	lsls	r1, r1, #21
 80005c6:	428d      	cmp	r5, r1
 80005c8:	d026      	beq.n	8000618 <HAL_ADC_Init+0xf8>
 80005ca:	1e69      	subs	r1, r5, #1
 80005cc:	2906      	cmp	r1, #6
 80005ce:	d923      	bls.n	8000618 <HAL_ADC_Init+0xf8>
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80005d0:	68db      	ldr	r3, [r3, #12]
 80005d2:	4926      	ldr	r1, [pc, #152]	; (800066c <HAL_ADC_Init+0x14c>)
 80005d4:	400b      	ands	r3, r1
 80005d6:	429a      	cmp	r2, r3
 80005d8:	d029      	beq.n	800062e <HAL_ADC_Init+0x10e>
      ADC_STATE_CLR_SET(hadc->State,
 80005da:	2212      	movs	r2, #18
 80005dc:	6c63      	ldr	r3, [r4, #68]	; 0x44
      tmp_hal_status = HAL_ERROR;
 80005de:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 80005e0:	4393      	bics	r3, r2
 80005e2:	3a02      	subs	r2, #2
 80005e4:	4313      	orrs	r3, r2
 80005e6:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80005e8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80005ea:	3a0f      	subs	r2, #15
 80005ec:	4313      	orrs	r3, r2
 80005ee:	64a3      	str	r3, [r4, #72]	; 0x48
 80005f0:	e004      	b.n	80005fc <HAL_ADC_Init+0xdc>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005f2:	2210      	movs	r2, #16
    tmp_hal_status = HAL_ERROR;
 80005f4:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80005f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80005f8:	4313      	orrs	r3, r2
 80005fa:	6463      	str	r3, [r4, #68]	; 0x44
}
 80005fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hadc->Lock = HAL_UNLOCKED;
 80005fe:	2240      	movs	r2, #64	; 0x40
    ADC_CLEAR_ERRORCODE(hadc);
 8000600:	6483      	str	r3, [r0, #72]	; 0x48
    hadc->Lock = HAL_UNLOCKED;
 8000602:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8000604:	f003 fdec 	bl	80041e0 <HAL_ADC_MspInit>
 8000608:	e791      	b.n	800052e <HAL_ADC_Init+0xe>
    if (ADC_IS_ENABLE(hadc) == RESET)
 800060a:	6819      	ldr	r1, [r3, #0]
 800060c:	420a      	tst	r2, r1
 800060e:	d1ae      	bne.n	800056e <HAL_ADC_Init+0x4e>
 8000610:	68da      	ldr	r2, [r3, #12]
 8000612:	0412      	lsls	r2, r2, #16
 8000614:	d59f      	bpl.n	8000556 <HAL_ADC_Init+0x36>
 8000616:	e7aa      	b.n	800056e <HAL_ADC_Init+0x4e>
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000618:	2107      	movs	r1, #7
 800061a:	6958      	ldr	r0, [r3, #20]
 800061c:	4388      	bics	r0, r1
 800061e:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000620:	6958      	ldr	r0, [r3, #20]
 8000622:	4029      	ands	r1, r5
 8000624:	4301      	orrs	r1, r0
 8000626:	6159      	str	r1, [r3, #20]
 8000628:	e7d2      	b.n	80005d0 <HAL_ADC_Init+0xb0>
    return HAL_ERROR;
 800062a:	2001      	movs	r0, #1
 800062c:	e7e6      	b.n	80005fc <HAL_ADC_Init+0xdc>
      ADC_CLEAR_ERRORCODE(hadc);
 800062e:	2300      	movs	r3, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000630:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8000632:	64a3      	str	r3, [r4, #72]	; 0x48
      ADC_STATE_CLR_SET(hadc->State,
 8000634:	6c63      	ldr	r3, [r4, #68]	; 0x44
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000636:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8000638:	4393      	bics	r3, r2
 800063a:	3a02      	subs	r2, #2
 800063c:	4313      	orrs	r3, r2
 800063e:	6463      	str	r3, [r4, #68]	; 0x44
 8000640:	e7dc      	b.n	80005fc <HAL_ADC_Init+0xdc>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000642:	2e00      	cmp	r6, #0
 8000644:	d105      	bne.n	8000652 <HAL_ADC_Init+0x132>
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000646:	2180      	movs	r1, #128	; 0x80
 8000648:	0249      	lsls	r1, r1, #9
 800064a:	430a      	orrs	r2, r1
 800064c:	e7ad      	b.n	80005aa <HAL_ADC_Init+0x8a>
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 800064e:	2004      	movs	r0, #4
 8000650:	e7a3      	b.n	800059a <HAL_ADC_Init+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000652:	2520      	movs	r5, #32
 8000654:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8000656:	4328      	orrs	r0, r5
 8000658:	6460      	str	r0, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800065a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800065c:	4301      	orrs	r1, r0
 800065e:	64a1      	str	r1, [r4, #72]	; 0x48
 8000660:	e7a3      	b.n	80005aa <HAL_ADC_Init+0x8a>
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	fffffefd 	.word	0xfffffefd
 8000668:	fffe0219 	.word	0xfffe0219
 800066c:	833fffe7 	.word	0x833fffe7

08000670 <HAL_ADC_Start_DMA>:
{
 8000670:	b570      	push	{r4, r5, r6, lr}
 8000672:	000d      	movs	r5, r1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000674:	6801      	ldr	r1, [r0, #0]
{
 8000676:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000678:	688b      	ldr	r3, [r1, #8]
{
 800067a:	0016      	movs	r6, r2
    tmp_hal_status = HAL_BUSY;
 800067c:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800067e:	075b      	lsls	r3, r3, #29
 8000680:	d500      	bpl.n	8000684 <HAL_ADC_Start_DMA+0x14>
}
 8000682:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LOCK(hadc);
 8000684:	2340      	movs	r3, #64	; 0x40
 8000686:	5ce2      	ldrb	r2, [r4, r3]
 8000688:	2a01      	cmp	r2, #1
 800068a:	d0fa      	beq.n	8000682 <HAL_ADC_Start_DMA+0x12>
 800068c:	2201      	movs	r2, #1
 800068e:	54e2      	strb	r2, [r4, r3]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000690:	69e3      	ldr	r3, [r4, #28]
 8000692:	2b01      	cmp	r3, #1
 8000694:	d127      	bne.n	80006e6 <HAL_ADC_Start_DMA+0x76>
      ADC_STATE_CLR_SET(hadc->State,
 8000696:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000698:	4a16      	ldr	r2, [pc, #88]	; (80006f4 <HAL_ADC_Start_DMA+0x84>)
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800069a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 800069c:	401a      	ands	r2, r3
 800069e:	2380      	movs	r3, #128	; 0x80
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	4313      	orrs	r3, r2
 80006a4:	6463      	str	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hadc);
 80006a6:	2240      	movs	r2, #64	; 0x40
      ADC_CLEAR_ERRORCODE(hadc);
 80006a8:	2300      	movs	r3, #0
 80006aa:	64a3      	str	r3, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 80006ac:	54a3      	strb	r3, [r4, r2]
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80006ae:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <HAL_ADC_Start_DMA+0x88>)
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80006b0:	3a30      	subs	r2, #48	; 0x30
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80006b2:	6283      	str	r3, [r0, #40]	; 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <HAL_ADC_Start_DMA+0x8c>)
 80006b6:	62c3      	str	r3, [r0, #44]	; 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80006b8:	4b11      	ldr	r3, [pc, #68]	; (8000700 <HAL_ADC_Start_DMA+0x90>)
 80006ba:	6303      	str	r3, [r0, #48]	; 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80006bc:	231c      	movs	r3, #28
 80006be:	600b      	str	r3, [r1, #0]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80006c0:	684b      	ldr	r3, [r1, #4]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	604b      	str	r3, [r1, #4]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 80006c6:	68cb      	ldr	r3, [r1, #12]
 80006c8:	3a0f      	subs	r2, #15
 80006ca:	4313      	orrs	r3, r2
 80006cc:	60cb      	str	r3, [r1, #12]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80006ce:	002a      	movs	r2, r5
 80006d0:	3140      	adds	r1, #64	; 0x40
 80006d2:	0033      	movs	r3, r6
 80006d4:	f000 f996 	bl	8000a04 <HAL_DMA_Start_IT>
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80006d8:	2104      	movs	r1, #4
 80006da:	6822      	ldr	r2, [r4, #0]
 80006dc:	2000      	movs	r0, #0
 80006de:	6893      	ldr	r3, [r2, #8]
 80006e0:	430b      	orrs	r3, r1
 80006e2:	6093      	str	r3, [r2, #8]
 80006e4:	e7cd      	b.n	8000682 <HAL_ADC_Start_DMA+0x12>
      tmp_hal_status = ADC_Enable(hadc);
 80006e6:	0020      	movs	r0, r4
 80006e8:	f7ff fec6 	bl	8000478 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80006ec:	2800      	cmp	r0, #0
 80006ee:	d1c8      	bne.n	8000682 <HAL_ADC_Start_DMA+0x12>
 80006f0:	6821      	ldr	r1, [r4, #0]
 80006f2:	e7d0      	b.n	8000696 <HAL_ADC_Start_DMA+0x26>
 80006f4:	fffff0fe 	.word	0xfffff0fe
 80006f8:	08000705 	.word	0x08000705
 80006fc:	08000779 	.word	0x08000779
 8000700:	08000789 	.word	0x08000789

08000704 <ADC_DMAConvCplt>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000704:	2150      	movs	r1, #80	; 0x50
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000706:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8000708:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800070a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800070c:	4211      	tst	r1, r2
 800070e:	d122      	bne.n	8000756 <ADC_DMAConvCplt+0x52>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000710:	2280      	movs	r2, #128	; 0x80
 8000712:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8000714:	0092      	lsls	r2, r2, #2
 8000716:	430a      	orrs	r2, r1
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000718:	21c0      	movs	r1, #192	; 0xc0
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800071a:	645a      	str	r2, [r3, #68]	; 0x44
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	0109      	lsls	r1, r1, #4
 8000720:	68d0      	ldr	r0, [r2, #12]
 8000722:	4208      	tst	r0, r1
 8000724:	d113      	bne.n	800074e <ADC_DMAConvCplt+0x4a>
 8000726:	6a19      	ldr	r1, [r3, #32]
 8000728:	2900      	cmp	r1, #0
 800072a:	d110      	bne.n	800074e <ADC_DMAConvCplt+0x4a>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800072c:	6811      	ldr	r1, [r2, #0]
 800072e:	0709      	lsls	r1, r1, #28
 8000730:	d50d      	bpl.n	800074e <ADC_DMAConvCplt+0x4a>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000732:	6891      	ldr	r1, [r2, #8]
 8000734:	0749      	lsls	r1, r1, #29
 8000736:	d412      	bmi.n	800075e <ADC_DMAConvCplt+0x5a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000738:	200c      	movs	r0, #12
 800073a:	6851      	ldr	r1, [r2, #4]
 800073c:	4381      	bics	r1, r0
 800073e:	6051      	str	r1, [r2, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000740:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000742:	490b      	ldr	r1, [pc, #44]	; (8000770 <ADC_DMAConvCplt+0x6c>)
 8000744:	400a      	ands	r2, r1
 8000746:	3104      	adds	r1, #4
 8000748:	31ff      	adds	r1, #255	; 0xff
 800074a:	430a      	orrs	r2, r1
 800074c:	645a      	str	r2, [r3, #68]	; 0x44
        }
      }
    }

    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 800074e:	0018      	movs	r0, r3
 8000750:	f001 fd34 	bl	80021bc <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8000754:	bd10      	pop	{r4, pc}
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8000756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4798      	blx	r3
}
 800075c:	e7fa      	b.n	8000754 <ADC_DMAConvCplt+0x50>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800075e:	2120      	movs	r1, #32
 8000760:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000762:	430a      	orrs	r2, r1
 8000764:	645a      	str	r2, [r3, #68]	; 0x44
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000766:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000768:	391f      	subs	r1, #31
 800076a:	430a      	orrs	r2, r1
 800076c:	649a      	str	r2, [r3, #72]	; 0x48
 800076e:	e7ee      	b.n	800074e <ADC_DMAConvCplt+0x4a>
 8000770:	fffffefe 	.word	0xfffffefe

08000774 <HAL_ADC_ConvHalfCpltCallback>:
 8000774:	4770      	bx	lr
 8000776:	46c0      	nop			; (mov r8, r8)

08000778 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000778:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 800077a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 800077c:	f7ff fffa 	bl	8000774 <HAL_ADC_ConvHalfCpltCallback>
}
 8000780:	bd10      	pop	{r4, pc}
 8000782:	46c0      	nop			; (mov r8, r8)

08000784 <HAL_ADC_ErrorCallback>:
}
 8000784:	4770      	bx	lr
 8000786:	46c0      	nop			; (mov r8, r8)

08000788 <ADC_DMAError>:
{
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8000788:	2240      	movs	r2, #64	; 0x40
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800078a:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800078c:	b510      	push	{r4, lr}
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800078e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8000790:	4313      	orrs	r3, r2
 8000792:	6443      	str	r3, [r0, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8000794:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000796:	3a3c      	subs	r2, #60	; 0x3c
 8000798:	4313      	orrs	r3, r2
 800079a:	6483      	str	r3, [r0, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 800079c:	f7ff fff2 	bl	8000784 <HAL_ADC_ErrorCallback>
}
 80007a0:	bd10      	pop	{r4, pc}
 80007a2:	46c0      	nop			; (mov r8, r8)

080007a4 <HAL_ADC_ConfigChannel>:
  __IO uint32_t wait_loop_index = 0U;
 80007a4:	2300      	movs	r3, #0
{
 80007a6:	b570      	push	{r4, r5, r6, lr}
 80007a8:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 80007aa:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hadc);
 80007ac:	3340      	adds	r3, #64	; 0x40
 80007ae:	5cc2      	ldrb	r2, [r0, r3]
{
 80007b0:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 80007b2:	2002      	movs	r0, #2
 80007b4:	2a01      	cmp	r2, #1
 80007b6:	d03c      	beq.n	8000832 <HAL_ADC_ConfigChannel+0x8e>
 80007b8:	2201      	movs	r2, #1
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80007ba:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  __HAL_LOCK(hadc);
 80007bc:	54e2      	strb	r2, [r4, r3]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80007be:	6823      	ldr	r3, [r4, #0]
 80007c0:	689d      	ldr	r5, [r3, #8]
 80007c2:	076d      	lsls	r5, r5, #29
 80007c4:	d42d      	bmi.n	8000822 <HAL_ADC_ConfigChannel+0x7e>
    if (sConfig->Rank != ADC_RANK_NONE)
 80007c6:	4d35      	ldr	r5, [pc, #212]	; (800089c <HAL_ADC_ConfigChannel+0xf8>)
 80007c8:	684e      	ldr	r6, [r1, #4]
 80007ca:	42ae      	cmp	r6, r5
 80007cc:	d033      	beq.n	8000836 <HAL_ADC_ConfigChannel+0x92>
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80007ce:	680d      	ldr	r5, [r1, #0]
 80007d0:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 80007d2:	40aa      	lsls	r2, r5
 80007d4:	4332      	orrs	r2, r6
 80007d6:	629a      	str	r2, [r3, #40]	; 0x28
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80007d8:	2280      	movs	r2, #128	; 0x80
 80007da:	0552      	lsls	r2, r2, #21
 80007dc:	4290      	cmp	r0, r2
 80007de:	d00f      	beq.n	8000800 <HAL_ADC_ConfigChannel+0x5c>
 80007e0:	3801      	subs	r0, #1
 80007e2:	2806      	cmp	r0, #6
 80007e4:	d90c      	bls.n	8000800 <HAL_ADC_ConfigChannel+0x5c>
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80007e6:	2207      	movs	r2, #7
 80007e8:	6888      	ldr	r0, [r1, #8]
 80007ea:	6959      	ldr	r1, [r3, #20]
 80007ec:	4011      	ands	r1, r2
 80007ee:	4288      	cmp	r0, r1
 80007f0:	d006      	beq.n	8000800 <HAL_ADC_ConfigChannel+0x5c>
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80007f2:	6959      	ldr	r1, [r3, #20]
 80007f4:	4391      	bics	r1, r2
 80007f6:	6159      	str	r1, [r3, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80007f8:	6959      	ldr	r1, [r3, #20]
 80007fa:	4002      	ands	r2, r0
 80007fc:	430a      	orrs	r2, r1
 80007fe:	615a      	str	r2, [r3, #20]
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000800:	002b      	movs	r3, r5
 8000802:	3b10      	subs	r3, #16
 8000804:	2b02      	cmp	r3, #2
 8000806:	d829      	bhi.n	800085c <HAL_ADC_ConfigChannel+0xb8>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000808:	4a25      	ldr	r2, [pc, #148]	; (80008a0 <HAL_ADC_ConfigChannel+0xfc>)
 800080a:	6813      	ldr	r3, [r2, #0]
 800080c:	2d10      	cmp	r5, #16
 800080e:	d027      	beq.n	8000860 <HAL_ADC_ConfigChannel+0xbc>
 8000810:	2280      	movs	r2, #128	; 0x80
 8000812:	2d11      	cmp	r5, #17
 8000814:	d03c      	beq.n	8000890 <HAL_ADC_ConfigChannel+0xec>
 8000816:	0452      	lsls	r2, r2, #17
 8000818:	4313      	orrs	r3, r2
 800081a:	4a21      	ldr	r2, [pc, #132]	; (80008a0 <HAL_ADC_ConfigChannel+0xfc>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800081c:	2000      	movs	r0, #0
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800081e:	6013      	str	r3, [r2, #0]
 8000820:	e004      	b.n	800082c <HAL_ADC_ConfigChannel+0x88>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000822:	2220      	movs	r2, #32
    tmp_hal_status = HAL_ERROR;
 8000824:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000826:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000828:	4313      	orrs	r3, r2
 800082a:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 800082c:	2200      	movs	r2, #0
 800082e:	2340      	movs	r3, #64	; 0x40
 8000830:	54e2      	strb	r2, [r4, r3]
}
 8000832:	b002      	add	sp, #8
 8000834:	bd70      	pop	{r4, r5, r6, pc}
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8000836:	6809      	ldr	r1, [r1, #0]
 8000838:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800083a:	408a      	lsls	r2, r1
 800083c:	4390      	bics	r0, r2
 800083e:	6298      	str	r0, [r3, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8000840:	000b      	movs	r3, r1
 8000842:	3b10      	subs	r3, #16
 8000844:	2b02      	cmp	r3, #2
 8000846:	d809      	bhi.n	800085c <HAL_ADC_ConfigChannel+0xb8>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000848:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <HAL_ADC_ConfigChannel+0xfc>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	2910      	cmp	r1, #16
 800084e:	d021      	beq.n	8000894 <HAL_ADC_ConfigChannel+0xf0>
 8000850:	2911      	cmp	r1, #17
 8000852:	d021      	beq.n	8000898 <HAL_ADC_ConfigChannel+0xf4>
 8000854:	4a13      	ldr	r2, [pc, #76]	; (80008a4 <HAL_ADC_ConfigChannel+0x100>)
 8000856:	4013      	ands	r3, r2
 8000858:	4a11      	ldr	r2, [pc, #68]	; (80008a0 <HAL_ADC_ConfigChannel+0xfc>)
 800085a:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800085c:	2000      	movs	r0, #0
 800085e:	e7e5      	b.n	800082c <HAL_ADC_ConfigChannel+0x88>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000860:	2180      	movs	r1, #128	; 0x80
 8000862:	0409      	lsls	r1, r1, #16
 8000864:	430b      	orrs	r3, r1
 8000866:	6013      	str	r3, [r2, #0]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000868:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <HAL_ADC_ConfigChannel+0x104>)
 800086a:	4910      	ldr	r1, [pc, #64]	; (80008ac <HAL_ADC_ConfigChannel+0x108>)
 800086c:	6818      	ldr	r0, [r3, #0]
 800086e:	f7ff fc4b 	bl	8000108 <__udivsi3>
 8000872:	0083      	lsls	r3, r0, #2
 8000874:	1818      	adds	r0, r3, r0
 8000876:	0040      	lsls	r0, r0, #1
 8000878:	9001      	str	r0, [sp, #4]
          while(wait_loop_index != 0U)
 800087a:	9b01      	ldr	r3, [sp, #4]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d0ed      	beq.n	800085c <HAL_ADC_ConfigChannel+0xb8>
            wait_loop_index--;
 8000880:	9b01      	ldr	r3, [sp, #4]
 8000882:	3b01      	subs	r3, #1
 8000884:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000886:	9b01      	ldr	r3, [sp, #4]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d1f9      	bne.n	8000880 <HAL_ADC_ConfigChannel+0xdc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800088c:	2000      	movs	r0, #0
 800088e:	e7cd      	b.n	800082c <HAL_ADC_ConfigChannel+0x88>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000890:	03d2      	lsls	r2, r2, #15
 8000892:	e7c1      	b.n	8000818 <HAL_ADC_ConfigChannel+0x74>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000894:	4a06      	ldr	r2, [pc, #24]	; (80008b0 <HAL_ADC_ConfigChannel+0x10c>)
 8000896:	e7de      	b.n	8000856 <HAL_ADC_ConfigChannel+0xb2>
 8000898:	4a06      	ldr	r2, [pc, #24]	; (80008b4 <HAL_ADC_ConfigChannel+0x110>)
 800089a:	e7dc      	b.n	8000856 <HAL_ADC_ConfigChannel+0xb2>
 800089c:	00001001 	.word	0x00001001
 80008a0:	40012708 	.word	0x40012708
 80008a4:	feffffff 	.word	0xfeffffff
 80008a8:	2000003c 	.word	0x2000003c
 80008ac:	000f4240 	.word	0x000f4240
 80008b0:	ff7fffff 	.word	0xff7fffff
 80008b4:	ffbfffff 	.word	0xffbfffff

080008b8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008b8:	b570      	push	{r4, r5, r6, lr}
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80008ba:	2800      	cmp	r0, #0
 80008bc:	db14      	blt.n	80008e8 <HAL_NVIC_SetPriority+0x30>
 80008be:	4a16      	ldr	r2, [pc, #88]	; (8000918 <HAL_NVIC_SetPriority+0x60>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008c0:	2403      	movs	r4, #3
 80008c2:	4694      	mov	ip, r2
 80008c4:	22ff      	movs	r2, #255	; 0xff
 80008c6:	0883      	lsrs	r3, r0, #2
 80008c8:	4020      	ands	r0, r4
 80008ca:	0014      	movs	r4, r2
 80008cc:	26c0      	movs	r6, #192	; 0xc0
 80008ce:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008d0:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008d2:	4084      	lsls	r4, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008d4:	400a      	ands	r2, r1
 80008d6:	4082      	lsls	r2, r0
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	4463      	add	r3, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008dc:	00b6      	lsls	r6, r6, #2
 80008de:	599d      	ldr	r5, [r3, r6]
 80008e0:	43a5      	bics	r5, r4
 80008e2:	432a      	orrs	r2, r5
 80008e4:	519a      	str	r2, [r3, r6]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	4a0c      	ldr	r2, [pc, #48]	; (800091c <HAL_NVIC_SetPriority+0x64>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008ea:	24ff      	movs	r4, #255	; 0xff
 80008ec:	4694      	mov	ip, r2
 80008ee:	230f      	movs	r3, #15
 80008f0:	2203      	movs	r2, #3
 80008f2:	b2c0      	uxtb	r0, r0
 80008f4:	4003      	ands	r3, r0
 80008f6:	4010      	ands	r0, r2
 80008f8:	0022      	movs	r2, r4
 80008fa:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008fc:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008fe:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000900:	400c      	ands	r4, r1
 8000902:	4084      	lsls	r4, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000904:	3b08      	subs	r3, #8
 8000906:	089b      	lsrs	r3, r3, #2
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	4463      	add	r3, ip
 800090c:	69dd      	ldr	r5, [r3, #28]
 800090e:	4395      	bics	r5, r2
 8000910:	432c      	orrs	r4, r5
 8000912:	61dc      	str	r4, [r3, #28]
 8000914:	e7e7      	b.n	80008e6 <HAL_NVIC_SetPriority+0x2e>
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	e000e100 	.word	0xe000e100
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000920:	231f      	movs	r3, #31
 8000922:	4018      	ands	r0, r3
 8000924:	3b1e      	subs	r3, #30
 8000926:	4083      	lsls	r3, r0
 8000928:	4a01      	ldr	r2, [pc, #4]	; (8000930 <HAL_NVIC_EnableIRQ+0x10>)
 800092a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800092c:	4770      	bx	lr
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	e000e100 	.word	0xe000e100

08000934 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000934:	4a0a      	ldr	r2, [pc, #40]	; (8000960 <HAL_SYSTICK_Config+0x2c>)
 8000936:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000938:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800093a:	4293      	cmp	r3, r2
 800093c:	d80e      	bhi.n	800095c <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800093e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000940:	4a08      	ldr	r2, [pc, #32]	; (8000964 <HAL_SYSTICK_Config+0x30>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000942:	4809      	ldr	r0, [pc, #36]	; (8000968 <HAL_SYSTICK_Config+0x34>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000944:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000946:	6a03      	ldr	r3, [r0, #32]
 8000948:	0609      	lsls	r1, r1, #24
 800094a:	021b      	lsls	r3, r3, #8
 800094c:	0a1b      	lsrs	r3, r3, #8
 800094e:	430b      	orrs	r3, r1
 8000950:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000952:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000954:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000956:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000958:	3307      	adds	r3, #7
 800095a:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800095c:	4770      	bx	lr
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	00ffffff 	.word	0x00ffffff
 8000964:	e000e010 	.word	0xe000e010
 8000968:	e000ed00 	.word	0xe000ed00

0800096c <HAL_SYSTICK_CLKSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800096c:	4a05      	ldr	r2, [pc, #20]	; (8000984 <HAL_SYSTICK_CLKSourceConfig+0x18>)
 800096e:	6813      	ldr	r3, [r2, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000970:	2804      	cmp	r0, #4
 8000972:	d003      	beq.n	800097c <HAL_SYSTICK_CLKSourceConfig+0x10>
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000974:	2104      	movs	r1, #4
 8000976:	438b      	bics	r3, r1
 8000978:	6013      	str	r3, [r2, #0]
  }
}
 800097a:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800097c:	4318      	orrs	r0, r3
 800097e:	6010      	str	r0, [r2, #0]
 8000980:	e7fb      	b.n	800097a <HAL_SYSTICK_CLKSourceConfig+0xe>
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	e000e010 	.word	0xe000e010

08000988 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8000988:	4770      	bx	lr
 800098a:	46c0      	nop			; (mov r8, r8)

0800098c <HAL_SYSTICK_IRQHandler>:
{
 800098c:	b510      	push	{r4, lr}
  HAL_SYSTICK_Callback();
 800098e:	f7ff fffb 	bl	8000988 <HAL_SYSTICK_Callback>
}
 8000992:	bd10      	pop	{r4, pc}

08000994 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8000994:	b570      	push	{r4, r5, r6, lr}
 8000996:	1e04      	subs	r4, r0, #0
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000998:	d02b      	beq.n	80009f2 <HAL_DMA_Init+0x5e>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800099a:	2521      	movs	r5, #33	; 0x21
 800099c:	2302      	movs	r3, #2
 800099e:	5543      	strb	r3, [r0, r5]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80009a0:	6800      	ldr	r0, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80009a2:	4a15      	ldr	r2, [pc, #84]	; (80009f8 <HAL_DMA_Init+0x64>)
  tmp = hdma->Instance->CCR;
 80009a4:	6803      	ldr	r3, [r0, #0]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80009a6:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80009a8:	401a      	ands	r2, r3
  tmp |=  hdma->Init.Direction        |
 80009aa:	6863      	ldr	r3, [r4, #4]
 80009ac:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009ae:	68e1      	ldr	r1, [r4, #12]
 80009b0:	430b      	orrs	r3, r1
 80009b2:	6921      	ldr	r1, [r4, #16]
 80009b4:	430b      	orrs	r3, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009b6:	6961      	ldr	r1, [r4, #20]
 80009b8:	430b      	orrs	r3, r1
 80009ba:	69a1      	ldr	r1, [r4, #24]
 80009bc:	430b      	orrs	r3, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 80009be:	69e1      	ldr	r1, [r4, #28]
 80009c0:	430b      	orrs	r3, r1
  tmp |=  hdma->Init.Direction        |
 80009c2:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80009c4:	6003      	str	r3, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80009c6:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <HAL_DMA_Init+0x68>)
 80009c8:	2114      	movs	r1, #20
 80009ca:	469c      	mov	ip, r3
 80009cc:	4460      	add	r0, ip
 80009ce:	f7ff fb9b 	bl	8000108 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <HAL_DMA_Init+0x6c>)
  hdma->State = HAL_DMA_STATE_READY;
 80009d4:	2201      	movs	r2, #1
  hdma->DmaBaseAddress = DMA1;
 80009d6:	63e3      	str	r3, [r4, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 80009d8:	2300      	movs	r3, #0
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80009da:	0080      	lsls	r0, r0, #2
 80009dc:	6420      	str	r0, [r4, #64]	; 0x40
  return HAL_OK;
 80009de:	2000      	movs	r0, #0
  hdma->XferCpltCallback = NULL;
 80009e0:	62a3      	str	r3, [r4, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80009e2:	62e3      	str	r3, [r4, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80009e4:	6323      	str	r3, [r4, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80009e6:	6363      	str	r3, [r4, #52]	; 0x34
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009e8:	63a3      	str	r3, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 80009ea:	5562      	strb	r2, [r4, r5]
  hdma->Lock = HAL_UNLOCKED;
 80009ec:	321f      	adds	r2, #31
 80009ee:	54a3      	strb	r3, [r4, r2]
}  
 80009f0:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80009f2:	2001      	movs	r0, #1
 80009f4:	e7fc      	b.n	80009f0 <HAL_DMA_Init+0x5c>
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	ffffc00f 	.word	0xffffc00f
 80009fc:	bffdfff8 	.word	0xbffdfff8
 8000a00:	40020000 	.word	0x40020000

08000a04 <HAL_DMA_Start_IT>:
{
 8000a04:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma);
 8000a06:	2420      	movs	r4, #32
 8000a08:	5d05      	ldrb	r5, [r0, r4]
 8000a0a:	2602      	movs	r6, #2
 8000a0c:	2d01      	cmp	r5, #1
 8000a0e:	d008      	beq.n	8000a22 <HAL_DMA_Start_IT+0x1e>
 8000a10:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a12:	2721      	movs	r7, #33	; 0x21
  __HAL_LOCK(hdma);
 8000a14:	5505      	strb	r5, [r0, r4]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000a16:	5dc5      	ldrb	r5, [r0, r7]
 8000a18:	b2ed      	uxtb	r5, r5
 8000a1a:	2d01      	cmp	r5, #1
 8000a1c:	d003      	beq.n	8000a26 <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8000a1e:	2300      	movs	r3, #0
 8000a20:	5503      	strb	r3, [r0, r4]
} 
 8000a22:	0030      	movs	r0, r6
 8000a24:	bdf0      	pop	{r4, r5, r6, r7, pc}
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a26:	2400      	movs	r4, #0
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000a28:	55c6      	strb	r6, [r0, r7]
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a2a:	6384      	str	r4, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a2c:	6804      	ldr	r4, [r0, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000a2e:	6c07      	ldr	r7, [r0, #64]	; 0x40
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a30:	6826      	ldr	r6, [r4, #0]
 8000a32:	43ae      	bics	r6, r5
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000a34:	40bd      	lsls	r5, r7
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000a36:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000a38:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8000a3a:	6075      	str	r5, [r6, #4]
  hdma->Instance->CNDTR = DataLength;
 8000a3c:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000a3e:	6843      	ldr	r3, [r0, #4]
 8000a40:	2b10      	cmp	r3, #16
 8000a42:	d00e      	beq.n	8000a62 <HAL_DMA_Start_IT+0x5e>
    hdma->Instance->CPAR = SrcAddress;
 8000a44:	60a1      	str	r1, [r4, #8]
    hdma->Instance->CMAR = DstAddress;
 8000a46:	60e2      	str	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8000a48:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d00c      	beq.n	8000a68 <HAL_DMA_Start_IT+0x64>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000a4e:	220e      	movs	r2, #14
 8000a50:	6823      	ldr	r3, [r4, #0]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	6023      	str	r3, [r4, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000a56:	2201      	movs	r2, #1
 8000a58:	6823      	ldr	r3, [r4, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000a5a:	2600      	movs	r6, #0
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	6023      	str	r3, [r4, #0]
 8000a60:	e7df      	b.n	8000a22 <HAL_DMA_Start_IT+0x1e>
    hdma->Instance->CPAR = DstAddress;
 8000a62:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000a64:	60e1      	str	r1, [r4, #12]
 8000a66:	e7ef      	b.n	8000a48 <HAL_DMA_Start_IT+0x44>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000a68:	220a      	movs	r2, #10
 8000a6a:	6823      	ldr	r3, [r4, #0]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	6023      	str	r3, [r4, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000a70:	6823      	ldr	r3, [r4, #0]
 8000a72:	3a06      	subs	r2, #6
 8000a74:	4393      	bics	r3, r2
 8000a76:	6023      	str	r3, [r4, #0]
 8000a78:	e7ed      	b.n	8000a56 <HAL_DMA_Start_IT+0x52>
 8000a7a:	46c0      	nop			; (mov r8, r8)

08000a7c <HAL_DMA_IRQHandler>:
{
 8000a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000a7e:	2504      	movs	r5, #4
 8000a80:	002e      	movs	r6, r5
 8000a82:	6c03      	ldr	r3, [r0, #64]	; 0x40
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a84:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000a86:	409e      	lsls	r6, r3
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a88:	6822      	ldr	r2, [r4, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8000a8a:	6801      	ldr	r1, [r0, #0]
 8000a8c:	680f      	ldr	r7, [r1, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000a8e:	4216      	tst	r6, r2
 8000a90:	d00d      	beq.n	8000aae <HAL_DMA_IRQHandler+0x32>
 8000a92:	423d      	tst	r5, r7
 8000a94:	d00b      	beq.n	8000aae <HAL_DMA_IRQHandler+0x32>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a96:	680b      	ldr	r3, [r1, #0]
 8000a98:	069b      	lsls	r3, r3, #26
 8000a9a:	d402      	bmi.n	8000aa2 <HAL_DMA_IRQHandler+0x26>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000a9c:	680b      	ldr	r3, [r1, #0]
 8000a9e:	43ab      	bics	r3, r5
 8000aa0:	600b      	str	r3, [r1, #0]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000aa2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000aa4:	6066      	str	r6, [r4, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d000      	beq.n	8000aac <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8000aaa:	4798      	blx	r3
}  
 8000aac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000aae:	2502      	movs	r5, #2
 8000ab0:	002e      	movs	r6, r5
 8000ab2:	409e      	lsls	r6, r3
 8000ab4:	4216      	tst	r6, r2
 8000ab6:	d014      	beq.n	8000ae2 <HAL_DMA_IRQHandler+0x66>
 8000ab8:	423d      	tst	r5, r7
 8000aba:	d012      	beq.n	8000ae2 <HAL_DMA_IRQHandler+0x66>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000abc:	680b      	ldr	r3, [r1, #0]
 8000abe:	069b      	lsls	r3, r3, #26
 8000ac0:	d406      	bmi.n	8000ad0 <HAL_DMA_IRQHandler+0x54>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000ac2:	220a      	movs	r2, #10
 8000ac4:	680b      	ldr	r3, [r1, #0]
 8000ac6:	4393      	bics	r3, r2
 8000ac8:	600b      	str	r3, [r1, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8000aca:	2321      	movs	r3, #33	; 0x21
 8000acc:	3a09      	subs	r2, #9
 8000ace:	54c2      	strb	r2, [r0, r3]
  	__HAL_UNLOCK(hdma);
 8000ad0:	2320      	movs	r3, #32
 8000ad2:	2200      	movs	r2, #0
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000ad4:	6066      	str	r6, [r4, #4]
  	__HAL_UNLOCK(hdma);
 8000ad6:	54c2      	strb	r2, [r0, r3]
  	if(hdma->XferCpltCallback != NULL)
 8000ad8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d0e6      	beq.n	8000aac <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8000ade:	4798      	blx	r3
 8000ae0:	e7e4      	b.n	8000aac <HAL_DMA_IRQHandler+0x30>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000ae2:	2508      	movs	r5, #8
 8000ae4:	002e      	movs	r6, r5
 8000ae6:	409e      	lsls	r6, r3
 8000ae8:	4232      	tst	r2, r6
 8000aea:	d0df      	beq.n	8000aac <HAL_DMA_IRQHandler+0x30>
 8000aec:	423d      	tst	r5, r7
 8000aee:	d0dd      	beq.n	8000aac <HAL_DMA_IRQHandler+0x30>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000af0:	680a      	ldr	r2, [r1, #0]
 8000af2:	3506      	adds	r5, #6
 8000af4:	43aa      	bics	r2, r5
 8000af6:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000af8:	2201      	movs	r2, #1
 8000afa:	0011      	movs	r1, r2
 8000afc:	4099      	lsls	r1, r3
    hdma->State = HAL_DMA_STATE_READY;    
 8000afe:	2321      	movs	r3, #33	; 0x21
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000b00:	6061      	str	r1, [r4, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000b02:	6382      	str	r2, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8000b04:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma); 
 8000b06:	2200      	movs	r2, #0
 8000b08:	3b01      	subs	r3, #1
 8000b0a:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferErrorCallback != NULL)
 8000b0c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d0cc      	beq.n	8000aac <HAL_DMA_IRQHandler+0x30>
    	hdma->XferErrorCallback(hdma);
 8000b12:	4798      	blx	r3
 8000b14:	e7ca      	b.n	8000aac <HAL_DMA_IRQHandler+0x30>
 8000b16:	46c0      	nop			; (mov r8, r8)

08000b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000b18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b1a:	46de      	mov	lr, fp
 8000b1c:	4657      	mov	r7, sl
 8000b1e:	464e      	mov	r6, r9
 8000b20:	4645      	mov	r5, r8
 8000b22:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000b24:	680b      	ldr	r3, [r1, #0]
{ 
 8000b26:	b085      	sub	sp, #20
 8000b28:	468b      	mov	fp, r1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000b2a:	469c      	mov	ip, r3
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d100      	bne.n	8000b34 <HAL_GPIO_Init+0x1c>
 8000b32:	e0b2      	b.n	8000c9a <HAL_GPIO_Init+0x182>
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b34:	4b60      	ldr	r3, [pc, #384]	; (8000cb8 <HAL_GPIO_Init+0x1a0>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b36:	46e1      	mov	r9, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b38:	469a      	mov	sl, r3
        temp = EXTI->IMR;
 8000b3a:	4b60      	ldr	r3, [pc, #384]	; (8000cbc <HAL_GPIO_Init+0x1a4>)
 8000b3c:	4698      	mov	r8, r3
 8000b3e:	e062      	b.n	8000c06 <HAL_GPIO_Init+0xee>
      temp = GPIOx->MODER;
 8000b40:	6803      	ldr	r3, [r0, #0]
 8000b42:	0056      	lsls	r6, r2, #1
 8000b44:	469c      	mov	ip, r3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000b46:	2303      	movs	r3, #3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b48:	2703      	movs	r7, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000b4a:	40b3      	lsls	r3, r6
 8000b4c:	4664      	mov	r4, ip
 8000b4e:	43db      	mvns	r3, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b50:	400f      	ands	r7, r1
 8000b52:	40b7      	lsls	r7, r6
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000b54:	401c      	ands	r4, r3
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b56:	433c      	orrs	r4, r7
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b58:	9f01      	ldr	r7, [sp, #4]
      GPIOx->MODER = temp;
 8000b5a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b5c:	3f01      	subs	r7, #1
 8000b5e:	2f01      	cmp	r7, #1
 8000b60:	d97d      	bls.n	8000c5e <HAL_GPIO_Init+0x146>
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000b62:	465c      	mov	r4, fp
      temp = GPIOx->PUPDR;
 8000b64:	68c5      	ldr	r5, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000b66:	402b      	ands	r3, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000b68:	68a5      	ldr	r5, [r4, #8]
 8000b6a:	40b5      	lsls	r5, r6
 8000b6c:	432b      	orrs	r3, r5
      GPIOx->PUPDR = temp;
 8000b6e:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000b70:	2380      	movs	r3, #128	; 0x80
 8000b72:	055b      	lsls	r3, r3, #21
 8000b74:	4219      	tst	r1, r3
 8000b76:	d042      	beq.n	8000bfe <HAL_GPIO_Init+0xe6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b78:	4653      	mov	r3, sl
 8000b7a:	2401      	movs	r4, #1
 8000b7c:	699b      	ldr	r3, [r3, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000b7e:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b80:	4323      	orrs	r3, r4
 8000b82:	4654      	mov	r4, sl
 8000b84:	61a3      	str	r3, [r4, #24]
 8000b86:	69a3      	ldr	r3, [r4, #24]
 8000b88:	2401      	movs	r4, #1
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000b8a:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8c:	4023      	ands	r3, r4
 8000b8e:	4c4c      	ldr	r4, [pc, #304]	; (8000cc0 <HAL_GPIO_Init+0x1a8>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000b90:	4016      	ands	r6, r2
 8000b92:	46a4      	mov	ip, r4
 8000b94:	00b6      	lsls	r6, r6, #2
 8000b96:	40b7      	lsls	r7, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b98:	2490      	movs	r4, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9a:	9303      	str	r3, [sp, #12]
 8000b9c:	9b03      	ldr	r3, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000b9e:	0893      	lsrs	r3, r2, #2
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	4463      	add	r3, ip
 8000ba4:	689d      	ldr	r5, [r3, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ba6:	05e4      	lsls	r4, r4, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000ba8:	43bd      	bics	r5, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000baa:	42a0      	cmp	r0, r4
 8000bac:	d100      	bne.n	8000bb0 <HAL_GPIO_Init+0x98>
 8000bae:	e07b      	b.n	8000ca8 <HAL_GPIO_Init+0x190>
 8000bb0:	4f44      	ldr	r7, [pc, #272]	; (8000cc4 <HAL_GPIO_Init+0x1ac>)
 8000bb2:	42b8      	cmp	r0, r7
 8000bb4:	d100      	bne.n	8000bb8 <HAL_GPIO_Init+0xa0>
 8000bb6:	e079      	b.n	8000cac <HAL_GPIO_Init+0x194>
 8000bb8:	4f43      	ldr	r7, [pc, #268]	; (8000cc8 <HAL_GPIO_Init+0x1b0>)
 8000bba:	42b8      	cmp	r0, r7
 8000bbc:	d100      	bne.n	8000bc0 <HAL_GPIO_Init+0xa8>
 8000bbe:	e078      	b.n	8000cb2 <HAL_GPIO_Init+0x19a>
 8000bc0:	2705      	movs	r7, #5
 8000bc2:	40b7      	lsls	r7, r6
 8000bc4:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2] = temp;
 8000bc6:	609d      	str	r5, [r3, #8]
        temp = EXTI->IMR;
 8000bc8:	4643      	mov	r3, r8
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000bca:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 8000bcc:	681b      	ldr	r3, [r3, #0]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000bce:	43e5      	mvns	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bd0:	03cc      	lsls	r4, r1, #15
 8000bd2:	d45f      	bmi.n	8000c94 <HAL_GPIO_Init+0x17c>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000bd4:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->IMR = temp;
 8000bd6:	4644      	mov	r4, r8
 8000bd8:	6023      	str	r3, [r4, #0]

        temp = EXTI->EMR;
 8000bda:	6863      	ldr	r3, [r4, #4]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bdc:	038c      	lsls	r4, r1, #14
 8000bde:	d456      	bmi.n	8000c8e <HAL_GPIO_Init+0x176>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000be0:	402b      	ands	r3, r5
        { 
          SET_BIT(temp, iocurrent); 
        }
        EXTI->EMR = temp;
 8000be2:	4644      	mov	r4, r8
 8000be4:	6063      	str	r3, [r4, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000be6:	68a3      	ldr	r3, [r4, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000be8:	02cc      	lsls	r4, r1, #11
 8000bea:	d44d      	bmi.n	8000c88 <HAL_GPIO_Init+0x170>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000bec:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->RTSR = temp;
 8000bee:	4644      	mov	r4, r8
 8000bf0:	60a3      	str	r3, [r4, #8]

        temp = EXTI->FTSR;
 8000bf2:	68e3      	ldr	r3, [r4, #12]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bf4:	0289      	lsls	r1, r1, #10
 8000bf6:	d444      	bmi.n	8000c82 <HAL_GPIO_Init+0x16a>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000bf8:	402b      	ands	r3, r5
        {
          SET_BIT(temp, iocurrent); 
        }
        EXTI->FTSR = temp;
 8000bfa:	4641      	mov	r1, r8
 8000bfc:	60cb      	str	r3, [r1, #12]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000bfe:	464b      	mov	r3, r9
      }
    }
    
    position++;
 8000c00:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000c02:	40d3      	lsrs	r3, r2
 8000c04:	d049      	beq.n	8000c9a <HAL_GPIO_Init+0x182>
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c06:	2501      	movs	r5, #1
 8000c08:	464c      	mov	r4, r9
 8000c0a:	4095      	lsls	r5, r2
 8000c0c:	402c      	ands	r4, r5
 8000c0e:	9400      	str	r4, [sp, #0]
    if(iocurrent)
 8000c10:	d0f5      	beq.n	8000bfe <HAL_GPIO_Init+0xe6>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000c12:	465b      	mov	r3, fp
 8000c14:	6859      	ldr	r1, [r3, #4]
 8000c16:	2310      	movs	r3, #16
 8000c18:	000f      	movs	r7, r1
 8000c1a:	439f      	bics	r7, r3
 8000c1c:	003b      	movs	r3, r7
 8000c1e:	9701      	str	r7, [sp, #4]
 8000c20:	2f02      	cmp	r7, #2
 8000c22:	d18d      	bne.n	8000b40 <HAL_GPIO_Init+0x28>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000c24:	240f      	movs	r4, #15
 8000c26:	3305      	adds	r3, #5
 8000c28:	4013      	ands	r3, r2
 8000c2a:	009b      	lsls	r3, r3, #2
 8000c2c:	409c      	lsls	r4, r3
        temp = GPIOx->AFR[position >> 3];
 8000c2e:	08d6      	lsrs	r6, r2, #3
 8000c30:	00b6      	lsls	r6, r6, #2
 8000c32:	1986      	adds	r6, r0, r6
 8000c34:	6a37      	ldr	r7, [r6, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000c36:	43a7      	bics	r7, r4
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000c38:	465c      	mov	r4, fp
 8000c3a:	6924      	ldr	r4, [r4, #16]
 8000c3c:	409c      	lsls	r4, r3
 8000c3e:	0023      	movs	r3, r4
 8000c40:	433b      	orrs	r3, r7
        GPIOx->AFR[position >> 3U] = temp;
 8000c42:	6233      	str	r3, [r6, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000c44:	2303      	movs	r3, #3
 8000c46:	0056      	lsls	r6, r2, #1
 8000c48:	40b3      	lsls	r3, r6
 8000c4a:	43db      	mvns	r3, r3
      temp = GPIOx->MODER;
 8000c4c:	6807      	ldr	r7, [r0, #0]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000c4e:	401f      	ands	r7, r3
 8000c50:	46bc      	mov	ip, r7
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c52:	2703      	movs	r7, #3
 8000c54:	400f      	ands	r7, r1
 8000c56:	40b7      	lsls	r7, r6
 8000c58:	4664      	mov	r4, ip
 8000c5a:	4327      	orrs	r7, r4
      GPIOx->MODER = temp;
 8000c5c:	6007      	str	r7, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8000c5e:	6887      	ldr	r7, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000c60:	465c      	mov	r4, fp
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c62:	401f      	ands	r7, r3
 8000c64:	46bc      	mov	ip, r7
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000c66:	68e7      	ldr	r7, [r4, #12]
 8000c68:	4664      	mov	r4, ip
 8000c6a:	40b7      	lsls	r7, r6
 8000c6c:	4327      	orrs	r7, r4
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c6e:	2401      	movs	r4, #1
        GPIOx->OSPEEDR = temp;
 8000c70:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c72:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000c74:	43af      	bics	r7, r5
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c76:	090d      	lsrs	r5, r1, #4
 8000c78:	4025      	ands	r5, r4
 8000c7a:	4095      	lsls	r5, r2
 8000c7c:	433d      	orrs	r5, r7
        GPIOx->OTYPER = temp;
 8000c7e:	6045      	str	r5, [r0, #4]
 8000c80:	e76f      	b.n	8000b62 <HAL_GPIO_Init+0x4a>
          SET_BIT(temp, iocurrent); 
 8000c82:	9900      	ldr	r1, [sp, #0]
 8000c84:	430b      	orrs	r3, r1
 8000c86:	e7b8      	b.n	8000bfa <HAL_GPIO_Init+0xe2>
          SET_BIT(temp, iocurrent); 
 8000c88:	9c00      	ldr	r4, [sp, #0]
 8000c8a:	4323      	orrs	r3, r4
 8000c8c:	e7af      	b.n	8000bee <HAL_GPIO_Init+0xd6>
          SET_BIT(temp, iocurrent); 
 8000c8e:	9c00      	ldr	r4, [sp, #0]
 8000c90:	4323      	orrs	r3, r4
 8000c92:	e7a6      	b.n	8000be2 <HAL_GPIO_Init+0xca>
          SET_BIT(temp, iocurrent); 
 8000c94:	9c00      	ldr	r4, [sp, #0]
 8000c96:	4323      	orrs	r3, r4
 8000c98:	e79d      	b.n	8000bd6 <HAL_GPIO_Init+0xbe>
  } 
}
 8000c9a:	b005      	add	sp, #20
 8000c9c:	bc3c      	pop	{r2, r3, r4, r5}
 8000c9e:	4690      	mov	r8, r2
 8000ca0:	4699      	mov	r9, r3
 8000ca2:	46a2      	mov	sl, r4
 8000ca4:	46ab      	mov	fp, r5
 8000ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e78b      	b.n	8000bc4 <HAL_GPIO_Init+0xac>
 8000cac:	2701      	movs	r7, #1
 8000cae:	40b7      	lsls	r7, r6
 8000cb0:	e788      	b.n	8000bc4 <HAL_GPIO_Init+0xac>
 8000cb2:	2702      	movs	r7, #2
 8000cb4:	40b7      	lsls	r7, r6
 8000cb6:	e785      	b.n	8000bc4 <HAL_GPIO_Init+0xac>
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40010400 	.word	0x40010400
 8000cc0:	40010000 	.word	0x40010000
 8000cc4:	48000400 	.word	0x48000400
 8000cc8:	48000800 	.word	0x48000800

08000ccc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000ccc:	6900      	ldr	r0, [r0, #16]
 8000cce:	4008      	ands	r0, r1
 8000cd0:	1e41      	subs	r1, r0, #1
 8000cd2:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8000cd4:	b2c0      	uxtb	r0, r0
  }
 8000cd6:	4770      	bx	lr

08000cd8 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000cd8:	6943      	ldr	r3, [r0, #20]
 8000cda:	4059      	eors	r1, r3
 8000cdc:	6141      	str	r1, [r0, #20]
}
 8000cde:	4770      	bx	lr

08000ce0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8000ce0:	b570      	push	{r4, r5, r6, lr}
 8000ce2:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if(hiwdg == NULL)
 8000ce4:	d01e      	beq.n	8000d24 <HAL_IWDG_Init+0x44>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automaticaly */
  __HAL_IWDG_START(hiwdg);
 8000ce6:	6803      	ldr	r3, [r0, #0]
 8000ce8:	4a11      	ldr	r2, [pc, #68]	; (8000d30 <HAL_IWDG_Init+0x50>)
 8000cea:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8000cec:	4a11      	ldr	r2, [pc, #68]	; (8000d34 <HAL_IWDG_Init+0x54>)
 8000cee:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8000cf0:	6842      	ldr	r2, [r0, #4]
 8000cf2:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8000cf4:	6882      	ldr	r2, [r0, #8]
 8000cf6:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8000cf8:	f7ff fba6 	bl	8000448 <HAL_GetTick>
 8000cfc:	0005      	movs	r5, r0

   /* Wait for register to be updated */
  while(hiwdg->Instance->SR != RESET)
 8000cfe:	e004      	b.n	8000d0a <HAL_IWDG_Init+0x2a>
  {
    if((HAL_GetTick() - tickstart ) > HAL_IWDG_DEFAULT_TIMEOUT)
 8000d00:	f7ff fba2 	bl	8000448 <HAL_GetTick>
 8000d04:	1b40      	subs	r0, r0, r5
 8000d06:	2827      	cmp	r0, #39	; 0x27
 8000d08:	d80a      	bhi.n	8000d20 <HAL_IWDG_Init+0x40>
  while(hiwdg->Instance->SR != RESET)
 8000d0a:	6823      	ldr	r3, [r4, #0]
 8000d0c:	68da      	ldr	r2, [r3, #12]
 8000d0e:	2a00      	cmp	r2, #0
 8000d10:	d1f6      	bne.n	8000d00 <HAL_IWDG_Init+0x20>
    }
  }

  /* If window parameter is different than current value, modify window 
  register */
  if(hiwdg->Instance->WINR != hiwdg->Init.Window)
 8000d12:	6919      	ldr	r1, [r3, #16]
 8000d14:	68e2      	ldr	r2, [r4, #12]
 8000d16:	4291      	cmp	r1, r2
 8000d18:	d006      	beq.n	8000d28 <HAL_IWDG_Init+0x48>
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
 8000d1a:	2000      	movs	r0, #0
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8000d1c:	611a      	str	r2, [r3, #16]
}
 8000d1e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 8000d20:	2003      	movs	r0, #3
 8000d22:	e7fc      	b.n	8000d1e <HAL_IWDG_Init+0x3e>
    return HAL_ERROR;
 8000d24:	2001      	movs	r0, #1
 8000d26:	e7fa      	b.n	8000d1e <HAL_IWDG_Init+0x3e>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000d28:	4a03      	ldr	r2, [pc, #12]	; (8000d38 <HAL_IWDG_Init+0x58>)
  return HAL_OK;
 8000d2a:	2000      	movs	r0, #0
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	e7f6      	b.n	8000d1e <HAL_IWDG_Init+0x3e>
 8000d30:	0000cccc 	.word	0x0000cccc
 8000d34:	00005555 	.word	0x00005555
 8000d38:	0000aaaa 	.word	0x0000aaaa

08000d3c <HAL_IWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000d3c:	6803      	ldr	r3, [r0, #0]
 8000d3e:	4a02      	ldr	r2, [pc, #8]	; (8000d48 <HAL_IWDG_Refresh+0xc>)

  /* Return function status */
  return HAL_OK;
}
 8000d40:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000d42:	601a      	str	r2, [r3, #0]
}
 8000d44:	4770      	bx	lr
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	0000aaaa 	.word	0x0000aaaa

08000d4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d4e:	46ce      	mov	lr, r9
 8000d50:	4647      	mov	r7, r8
 8000d52:	b580      	push	{r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d54:	6803      	ldr	r3, [r0, #0]
{
 8000d56:	b083      	sub	sp, #12
 8000d58:	0004      	movs	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d5a:	07da      	lsls	r2, r3, #31
 8000d5c:	d52f      	bpl.n	8000dbe <HAL_RCC_OscConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d5e:	220c      	movs	r2, #12
 8000d60:	48c4      	ldr	r0, [pc, #784]	; (8001074 <HAL_RCC_OscConfig+0x328>)
 8000d62:	6841      	ldr	r1, [r0, #4]
 8000d64:	4011      	ands	r1, r2
 8000d66:	2904      	cmp	r1, #4
 8000d68:	d100      	bne.n	8000d6c <HAL_RCC_OscConfig+0x20>
 8000d6a:	e110      	b.n	8000f8e <HAL_RCC_OscConfig+0x242>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d6c:	6841      	ldr	r1, [r0, #4]
 8000d6e:	400a      	ands	r2, r1
 8000d70:	2a08      	cmp	r2, #8
 8000d72:	d100      	bne.n	8000d76 <HAL_RCC_OscConfig+0x2a>
 8000d74:	e107      	b.n	8000f86 <HAL_RCC_OscConfig+0x23a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d76:	6863      	ldr	r3, [r4, #4]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d100      	bne.n	8000d7e <HAL_RCC_OscConfig+0x32>
 8000d7c:	e186      	b.n	800108c <HAL_RCC_OscConfig+0x340>
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d100      	bne.n	8000d84 <HAL_RCC_OscConfig+0x38>
 8000d82:	e11a      	b.n	8000fba <HAL_RCC_OscConfig+0x26e>
 8000d84:	2b05      	cmp	r3, #5
 8000d86:	d100      	bne.n	8000d8a <HAL_RCC_OscConfig+0x3e>
 8000d88:	e1db      	b.n	8001142 <HAL_RCC_OscConfig+0x3f6>
 8000d8a:	4bba      	ldr	r3, [pc, #744]	; (8001074 <HAL_RCC_OscConfig+0x328>)
 8000d8c:	49ba      	ldr	r1, [pc, #744]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	400a      	ands	r2, r1
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	49b9      	ldr	r1, [pc, #740]	; (800107c <HAL_RCC_OscConfig+0x330>)
 8000d98:	400a      	ands	r2, r1
 8000d9a:	601a      	str	r2, [r3, #0]

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d9c:	f7ff fb54 	bl	8000448 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da0:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000da2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000da4:	4eb3      	ldr	r6, [pc, #716]	; (8001074 <HAL_RCC_OscConfig+0x328>)
 8000da6:	02ad      	lsls	r5, r5, #10
 8000da8:	e005      	b.n	8000db6 <HAL_RCC_OscConfig+0x6a>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000daa:	f7ff fb4d 	bl	8000448 <HAL_GetTick>
 8000dae:	1bc0      	subs	r0, r0, r7
 8000db0:	2864      	cmp	r0, #100	; 0x64
 8000db2:	d900      	bls.n	8000db6 <HAL_RCC_OscConfig+0x6a>
 8000db4:	e12f      	b.n	8001016 <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db6:	6833      	ldr	r3, [r6, #0]
 8000db8:	422b      	tst	r3, r5
 8000dba:	d0f6      	beq.n	8000daa <HAL_RCC_OscConfig+0x5e>
 8000dbc:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dbe:	079a      	lsls	r2, r3, #30
 8000dc0:	d529      	bpl.n	8000e16 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	49ab      	ldr	r1, [pc, #684]	; (8001074 <HAL_RCC_OscConfig+0x328>)
 8000dc6:	6848      	ldr	r0, [r1, #4]
 8000dc8:	4202      	tst	r2, r0
 8000dca:	d100      	bne.n	8000dce <HAL_RCC_OscConfig+0x82>
 8000dcc:	e0bf      	b.n	8000f4e <HAL_RCC_OscConfig+0x202>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000dce:	6848      	ldr	r0, [r1, #4]
 8000dd0:	4002      	ands	r2, r0
 8000dd2:	2a08      	cmp	r2, #8
 8000dd4:	d100      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x8c>
 8000dd6:	e0b6      	b.n	8000f46 <HAL_RCC_OscConfig+0x1fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000dd8:	68e3      	ldr	r3, [r4, #12]
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dda:	4da6      	ldr	r5, [pc, #664]	; (8001074 <HAL_RCC_OscConfig+0x328>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d100      	bne.n	8000de2 <HAL_RCC_OscConfig+0x96>
 8000de0:	e134      	b.n	800104c <HAL_RCC_OscConfig+0x300>
        __HAL_RCC_HSI_ENABLE();
 8000de2:	2201      	movs	r2, #1
 8000de4:	682b      	ldr	r3, [r5, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de6:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 8000de8:	4313      	orrs	r3, r2
 8000dea:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000dec:	f7ff fb2c 	bl	8000448 <HAL_GetTick>
 8000df0:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000df2:	e005      	b.n	8000e00 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000df4:	f7ff fb28 	bl	8000448 <HAL_GetTick>
 8000df8:	1bc0      	subs	r0, r0, r7
 8000dfa:	2802      	cmp	r0, #2
 8000dfc:	d900      	bls.n	8000e00 <HAL_RCC_OscConfig+0xb4>
 8000dfe:	e10a      	b.n	8001016 <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e00:	682b      	ldr	r3, [r5, #0]
 8000e02:	421e      	tst	r6, r3
 8000e04:	d0f6      	beq.n	8000df4 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e06:	21f8      	movs	r1, #248	; 0xf8
 8000e08:	682a      	ldr	r2, [r5, #0]
 8000e0a:	6923      	ldr	r3, [r4, #16]
 8000e0c:	438a      	bics	r2, r1
 8000e0e:	00db      	lsls	r3, r3, #3
 8000e10:	4313      	orrs	r3, r2
 8000e12:	602b      	str	r3, [r5, #0]
 8000e14:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e16:	071a      	lsls	r2, r3, #28
 8000e18:	d500      	bpl.n	8000e1c <HAL_RCC_OscConfig+0xd0>
 8000e1a:	e07d      	b.n	8000f18 <HAL_RCC_OscConfig+0x1cc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e1c:	075a      	lsls	r2, r3, #29
 8000e1e:	d540      	bpl.n	8000ea2 <HAL_RCC_OscConfig+0x156>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e20:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000e22:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e24:	4b93      	ldr	r3, [pc, #588]	; (8001074 <HAL_RCC_OscConfig+0x328>)
 8000e26:	0552      	lsls	r2, r2, #21
 8000e28:	69d9      	ldr	r1, [r3, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000e2a:	4680      	mov	r8, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e2c:	4211      	tst	r1, r2
 8000e2e:	d108      	bne.n	8000e42 <HAL_RCC_OscConfig+0xf6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e30:	69d9      	ldr	r1, [r3, #28]
 8000e32:	4311      	orrs	r1, r2
 8000e34:	61d9      	str	r1, [r3, #28]
 8000e36:	69db      	ldr	r3, [r3, #28]
 8000e38:	401a      	ands	r2, r3
 8000e3a:	9201      	str	r2, [sp, #4]
 8000e3c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	4698      	mov	r8, r3
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e42:	2780      	movs	r7, #128	; 0x80
 8000e44:	4e8e      	ldr	r6, [pc, #568]	; (8001080 <HAL_RCC_OscConfig+0x334>)
 8000e46:	007f      	lsls	r7, r7, #1
 8000e48:	6833      	ldr	r3, [r6, #0]
 8000e4a:	423b      	tst	r3, r7
 8000e4c:	d100      	bne.n	8000e50 <HAL_RCC_OscConfig+0x104>
 8000e4e:	e0cd      	b.n	8000fec <HAL_RCC_OscConfig+0x2a0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e50:	68a3      	ldr	r3, [r4, #8]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d100      	bne.n	8000e58 <HAL_RCC_OscConfig+0x10c>
 8000e56:	e0d9      	b.n	800100c <HAL_RCC_OscConfig+0x2c0>
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d100      	bne.n	8000e5e <HAL_RCC_OscConfig+0x112>
 8000e5c:	e0dd      	b.n	800101a <HAL_RCC_OscConfig+0x2ce>
 8000e5e:	2b05      	cmp	r3, #5
 8000e60:	d100      	bne.n	8000e64 <HAL_RCC_OscConfig+0x118>
 8000e62:	e198      	b.n	8001196 <HAL_RCC_OscConfig+0x44a>
 8000e64:	2101      	movs	r1, #1
 8000e66:	4b83      	ldr	r3, [pc, #524]	; (8001074 <HAL_RCC_OscConfig+0x328>)
 8000e68:	6a1a      	ldr	r2, [r3, #32]
 8000e6a:	438a      	bics	r2, r1
 8000e6c:	621a      	str	r2, [r3, #32]
 8000e6e:	6a1a      	ldr	r2, [r3, #32]
 8000e70:	3103      	adds	r1, #3
 8000e72:	438a      	bics	r2, r1
 8000e74:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e76:	f7ff fae7 	bl	8000448 <HAL_GetTick>
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e7a:	4f7e      	ldr	r7, [pc, #504]	; (8001074 <HAL_RCC_OscConfig+0x328>)
      tickstart = HAL_GetTick();
 8000e7c:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e7e:	2602      	movs	r6, #2
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e80:	4d80      	ldr	r5, [pc, #512]	; (8001084 <HAL_RCC_OscConfig+0x338>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e82:	e006      	b.n	8000e92 <HAL_RCC_OscConfig+0x146>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e84:	f7ff fae0 	bl	8000448 <HAL_GetTick>
 8000e88:	464b      	mov	r3, r9
 8000e8a:	1ac0      	subs	r0, r0, r3
 8000e8c:	42a8      	cmp	r0, r5
 8000e8e:	d900      	bls.n	8000e92 <HAL_RCC_OscConfig+0x146>
 8000e90:	e0c1      	b.n	8001016 <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e92:	6a3b      	ldr	r3, [r7, #32]
 8000e94:	421e      	tst	r6, r3
 8000e96:	d0f5      	beq.n	8000e84 <HAL_RCC_OscConfig+0x138>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000e98:	4643      	mov	r3, r8
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d100      	bne.n	8000ea0 <HAL_RCC_OscConfig+0x154>
 8000e9e:	e113      	b.n	80010c8 <HAL_RCC_OscConfig+0x37c>
 8000ea0:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000ea2:	06db      	lsls	r3, r3, #27
 8000ea4:	d512      	bpl.n	8000ecc <HAL_RCC_OscConfig+0x180>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000ea6:	6963      	ldr	r3, [r4, #20]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d100      	bne.n	8000eae <HAL_RCC_OscConfig+0x162>
 8000eac:	e155      	b.n	800115a <HAL_RCC_OscConfig+0x40e>
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000eae:	3305      	adds	r3, #5
 8000eb0:	d000      	beq.n	8000eb4 <HAL_RCC_OscConfig+0x168>
 8000eb2:	e0f2      	b.n	800109a <HAL_RCC_OscConfig+0x34e>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000eb4:	2104      	movs	r1, #4

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000eb6:	20f8      	movs	r0, #248	; 0xf8
      __HAL_RCC_HSI14ADC_ENABLE();
 8000eb8:	4a6e      	ldr	r2, [pc, #440]	; (8001074 <HAL_RCC_OscConfig+0x328>)
 8000eba:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000ebc:	438b      	bics	r3, r1
 8000ebe:	6353      	str	r3, [r2, #52]	; 0x34
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000ec0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8000ec2:	69a3      	ldr	r3, [r4, #24]
 8000ec4:	4381      	bics	r1, r0
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	430b      	orrs	r3, r1
 8000eca:	6353      	str	r3, [r2, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ecc:	6a23      	ldr	r3, [r4, #32]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d01c      	beq.n	8000f0c <HAL_RCC_OscConfig+0x1c0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	4d67      	ldr	r5, [pc, #412]	; (8001074 <HAL_RCC_OscConfig+0x328>)
 8000ed6:	6869      	ldr	r1, [r5, #4]
 8000ed8:	400a      	ands	r2, r1
 8000eda:	2a08      	cmp	r2, #8
 8000edc:	d03e      	beq.n	8000f5c <HAL_RCC_OscConfig+0x210>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d100      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x198>
 8000ee2:	e0f8      	b.n	80010d6 <HAL_RCC_OscConfig+0x38a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ee4:	682b      	ldr	r3, [r5, #0]
 8000ee6:	4a68      	ldr	r2, [pc, #416]	; (8001088 <HAL_RCC_OscConfig+0x33c>)
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ee8:	002c      	movs	r4, r5
        __HAL_RCC_PLL_DISABLE();
 8000eea:	4013      	ands	r3, r2
 8000eec:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000eee:	f7ff faab 	bl	8000448 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ef2:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000ef4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ef6:	04ad      	lsls	r5, r5, #18
 8000ef8:	e005      	b.n	8000f06 <HAL_RCC_OscConfig+0x1ba>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000efa:	f7ff faa5 	bl	8000448 <HAL_GetTick>
 8000efe:	1b80      	subs	r0, r0, r6
 8000f00:	2802      	cmp	r0, #2
 8000f02:	d900      	bls.n	8000f06 <HAL_RCC_OscConfig+0x1ba>
 8000f04:	e087      	b.n	8001016 <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f06:	6823      	ldr	r3, [r4, #0]
 8000f08:	422b      	tst	r3, r5
 8000f0a:	d1f6      	bne.n	8000efa <HAL_RCC_OscConfig+0x1ae>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000f0c:	2000      	movs	r0, #0
}
 8000f0e:	b003      	add	sp, #12
 8000f10:	bc0c      	pop	{r2, r3}
 8000f12:	4690      	mov	r8, r2
 8000f14:	4699      	mov	r9, r3
 8000f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f18:	69e3      	ldr	r3, [r4, #28]
      __HAL_RCC_LSI_ENABLE();
 8000f1a:	4d56      	ldr	r5, [pc, #344]	; (8001074 <HAL_RCC_OscConfig+0x328>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d01f      	beq.n	8000f60 <HAL_RCC_OscConfig+0x214>
      __HAL_RCC_LSI_ENABLE();
 8000f20:	2201      	movs	r2, #1
 8000f22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f24:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000f26:	4313      	orrs	r3, r2
 8000f28:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000f2a:	f7ff fa8d 	bl	8000448 <HAL_GetTick>
 8000f2e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f30:	e004      	b.n	8000f3c <HAL_RCC_OscConfig+0x1f0>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f32:	f7ff fa89 	bl	8000448 <HAL_GetTick>
 8000f36:	1bc0      	subs	r0, r0, r7
 8000f38:	2802      	cmp	r0, #2
 8000f3a:	d86c      	bhi.n	8001016 <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f3c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000f3e:	421e      	tst	r6, r3
 8000f40:	d0f7      	beq.n	8000f32 <HAL_RCC_OscConfig+0x1e6>
 8000f42:	6823      	ldr	r3, [r4, #0]
 8000f44:	e76a      	b.n	8000e1c <HAL_RCC_OscConfig+0xd0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000f46:	684a      	ldr	r2, [r1, #4]
 8000f48:	03d2      	lsls	r2, r2, #15
 8000f4a:	d500      	bpl.n	8000f4e <HAL_RCC_OscConfig+0x202>
 8000f4c:	e744      	b.n	8000dd8 <HAL_RCC_OscConfig+0x8c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f4e:	4a49      	ldr	r2, [pc, #292]	; (8001074 <HAL_RCC_OscConfig+0x328>)
 8000f50:	6812      	ldr	r2, [r2, #0]
 8000f52:	0792      	lsls	r2, r2, #30
 8000f54:	d525      	bpl.n	8000fa2 <HAL_RCC_OscConfig+0x256>
 8000f56:	68e2      	ldr	r2, [r4, #12]
 8000f58:	2a01      	cmp	r2, #1
 8000f5a:	d022      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x256>
      return HAL_ERROR;
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	e7d6      	b.n	8000f0e <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_DISABLE();
 8000f60:	2201      	movs	r2, #1
 8000f62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f64:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 8000f66:	4393      	bics	r3, r2
 8000f68:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 8000f6a:	f7ff fa6d 	bl	8000448 <HAL_GetTick>
 8000f6e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f70:	e004      	b.n	8000f7c <HAL_RCC_OscConfig+0x230>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000f72:	f7ff fa69 	bl	8000448 <HAL_GetTick>
 8000f76:	1bc0      	subs	r0, r0, r7
 8000f78:	2802      	cmp	r0, #2
 8000f7a:	d84c      	bhi.n	8001016 <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f7c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000f7e:	421e      	tst	r6, r3
 8000f80:	d1f7      	bne.n	8000f72 <HAL_RCC_OscConfig+0x226>
 8000f82:	6823      	ldr	r3, [r4, #0]
 8000f84:	e74a      	b.n	8000e1c <HAL_RCC_OscConfig+0xd0>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f86:	6842      	ldr	r2, [r0, #4]
 8000f88:	03d2      	lsls	r2, r2, #15
 8000f8a:	d400      	bmi.n	8000f8e <HAL_RCC_OscConfig+0x242>
 8000f8c:	e6f3      	b.n	8000d76 <HAL_RCC_OscConfig+0x2a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f8e:	4a39      	ldr	r2, [pc, #228]	; (8001074 <HAL_RCC_OscConfig+0x328>)
 8000f90:	6812      	ldr	r2, [r2, #0]
 8000f92:	0392      	lsls	r2, r2, #14
 8000f94:	d400      	bmi.n	8000f98 <HAL_RCC_OscConfig+0x24c>
 8000f96:	e712      	b.n	8000dbe <HAL_RCC_OscConfig+0x72>
 8000f98:	6862      	ldr	r2, [r4, #4]
 8000f9a:	2a00      	cmp	r2, #0
 8000f9c:	d000      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x254>
 8000f9e:	e70e      	b.n	8000dbe <HAL_RCC_OscConfig+0x72>
 8000fa0:	e7dc      	b.n	8000f5c <HAL_RCC_OscConfig+0x210>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fa2:	25f8      	movs	r5, #248	; 0xf8
 8000fa4:	4833      	ldr	r0, [pc, #204]	; (8001074 <HAL_RCC_OscConfig+0x328>)
 8000fa6:	6922      	ldr	r2, [r4, #16]
 8000fa8:	6801      	ldr	r1, [r0, #0]
 8000faa:	00d2      	lsls	r2, r2, #3
 8000fac:	43a9      	bics	r1, r5
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	6002      	str	r2, [r0, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fb2:	071a      	lsls	r2, r3, #28
 8000fb4:	d400      	bmi.n	8000fb8 <HAL_RCC_OscConfig+0x26c>
 8000fb6:	e731      	b.n	8000e1c <HAL_RCC_OscConfig+0xd0>
 8000fb8:	e7ae      	b.n	8000f18 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fba:	4d2e      	ldr	r5, [pc, #184]	; (8001074 <HAL_RCC_OscConfig+0x328>)
 8000fbc:	4a2e      	ldr	r2, [pc, #184]	; (8001078 <HAL_RCC_OscConfig+0x32c>)
 8000fbe:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fc0:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	602b      	str	r3, [r5, #0]
 8000fc6:	682b      	ldr	r3, [r5, #0]
 8000fc8:	4a2c      	ldr	r2, [pc, #176]	; (800107c <HAL_RCC_OscConfig+0x330>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fca:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fcc:	4013      	ands	r3, r2
 8000fce:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000fd0:	f7ff fa3a 	bl	8000448 <HAL_GetTick>
 8000fd4:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fd6:	e004      	b.n	8000fe2 <HAL_RCC_OscConfig+0x296>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fd8:	f7ff fa36 	bl	8000448 <HAL_GetTick>
 8000fdc:	1bc0      	subs	r0, r0, r7
 8000fde:	2864      	cmp	r0, #100	; 0x64
 8000fe0:	d819      	bhi.n	8001016 <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fe2:	682b      	ldr	r3, [r5, #0]
 8000fe4:	4233      	tst	r3, r6
 8000fe6:	d1f7      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x28c>
 8000fe8:	6823      	ldr	r3, [r4, #0]
 8000fea:	e6e8      	b.n	8000dbe <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fec:	6833      	ldr	r3, [r6, #0]
 8000fee:	433b      	orrs	r3, r7
 8000ff0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000ff2:	f7ff fa29 	bl	8000448 <HAL_GetTick>
 8000ff6:	0005      	movs	r5, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ff8:	e004      	b.n	8001004 <HAL_RCC_OscConfig+0x2b8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ffa:	f7ff fa25 	bl	8000448 <HAL_GetTick>
 8000ffe:	1b40      	subs	r0, r0, r5
 8001000:	2864      	cmp	r0, #100	; 0x64
 8001002:	d808      	bhi.n	8001016 <HAL_RCC_OscConfig+0x2ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001004:	6833      	ldr	r3, [r6, #0]
 8001006:	423b      	tst	r3, r7
 8001008:	d0f7      	beq.n	8000ffa <HAL_RCC_OscConfig+0x2ae>
 800100a:	e721      	b.n	8000e50 <HAL_RCC_OscConfig+0x104>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800100c:	4919      	ldr	r1, [pc, #100]	; (8001074 <HAL_RCC_OscConfig+0x328>)
 800100e:	6a0a      	ldr	r2, [r1, #32]
 8001010:	4313      	orrs	r3, r2
 8001012:	620b      	str	r3, [r1, #32]
 8001014:	e72f      	b.n	8000e76 <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 8001016:	2003      	movs	r0, #3
 8001018:	e779      	b.n	8000f0e <HAL_RCC_OscConfig+0x1c2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800101a:	2201      	movs	r2, #1
 800101c:	4e15      	ldr	r6, [pc, #84]	; (8001074 <HAL_RCC_OscConfig+0x328>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800101e:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001020:	6a33      	ldr	r3, [r6, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001022:	4d18      	ldr	r5, [pc, #96]	; (8001084 <HAL_RCC_OscConfig+0x338>)
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001024:	4393      	bics	r3, r2
 8001026:	6233      	str	r3, [r6, #32]
 8001028:	6a33      	ldr	r3, [r6, #32]
 800102a:	3203      	adds	r2, #3
 800102c:	4393      	bics	r3, r2
 800102e:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8001030:	f7ff fa0a 	bl	8000448 <HAL_GetTick>
 8001034:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001036:	e005      	b.n	8001044 <HAL_RCC_OscConfig+0x2f8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001038:	f7ff fa06 	bl	8000448 <HAL_GetTick>
 800103c:	464b      	mov	r3, r9
 800103e:	1ac0      	subs	r0, r0, r3
 8001040:	42a8      	cmp	r0, r5
 8001042:	d8e8      	bhi.n	8001016 <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001044:	6a33      	ldr	r3, [r6, #32]
 8001046:	421f      	tst	r7, r3
 8001048:	d1f6      	bne.n	8001038 <HAL_RCC_OscConfig+0x2ec>
 800104a:	e725      	b.n	8000e98 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_HSI_DISABLE();
 800104c:	2201      	movs	r2, #1
 800104e:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001050:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 8001052:	4393      	bics	r3, r2
 8001054:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001056:	f7ff f9f7 	bl	8000448 <HAL_GetTick>
 800105a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800105c:	e004      	b.n	8001068 <HAL_RCC_OscConfig+0x31c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800105e:	f7ff f9f3 	bl	8000448 <HAL_GetTick>
 8001062:	1bc0      	subs	r0, r0, r7
 8001064:	2802      	cmp	r0, #2
 8001066:	d8d6      	bhi.n	8001016 <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001068:	682b      	ldr	r3, [r5, #0]
 800106a:	421e      	tst	r6, r3
 800106c:	d1f7      	bne.n	800105e <HAL_RCC_OscConfig+0x312>
 800106e:	6823      	ldr	r3, [r4, #0]
 8001070:	e6d1      	b.n	8000e16 <HAL_RCC_OscConfig+0xca>
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	40021000 	.word	0x40021000
 8001078:	fffeffff 	.word	0xfffeffff
 800107c:	fffbffff 	.word	0xfffbffff
 8001080:	40007000 	.word	0x40007000
 8001084:	00001388 	.word	0x00001388
 8001088:	feffffff 	.word	0xfeffffff
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	4a47      	ldr	r2, [pc, #284]	; (80011ac <HAL_RCC_OscConfig+0x460>)
 8001090:	025b      	lsls	r3, r3, #9
 8001092:	6811      	ldr	r1, [r2, #0]
 8001094:	430b      	orrs	r3, r1
 8001096:	6013      	str	r3, [r2, #0]
 8001098:	e680      	b.n	8000d9c <HAL_RCC_OscConfig+0x50>
      __HAL_RCC_HSI14ADC_DISABLE();
 800109a:	2204      	movs	r2, #4
 800109c:	4d43      	ldr	r5, [pc, #268]	; (80011ac <HAL_RCC_OscConfig+0x460>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800109e:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80010a0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80010a2:	4313      	orrs	r3, r2
 80010a4:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 80010a6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80010a8:	3a03      	subs	r2, #3
 80010aa:	4393      	bics	r3, r2
 80010ac:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80010ae:	f7ff f9cb 	bl	8000448 <HAL_GetTick>
 80010b2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010b4:	e004      	b.n	80010c0 <HAL_RCC_OscConfig+0x374>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80010b6:	f7ff f9c7 	bl	8000448 <HAL_GetTick>
 80010ba:	1bc0      	subs	r0, r0, r7
 80010bc:	2802      	cmp	r0, #2
 80010be:	d8aa      	bhi.n	8001016 <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80010c0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80010c2:	421e      	tst	r6, r3
 80010c4:	d1f7      	bne.n	80010b6 <HAL_RCC_OscConfig+0x36a>
 80010c6:	e701      	b.n	8000ecc <HAL_RCC_OscConfig+0x180>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010c8:	4a38      	ldr	r2, [pc, #224]	; (80011ac <HAL_RCC_OscConfig+0x460>)
 80010ca:	4939      	ldr	r1, [pc, #228]	; (80011b0 <HAL_RCC_OscConfig+0x464>)
 80010cc:	69d3      	ldr	r3, [r2, #28]
 80010ce:	400b      	ands	r3, r1
 80010d0:	61d3      	str	r3, [r2, #28]
 80010d2:	6823      	ldr	r3, [r4, #0]
 80010d4:	e6e5      	b.n	8000ea2 <HAL_RCC_OscConfig+0x156>
        __HAL_RCC_PLL_DISABLE();
 80010d6:	682b      	ldr	r3, [r5, #0]
 80010d8:	4a36      	ldr	r2, [pc, #216]	; (80011b4 <HAL_RCC_OscConfig+0x468>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010da:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80010dc:	4013      	ands	r3, r2
 80010de:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80010e0:	f7ff f9b2 	bl	8000448 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010e4:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 80010e6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010e8:	e004      	b.n	80010f4 <HAL_RCC_OscConfig+0x3a8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010ea:	f7ff f9ad 	bl	8000448 <HAL_GetTick>
 80010ee:	1bc0      	subs	r0, r0, r7
 80010f0:	2802      	cmp	r0, #2
 80010f2:	d890      	bhi.n	8001016 <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010f4:	682b      	ldr	r3, [r5, #0]
 80010f6:	4233      	tst	r3, r6
 80010f8:	d1f7      	bne.n	80010ea <HAL_RCC_OscConfig+0x39e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010fa:	220f      	movs	r2, #15
 80010fc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80010fe:	4393      	bics	r3, r2
 8001100:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001102:	4313      	orrs	r3, r2
 8001104:	62eb      	str	r3, [r5, #44]	; 0x2c
 8001106:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001108:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800110a:	686a      	ldr	r2, [r5, #4]
 800110c:	430b      	orrs	r3, r1
 800110e:	492a      	ldr	r1, [pc, #168]	; (80011b8 <HAL_RCC_OscConfig+0x46c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001110:	2480      	movs	r4, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001112:	400a      	ands	r2, r1
 8001114:	4313      	orrs	r3, r2
 8001116:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001118:	2380      	movs	r3, #128	; 0x80
 800111a:	682a      	ldr	r2, [r5, #0]
 800111c:	045b      	lsls	r3, r3, #17
 800111e:	4313      	orrs	r3, r2
 8001120:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001122:	f7ff f991 	bl	8000448 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001126:	4d21      	ldr	r5, [pc, #132]	; (80011ac <HAL_RCC_OscConfig+0x460>)
        tickstart = HAL_GetTick();
 8001128:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800112a:	04a4      	lsls	r4, r4, #18
 800112c:	e005      	b.n	800113a <HAL_RCC_OscConfig+0x3ee>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800112e:	f7ff f98b 	bl	8000448 <HAL_GetTick>
 8001132:	1b80      	subs	r0, r0, r6
 8001134:	2802      	cmp	r0, #2
 8001136:	d900      	bls.n	800113a <HAL_RCC_OscConfig+0x3ee>
 8001138:	e76d      	b.n	8001016 <HAL_RCC_OscConfig+0x2ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800113a:	682b      	ldr	r3, [r5, #0]
 800113c:	4223      	tst	r3, r4
 800113e:	d0f6      	beq.n	800112e <HAL_RCC_OscConfig+0x3e2>
 8001140:	e6e4      	b.n	8000f0c <HAL_RCC_OscConfig+0x1c0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001142:	2280      	movs	r2, #128	; 0x80
 8001144:	4b19      	ldr	r3, [pc, #100]	; (80011ac <HAL_RCC_OscConfig+0x460>)
 8001146:	02d2      	lsls	r2, r2, #11
 8001148:	6819      	ldr	r1, [r3, #0]
 800114a:	430a      	orrs	r2, r1
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	2280      	movs	r2, #128	; 0x80
 8001150:	6819      	ldr	r1, [r3, #0]
 8001152:	0252      	lsls	r2, r2, #9
 8001154:	430a      	orrs	r2, r1
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	e620      	b.n	8000d9c <HAL_RCC_OscConfig+0x50>
      __HAL_RCC_HSI14ADC_DISABLE();
 800115a:	2104      	movs	r1, #4
 800115c:	4d13      	ldr	r5, [pc, #76]	; (80011ac <HAL_RCC_OscConfig+0x460>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800115e:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8001160:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001162:	430a      	orrs	r2, r1
 8001164:	636a      	str	r2, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8001166:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001168:	4313      	orrs	r3, r2
 800116a:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800116c:	f7ff f96c 	bl	8000448 <HAL_GetTick>
 8001170:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001172:	e005      	b.n	8001180 <HAL_RCC_OscConfig+0x434>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001174:	f7ff f968 	bl	8000448 <HAL_GetTick>
 8001178:	1bc0      	subs	r0, r0, r7
 800117a:	2802      	cmp	r0, #2
 800117c:	d900      	bls.n	8001180 <HAL_RCC_OscConfig+0x434>
 800117e:	e74a      	b.n	8001016 <HAL_RCC_OscConfig+0x2ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001180:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001182:	421e      	tst	r6, r3
 8001184:	d0f6      	beq.n	8001174 <HAL_RCC_OscConfig+0x428>
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001186:	21f8      	movs	r1, #248	; 0xf8
 8001188:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800118a:	69a3      	ldr	r3, [r4, #24]
 800118c:	438a      	bics	r2, r1
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	4313      	orrs	r3, r2
 8001192:	636b      	str	r3, [r5, #52]	; 0x34
 8001194:	e69a      	b.n	8000ecc <HAL_RCC_OscConfig+0x180>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001196:	2104      	movs	r1, #4
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <HAL_RCC_OscConfig+0x460>)
 800119a:	6a1a      	ldr	r2, [r3, #32]
 800119c:	430a      	orrs	r2, r1
 800119e:	621a      	str	r2, [r3, #32]
 80011a0:	6a1a      	ldr	r2, [r3, #32]
 80011a2:	3903      	subs	r1, #3
 80011a4:	430a      	orrs	r2, r1
 80011a6:	621a      	str	r2, [r3, #32]
 80011a8:	e665      	b.n	8000e76 <HAL_RCC_OscConfig+0x12a>
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	40021000 	.word	0x40021000
 80011b0:	efffffff 	.word	0xefffffff
 80011b4:	feffffff 	.word	0xfeffffff
 80011b8:	ffc2ffff 	.word	0xffc2ffff

080011bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011be:	46ce      	mov	lr, r9
 80011c0:	4647      	mov	r7, r8
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011c2:	2201      	movs	r2, #1
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	000c      	movs	r4, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011c8:	495c      	ldr	r1, [pc, #368]	; (800133c <HAL_RCC_ClockConfig+0x180>)
{
 80011ca:	b089      	sub	sp, #36	; 0x24
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011cc:	680b      	ldr	r3, [r1, #0]
{
 80011ce:	0005      	movs	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80011d0:	4013      	ands	r3, r2
 80011d2:	42a3      	cmp	r3, r4
 80011d4:	d20d      	bcs.n	80011f2 <HAL_RCC_ClockConfig+0x36>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011d6:	680b      	ldr	r3, [r1, #0]
 80011d8:	4393      	bics	r3, r2
 80011da:	4323      	orrs	r3, r4
 80011dc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011de:	680b      	ldr	r3, [r1, #0]
 80011e0:	401a      	ands	r2, r3
 80011e2:	4294      	cmp	r4, r2
 80011e4:	d005      	beq.n	80011f2 <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 80011e6:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
  
  return HAL_OK;
}
 80011e8:	b009      	add	sp, #36	; 0x24
 80011ea:	bc0c      	pop	{r2, r3}
 80011ec:	4690      	mov	r8, r2
 80011ee:	4699      	mov	r9, r3
 80011f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011f2:	682b      	ldr	r3, [r5, #0]
 80011f4:	079a      	lsls	r2, r3, #30
 80011f6:	d506      	bpl.n	8001206 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011f8:	20f0      	movs	r0, #240	; 0xf0
 80011fa:	4951      	ldr	r1, [pc, #324]	; (8001340 <HAL_RCC_ClockConfig+0x184>)
 80011fc:	684a      	ldr	r2, [r1, #4]
 80011fe:	4382      	bics	r2, r0
 8001200:	68a8      	ldr	r0, [r5, #8]
 8001202:	4302      	orrs	r2, r0
 8001204:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001206:	07db      	lsls	r3, r3, #31
 8001208:	d524      	bpl.n	8001254 <HAL_RCC_ClockConfig+0x98>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120a:	4b4d      	ldr	r3, [pc, #308]	; (8001340 <HAL_RCC_ClockConfig+0x184>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800120c:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120e:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001210:	2a01      	cmp	r2, #1
 8001212:	d06a      	beq.n	80012ea <HAL_RCC_ClockConfig+0x12e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001214:	2a02      	cmp	r2, #2
 8001216:	d063      	beq.n	80012e0 <HAL_RCC_ClockConfig+0x124>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001218:	079b      	lsls	r3, r3, #30
 800121a:	d5e4      	bpl.n	80011e6 <HAL_RCC_ClockConfig+0x2a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800121c:	2103      	movs	r1, #3
 800121e:	4e48      	ldr	r6, [pc, #288]	; (8001340 <HAL_RCC_ClockConfig+0x184>)
 8001220:	6873      	ldr	r3, [r6, #4]
 8001222:	438b      	bics	r3, r1
 8001224:	4313      	orrs	r3, r2
 8001226:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001228:	f7ff f90e 	bl	8000448 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800122c:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800122e:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001230:	2b01      	cmp	r3, #1
 8001232:	d05d      	beq.n	80012f0 <HAL_RCC_ClockConfig+0x134>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001234:	2b02      	cmp	r3, #2
 8001236:	d06b      	beq.n	8001310 <HAL_RCC_ClockConfig+0x154>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001238:	230c      	movs	r3, #12
 800123a:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800123c:	4b41      	ldr	r3, [pc, #260]	; (8001344 <HAL_RCC_ClockConfig+0x188>)
 800123e:	4699      	mov	r9, r3
 8001240:	e004      	b.n	800124c <HAL_RCC_ClockConfig+0x90>
 8001242:	f7ff f901 	bl	8000448 <HAL_GetTick>
 8001246:	1bc0      	subs	r0, r0, r7
 8001248:	4548      	cmp	r0, r9
 800124a:	d84c      	bhi.n	80012e6 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800124c:	4642      	mov	r2, r8
 800124e:	6873      	ldr	r3, [r6, #4]
 8001250:	421a      	tst	r2, r3
 8001252:	d1f6      	bne.n	8001242 <HAL_RCC_ClockConfig+0x86>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001254:	2101      	movs	r1, #1
 8001256:	4a39      	ldr	r2, [pc, #228]	; (800133c <HAL_RCC_ClockConfig+0x180>)
 8001258:	6813      	ldr	r3, [r2, #0]
 800125a:	400b      	ands	r3, r1
 800125c:	429c      	cmp	r4, r3
 800125e:	d205      	bcs.n	800126c <HAL_RCC_ClockConfig+0xb0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001260:	6813      	ldr	r3, [r2, #0]
 8001262:	438b      	bics	r3, r1
 8001264:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001266:	6813      	ldr	r3, [r2, #0]
 8001268:	4219      	tst	r1, r3
 800126a:	d1bc      	bne.n	80011e6 <HAL_RCC_ClockConfig+0x2a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800126c:	682b      	ldr	r3, [r5, #0]
 800126e:	075b      	lsls	r3, r3, #29
 8001270:	d506      	bpl.n	8001280 <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001272:	4a33      	ldr	r2, [pc, #204]	; (8001340 <HAL_RCC_ClockConfig+0x184>)
 8001274:	4934      	ldr	r1, [pc, #208]	; (8001348 <HAL_RCC_ClockConfig+0x18c>)
 8001276:	6853      	ldr	r3, [r2, #4]
 8001278:	400b      	ands	r3, r1
 800127a:	68e9      	ldr	r1, [r5, #12]
 800127c:	430b      	orrs	r3, r1
 800127e:	6053      	str	r3, [r2, #4]
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001280:	4b32      	ldr	r3, [pc, #200]	; (800134c <HAL_RCC_ClockConfig+0x190>)
 8001282:	466a      	mov	r2, sp
 8001284:	0018      	movs	r0, r3
 8001286:	c870      	ldmia	r0!, {r4, r5, r6}
 8001288:	c270      	stmia	r2!, {r4, r5, r6}
 800128a:	6800      	ldr	r0, [r0, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800128c:	3310      	adds	r3, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800128e:	6010      	str	r0, [r2, #0]
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001290:	aa04      	add	r2, sp, #16
 8001292:	0010      	movs	r0, r2
 8001294:	cb70      	ldmia	r3!, {r4, r5, r6}
 8001296:	c070      	stmia	r0!, {r4, r5, r6}
 8001298:	681b      	ldr	r3, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800129a:	4d29      	ldr	r5, [pc, #164]	; (8001340 <HAL_RCC_ClockConfig+0x184>)
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800129c:	6003      	str	r3, [r0, #0]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800129e:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 80012a0:	6868      	ldr	r0, [r5, #4]
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80012a2:	4669      	mov	r1, sp
  switch (tmpreg & RCC_CFGR_SWS)
 80012a4:	4003      	ands	r3, r0
 80012a6:	2b08      	cmp	r3, #8
 80012a8:	d10b      	bne.n	80012c2 <HAL_RCC_ClockConfig+0x106>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80012aa:	3307      	adds	r3, #7
 80012ac:	0c84      	lsrs	r4, r0, #18
 80012ae:	401c      	ands	r4, r3
 80012b0:	5d0c      	ldrb	r4, [r1, r4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80012b2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80012b4:	400b      	ands	r3, r1
 80012b6:	5cd1      	ldrb	r1, [r2, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80012b8:	03c3      	lsls	r3, r0, #15
 80012ba:	d439      	bmi.n	8001330 <HAL_RCC_ClockConfig+0x174>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80012bc:	4824      	ldr	r0, [pc, #144]	; (8001350 <HAL_RCC_ClockConfig+0x194>)
 80012be:	4360      	muls	r0, r4
 80012c0:	e000      	b.n	80012c4 <HAL_RCC_ClockConfig+0x108>
      sysclockfreq = HSE_VALUE;
 80012c2:	4824      	ldr	r0, [pc, #144]	; (8001354 <HAL_RCC_ClockConfig+0x198>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80012c4:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <HAL_RCC_ClockConfig+0x184>)
 80012c6:	4a24      	ldr	r2, [pc, #144]	; (8001358 <HAL_RCC_ClockConfig+0x19c>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	061b      	lsls	r3, r3, #24
 80012cc:	0f1b      	lsrs	r3, r3, #28
 80012ce:	5cd3      	ldrb	r3, [r2, r3]
 80012d0:	40d8      	lsrs	r0, r3
 80012d2:	4b22      	ldr	r3, [pc, #136]	; (800135c <HAL_RCC_ClockConfig+0x1a0>)
 80012d4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80012d6:	2000      	movs	r0, #0
 80012d8:	f7ff f88c 	bl	80003f4 <HAL_InitTick>
  return HAL_OK;
 80012dc:	2000      	movs	r0, #0
 80012de:	e783      	b.n	80011e8 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012e0:	019b      	lsls	r3, r3, #6
 80012e2:	d49b      	bmi.n	800121c <HAL_RCC_ClockConfig+0x60>
 80012e4:	e77f      	b.n	80011e6 <HAL_RCC_ClockConfig+0x2a>
          return HAL_TIMEOUT;
 80012e6:	2003      	movs	r0, #3
 80012e8:	e77e      	b.n	80011e8 <HAL_RCC_ClockConfig+0x2c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ea:	039b      	lsls	r3, r3, #14
 80012ec:	d496      	bmi.n	800121c <HAL_RCC_ClockConfig+0x60>
 80012ee:	e77a      	b.n	80011e6 <HAL_RCC_ClockConfig+0x2a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80012f0:	330b      	adds	r3, #11
 80012f2:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <HAL_RCC_ClockConfig+0x188>)
 80012f6:	4699      	mov	r9, r3
 80012f8:	e004      	b.n	8001304 <HAL_RCC_ClockConfig+0x148>
 80012fa:	f7ff f8a5 	bl	8000448 <HAL_GetTick>
 80012fe:	1bc0      	subs	r0, r0, r7
 8001300:	4548      	cmp	r0, r9
 8001302:	d8f0      	bhi.n	80012e6 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001304:	4642      	mov	r2, r8
 8001306:	6873      	ldr	r3, [r6, #4]
 8001308:	4013      	ands	r3, r2
 800130a:	2b04      	cmp	r3, #4
 800130c:	d1f5      	bne.n	80012fa <HAL_RCC_ClockConfig+0x13e>
 800130e:	e7a1      	b.n	8001254 <HAL_RCC_ClockConfig+0x98>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001310:	330a      	adds	r3, #10
 8001312:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001314:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <HAL_RCC_ClockConfig+0x188>)
 8001316:	4699      	mov	r9, r3
 8001318:	e004      	b.n	8001324 <HAL_RCC_ClockConfig+0x168>
 800131a:	f7ff f895 	bl	8000448 <HAL_GetTick>
 800131e:	1bc0      	subs	r0, r0, r7
 8001320:	4548      	cmp	r0, r9
 8001322:	d8e0      	bhi.n	80012e6 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001324:	4642      	mov	r2, r8
 8001326:	6873      	ldr	r3, [r6, #4]
 8001328:	4013      	ands	r3, r2
 800132a:	2b08      	cmp	r3, #8
 800132c:	d1f5      	bne.n	800131a <HAL_RCC_ClockConfig+0x15e>
 800132e:	e791      	b.n	8001254 <HAL_RCC_ClockConfig+0x98>
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001330:	4808      	ldr	r0, [pc, #32]	; (8001354 <HAL_RCC_ClockConfig+0x198>)
 8001332:	f7fe fee9 	bl	8000108 <__udivsi3>
 8001336:	4360      	muls	r0, r4
 8001338:	e7c4      	b.n	80012c4 <HAL_RCC_ClockConfig+0x108>
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	40022000 	.word	0x40022000
 8001340:	40021000 	.word	0x40021000
 8001344:	00001388 	.word	0x00001388
 8001348:	fffff8ff 	.word	0xfffff8ff
 800134c:	08004560 	.word	0x08004560
 8001350:	003d0900 	.word	0x003d0900
 8001354:	007a1200 	.word	0x007a1200
 8001358:	080045b8 	.word	0x080045b8
 800135c:	2000003c 	.word	0x2000003c

08001360 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8001360:	4b01      	ldr	r3, [pc, #4]	; (8001368 <HAL_RCC_GetHCLKFreq+0x8>)
 8001362:	6818      	ldr	r0, [r3, #0]
}
 8001364:	4770      	bx	lr
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	2000003c 	.word	0x2000003c

0800136c <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800136c:	b510      	push	{r4, lr}
 800136e:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001370:	d05e      	beq.n	8001430 <HAL_TIM_Base_Init+0xc4>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001372:	233d      	movs	r3, #61	; 0x3d
 8001374:	5cc3      	ldrb	r3, [r0, r3]
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b00      	cmp	r3, #0
 800137a:	d03a      	beq.n	80013f2 <HAL_TIM_Base_Init+0x86>
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 800137c:	2202      	movs	r2, #2
 800137e:	233d      	movs	r3, #61	; 0x3d
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001380:	492c      	ldr	r1, [pc, #176]	; (8001434 <HAL_TIM_Base_Init+0xc8>)
  htim->State= HAL_TIM_STATE_BUSY;
 8001382:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001384:	6823      	ldr	r3, [r4, #0]
  tmpcr1 = TIMx->CR1;
 8001386:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001388:	428b      	cmp	r3, r1
 800138a:	d01e      	beq.n	80013ca <HAL_TIM_Base_Init+0x5e>
 800138c:	2180      	movs	r1, #128	; 0x80
 800138e:	05c9      	lsls	r1, r1, #23
 8001390:	428b      	cmp	r3, r1
 8001392:	d033      	beq.n	80013fc <HAL_TIM_Base_Init+0x90>
 8001394:	4928      	ldr	r1, [pc, #160]	; (8001438 <HAL_TIM_Base_Init+0xcc>)
 8001396:	428b      	cmp	r3, r1
 8001398:	d030      	beq.n	80013fc <HAL_TIM_Base_Init+0x90>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800139a:	4928      	ldr	r1, [pc, #160]	; (800143c <HAL_TIM_Base_Init+0xd0>)
 800139c:	428b      	cmp	r3, r1
 800139e:	d042      	beq.n	8001426 <HAL_TIM_Base_Init+0xba>
 80013a0:	4927      	ldr	r1, [pc, #156]	; (8001440 <HAL_TIM_Base_Init+0xd4>)
 80013a2:	428b      	cmp	r3, r1
 80013a4:	d015      	beq.n	80013d2 <HAL_TIM_Base_Init+0x66>
 80013a6:	4927      	ldr	r1, [pc, #156]	; (8001444 <HAL_TIM_Base_Init+0xd8>)
 80013a8:	428b      	cmp	r3, r1
 80013aa:	d012      	beq.n	80013d2 <HAL_TIM_Base_Init+0x66>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80013ac:	2180      	movs	r1, #128	; 0x80
 80013ae:	438a      	bics	r2, r1
 80013b0:	69a1      	ldr	r1, [r4, #24]
 80013b2:	430a      	orrs	r2, r1

  TIMx->CR1 = tmpcr1;
 80013b4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80013b6:	68e2      	ldr	r2, [r4, #12]
 80013b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80013ba:	6862      	ldr	r2, [r4, #4]
 80013bc:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 80013be:	2201      	movs	r2, #1
 80013c0:	615a      	str	r2, [r3, #20]
  htim->State= HAL_TIM_STATE_READY;
 80013c2:	233d      	movs	r3, #61	; 0x3d
  return HAL_OK;
 80013c4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80013c6:	54e2      	strb	r2, [r4, r3]
}
 80013c8:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80013ca:	2170      	movs	r1, #112	; 0x70
 80013cc:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 80013ce:	68a1      	ldr	r1, [r4, #8]
 80013d0:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80013d2:	491d      	ldr	r1, [pc, #116]	; (8001448 <HAL_TIM_Base_Init+0xdc>)
 80013d4:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80013d6:	6921      	ldr	r1, [r4, #16]
 80013d8:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80013da:	2180      	movs	r1, #128	; 0x80
 80013dc:	438a      	bics	r2, r1
 80013de:	69a1      	ldr	r1, [r4, #24]
 80013e0:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80013e2:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80013e4:	68e2      	ldr	r2, [r4, #12]
 80013e6:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80013e8:	6862      	ldr	r2, [r4, #4]
 80013ea:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80013ec:	6962      	ldr	r2, [r4, #20]
 80013ee:	631a      	str	r2, [r3, #48]	; 0x30
 80013f0:	e7e5      	b.n	80013be <HAL_TIM_Base_Init+0x52>
    htim->Lock = HAL_UNLOCKED;
 80013f2:	223c      	movs	r2, #60	; 0x3c
 80013f4:	5483      	strb	r3, [r0, r2]
    HAL_TIM_Base_MspInit(htim);
 80013f6:	f002 ff2d 	bl	8004254 <HAL_TIM_Base_MspInit>
 80013fa:	e7bf      	b.n	800137c <HAL_TIM_Base_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80013fc:	2170      	movs	r1, #112	; 0x70
 80013fe:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001400:	68a1      	ldr	r1, [r4, #8]
 8001402:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001404:	4910      	ldr	r1, [pc, #64]	; (8001448 <HAL_TIM_Base_Init+0xdc>)
 8001406:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001408:	6921      	ldr	r1, [r4, #16]
 800140a:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800140c:	2180      	movs	r1, #128	; 0x80
 800140e:	438a      	bics	r2, r1
 8001410:	69a1      	ldr	r1, [r4, #24]
 8001412:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001414:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001416:	68e2      	ldr	r2, [r4, #12]
 8001418:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800141a:	6862      	ldr	r2, [r4, #4]
 800141c:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800141e:	4a09      	ldr	r2, [pc, #36]	; (8001444 <HAL_TIM_Base_Init+0xd8>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d1cc      	bne.n	80013be <HAL_TIM_Base_Init+0x52>
 8001424:	e7e2      	b.n	80013ec <HAL_TIM_Base_Init+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001426:	4908      	ldr	r1, [pc, #32]	; (8001448 <HAL_TIM_Base_Init+0xdc>)
 8001428:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800142a:	6921      	ldr	r1, [r4, #16]
 800142c:	430a      	orrs	r2, r1
 800142e:	e7bd      	b.n	80013ac <HAL_TIM_Base_Init+0x40>
    return HAL_ERROR;
 8001430:	2001      	movs	r0, #1
 8001432:	e7c9      	b.n	80013c8 <HAL_TIM_Base_Init+0x5c>
 8001434:	40012c00 	.word	0x40012c00
 8001438:	40000400 	.word	0x40000400
 800143c:	40002000 	.word	0x40002000
 8001440:	40014400 	.word	0x40014400
 8001444:	40014800 	.word	0x40014800
 8001448:	fffffcff 	.word	0xfffffcff

0800144c <HAL_TIM_Base_Start>:
  htim->State= HAL_TIM_STATE_BUSY;
 800144c:	223d      	movs	r2, #61	; 0x3d
 800144e:	2302      	movs	r3, #2
  __HAL_TIM_ENABLE(htim);
 8001450:	2101      	movs	r1, #1
{
 8001452:	b510      	push	{r4, lr}
  __HAL_TIM_ENABLE(htim);
 8001454:	6804      	ldr	r4, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 8001456:	5483      	strb	r3, [r0, r2]
  __HAL_TIM_ENABLE(htim);
 8001458:	6823      	ldr	r3, [r4, #0]
 800145a:	430b      	orrs	r3, r1
 800145c:	6023      	str	r3, [r4, #0]
  htim->State= HAL_TIM_STATE_READY;
 800145e:	5481      	strb	r1, [r0, r2]
}
 8001460:	2000      	movs	r0, #0
 8001462:	bd10      	pop	{r4, pc}

08001464 <HAL_TIM_OC_Start_IT>:
 8001464:	2904      	cmp	r1, #4
 8001466:	d020      	beq.n	80014aa <HAL_TIM_OC_Start_IT+0x46>
 8001468:	d92a      	bls.n	80014c0 <HAL_TIM_OC_Start_IT+0x5c>
 800146a:	2908      	cmp	r1, #8
 800146c:	d01d      	beq.n	80014aa <HAL_TIM_OC_Start_IT+0x46>
 800146e:	290c      	cmp	r1, #12
 8001470:	d12e      	bne.n	80014d0 <HAL_TIM_OC_Start_IT+0x6c>
 8001472:	6803      	ldr	r3, [r0, #0]
 8001474:	2010      	movs	r0, #16
 8001476:	68da      	ldr	r2, [r3, #12]
 8001478:	4302      	orrs	r2, r0
 800147a:	60da      	str	r2, [r3, #12]
 800147c:	2201      	movs	r2, #1
 800147e:	408a      	lsls	r2, r1
 8001480:	6a19      	ldr	r1, [r3, #32]
 8001482:	4391      	bics	r1, r2
 8001484:	6219      	str	r1, [r3, #32]
 8001486:	6a19      	ldr	r1, [r3, #32]
 8001488:	430a      	orrs	r2, r1
 800148a:	621a      	str	r2, [r3, #32]
 800148c:	4a11      	ldr	r2, [pc, #68]	; (80014d4 <HAL_TIM_OC_Start_IT+0x70>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d010      	beq.n	80014b4 <HAL_TIM_OC_Start_IT+0x50>
 8001492:	4a11      	ldr	r2, [pc, #68]	; (80014d8 <HAL_TIM_OC_Start_IT+0x74>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d00d      	beq.n	80014b4 <HAL_TIM_OC_Start_IT+0x50>
 8001498:	4a10      	ldr	r2, [pc, #64]	; (80014dc <HAL_TIM_OC_Start_IT+0x78>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d00a      	beq.n	80014b4 <HAL_TIM_OC_Start_IT+0x50>
 800149e:	2101      	movs	r1, #1
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	2000      	movs	r0, #0
 80014a4:	430a      	orrs	r2, r1
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	4770      	bx	lr
 80014aa:	6803      	ldr	r3, [r0, #0]
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	e7e3      	b.n	800147c <HAL_TIM_OC_Start_IT+0x18>
 80014b4:	2280      	movs	r2, #128	; 0x80
 80014b6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80014b8:	0212      	lsls	r2, r2, #8
 80014ba:	430a      	orrs	r2, r1
 80014bc:	645a      	str	r2, [r3, #68]	; 0x44
 80014be:	e7ee      	b.n	800149e <HAL_TIM_OC_Start_IT+0x3a>
 80014c0:	2900      	cmp	r1, #0
 80014c2:	d105      	bne.n	80014d0 <HAL_TIM_OC_Start_IT+0x6c>
 80014c4:	6803      	ldr	r3, [r0, #0]
 80014c6:	2002      	movs	r0, #2
 80014c8:	68da      	ldr	r2, [r3, #12]
 80014ca:	4302      	orrs	r2, r0
 80014cc:	60da      	str	r2, [r3, #12]
 80014ce:	e7d5      	b.n	800147c <HAL_TIM_OC_Start_IT+0x18>
 80014d0:	6803      	ldr	r3, [r0, #0]
 80014d2:	e7d3      	b.n	800147c <HAL_TIM_OC_Start_IT+0x18>
 80014d4:	40012c00 	.word	0x40012c00
 80014d8:	40014400 	.word	0x40014400
 80014dc:	40014800 	.word	0x40014800

080014e0 <HAL_TIM_PWM_MspInit>:
 80014e0:	4770      	bx	lr
 80014e2:	46c0      	nop			; (mov r8, r8)

080014e4 <HAL_TIM_PWM_Init>:
{
 80014e4:	b510      	push	{r4, lr}
 80014e6:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 80014e8:	d05e      	beq.n	80015a8 <HAL_TIM_PWM_Init+0xc4>
  if(htim->State == HAL_TIM_STATE_RESET)
 80014ea:	233d      	movs	r3, #61	; 0x3d
 80014ec:	5cc3      	ldrb	r3, [r0, r3]
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d03a      	beq.n	800156a <HAL_TIM_PWM_Init+0x86>
  htim->State= HAL_TIM_STATE_BUSY;
 80014f4:	2202      	movs	r2, #2
 80014f6:	233d      	movs	r3, #61	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80014f8:	492c      	ldr	r1, [pc, #176]	; (80015ac <HAL_TIM_PWM_Init+0xc8>)
  htim->State= HAL_TIM_STATE_BUSY;
 80014fa:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014fc:	6823      	ldr	r3, [r4, #0]
  tmpcr1 = TIMx->CR1;
 80014fe:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001500:	428b      	cmp	r3, r1
 8001502:	d01e      	beq.n	8001542 <HAL_TIM_PWM_Init+0x5e>
 8001504:	2180      	movs	r1, #128	; 0x80
 8001506:	05c9      	lsls	r1, r1, #23
 8001508:	428b      	cmp	r3, r1
 800150a:	d033      	beq.n	8001574 <HAL_TIM_PWM_Init+0x90>
 800150c:	4928      	ldr	r1, [pc, #160]	; (80015b0 <HAL_TIM_PWM_Init+0xcc>)
 800150e:	428b      	cmp	r3, r1
 8001510:	d030      	beq.n	8001574 <HAL_TIM_PWM_Init+0x90>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001512:	4928      	ldr	r1, [pc, #160]	; (80015b4 <HAL_TIM_PWM_Init+0xd0>)
 8001514:	428b      	cmp	r3, r1
 8001516:	d042      	beq.n	800159e <HAL_TIM_PWM_Init+0xba>
 8001518:	4927      	ldr	r1, [pc, #156]	; (80015b8 <HAL_TIM_PWM_Init+0xd4>)
 800151a:	428b      	cmp	r3, r1
 800151c:	d015      	beq.n	800154a <HAL_TIM_PWM_Init+0x66>
 800151e:	4927      	ldr	r1, [pc, #156]	; (80015bc <HAL_TIM_PWM_Init+0xd8>)
 8001520:	428b      	cmp	r3, r1
 8001522:	d012      	beq.n	800154a <HAL_TIM_PWM_Init+0x66>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001524:	2180      	movs	r1, #128	; 0x80
 8001526:	438a      	bics	r2, r1
 8001528:	69a1      	ldr	r1, [r4, #24]
 800152a:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 800152c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800152e:	68e2      	ldr	r2, [r4, #12]
 8001530:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001532:	6862      	ldr	r2, [r4, #4]
 8001534:	629a      	str	r2, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8001536:	2201      	movs	r2, #1
 8001538:	615a      	str	r2, [r3, #20]
  htim->State= HAL_TIM_STATE_READY;
 800153a:	233d      	movs	r3, #61	; 0x3d
  return HAL_OK;
 800153c:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800153e:	54e2      	strb	r2, [r4, r3]
}
 8001540:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001542:	2170      	movs	r1, #112	; 0x70
 8001544:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001546:	68a1      	ldr	r1, [r4, #8]
 8001548:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800154a:	491d      	ldr	r1, [pc, #116]	; (80015c0 <HAL_TIM_PWM_Init+0xdc>)
 800154c:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800154e:	6921      	ldr	r1, [r4, #16]
 8001550:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001552:	2180      	movs	r1, #128	; 0x80
 8001554:	438a      	bics	r2, r1
 8001556:	69a1      	ldr	r1, [r4, #24]
 8001558:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 800155a:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800155c:	68e2      	ldr	r2, [r4, #12]
 800155e:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001560:	6862      	ldr	r2, [r4, #4]
 8001562:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001564:	6962      	ldr	r2, [r4, #20]
 8001566:	631a      	str	r2, [r3, #48]	; 0x30
 8001568:	e7e5      	b.n	8001536 <HAL_TIM_PWM_Init+0x52>
    htim->Lock = HAL_UNLOCKED;
 800156a:	223c      	movs	r2, #60	; 0x3c
 800156c:	5483      	strb	r3, [r0, r2]
    HAL_TIM_PWM_MspInit(htim);
 800156e:	f7ff ffb7 	bl	80014e0 <HAL_TIM_PWM_MspInit>
 8001572:	e7bf      	b.n	80014f4 <HAL_TIM_PWM_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001574:	2170      	movs	r1, #112	; 0x70
 8001576:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001578:	68a1      	ldr	r1, [r4, #8]
 800157a:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800157c:	4910      	ldr	r1, [pc, #64]	; (80015c0 <HAL_TIM_PWM_Init+0xdc>)
 800157e:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001580:	6921      	ldr	r1, [r4, #16]
 8001582:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001584:	2180      	movs	r1, #128	; 0x80
 8001586:	438a      	bics	r2, r1
 8001588:	69a1      	ldr	r1, [r4, #24]
 800158a:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 800158c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800158e:	68e2      	ldr	r2, [r4, #12]
 8001590:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001592:	6862      	ldr	r2, [r4, #4]
 8001594:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001596:	4a09      	ldr	r2, [pc, #36]	; (80015bc <HAL_TIM_PWM_Init+0xd8>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d1cc      	bne.n	8001536 <HAL_TIM_PWM_Init+0x52>
 800159c:	e7e2      	b.n	8001564 <HAL_TIM_PWM_Init+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 800159e:	4908      	ldr	r1, [pc, #32]	; (80015c0 <HAL_TIM_PWM_Init+0xdc>)
 80015a0:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80015a2:	6921      	ldr	r1, [r4, #16]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	e7bd      	b.n	8001524 <HAL_TIM_PWM_Init+0x40>
    return HAL_ERROR;
 80015a8:	2001      	movs	r0, #1
 80015aa:	e7c9      	b.n	8001540 <HAL_TIM_PWM_Init+0x5c>
 80015ac:	40012c00 	.word	0x40012c00
 80015b0:	40000400 	.word	0x40000400
 80015b4:	40002000 	.word	0x40002000
 80015b8:	40014400 	.word	0x40014400
 80015bc:	40014800 	.word	0x40014800
 80015c0:	fffffcff 	.word	0xfffffcff

080015c4 <HAL_TIM_PWM_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 80015c4:	2201      	movs	r2, #1
 80015c6:	408a      	lsls	r2, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80015c8:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80015ca:	6a19      	ldr	r1, [r3, #32]
 80015cc:	4391      	bics	r1, r2
 80015ce:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80015d0:	6a19      	ldr	r1, [r3, #32]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	621a      	str	r2, [r3, #32]
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80015d6:	4a0a      	ldr	r2, [pc, #40]	; (8001600 <HAL_TIM_PWM_Start+0x3c>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d00b      	beq.n	80015f4 <HAL_TIM_PWM_Start+0x30>
 80015dc:	4a09      	ldr	r2, [pc, #36]	; (8001604 <HAL_TIM_PWM_Start+0x40>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d008      	beq.n	80015f4 <HAL_TIM_PWM_Start+0x30>
 80015e2:	4a09      	ldr	r2, [pc, #36]	; (8001608 <HAL_TIM_PWM_Start+0x44>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d005      	beq.n	80015f4 <HAL_TIM_PWM_Start+0x30>
  __HAL_TIM_ENABLE(htim);
 80015e8:	2101      	movs	r1, #1
 80015ea:	681a      	ldr	r2, [r3, #0]
}
 80015ec:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 80015ee:	430a      	orrs	r2, r1
 80015f0:	601a      	str	r2, [r3, #0]
}
 80015f2:	4770      	bx	lr
    __HAL_TIM_MOE_ENABLE(htim);
 80015f4:	2280      	movs	r2, #128	; 0x80
 80015f6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80015f8:	0212      	lsls	r2, r2, #8
 80015fa:	430a      	orrs	r2, r1
 80015fc:	645a      	str	r2, [r3, #68]	; 0x44
 80015fe:	e7f3      	b.n	80015e8 <HAL_TIM_PWM_Start+0x24>
 8001600:	40012c00 	.word	0x40012c00
 8001604:	40014400 	.word	0x40014400
 8001608:	40014800 	.word	0x40014800

0800160c <HAL_TIM_IC_MspInit>:
 800160c:	4770      	bx	lr
 800160e:	46c0      	nop			; (mov r8, r8)

08001610 <HAL_TIM_IC_Init>:
{
 8001610:	b510      	push	{r4, lr}
 8001612:	1e04      	subs	r4, r0, #0
  if(htim == NULL)
 8001614:	d05e      	beq.n	80016d4 <HAL_TIM_IC_Init+0xc4>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001616:	233d      	movs	r3, #61	; 0x3d
 8001618:	5cc3      	ldrb	r3, [r0, r3]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b00      	cmp	r3, #0
 800161e:	d03a      	beq.n	8001696 <HAL_TIM_IC_Init+0x86>
  htim->State= HAL_TIM_STATE_BUSY;
 8001620:	2202      	movs	r2, #2
 8001622:	233d      	movs	r3, #61	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001624:	492c      	ldr	r1, [pc, #176]	; (80016d8 <HAL_TIM_IC_Init+0xc8>)
  htim->State= HAL_TIM_STATE_BUSY;
 8001626:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001628:	6823      	ldr	r3, [r4, #0]
  tmpcr1 = TIMx->CR1;
 800162a:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800162c:	428b      	cmp	r3, r1
 800162e:	d01e      	beq.n	800166e <HAL_TIM_IC_Init+0x5e>
 8001630:	2180      	movs	r1, #128	; 0x80
 8001632:	05c9      	lsls	r1, r1, #23
 8001634:	428b      	cmp	r3, r1
 8001636:	d033      	beq.n	80016a0 <HAL_TIM_IC_Init+0x90>
 8001638:	4928      	ldr	r1, [pc, #160]	; (80016dc <HAL_TIM_IC_Init+0xcc>)
 800163a:	428b      	cmp	r3, r1
 800163c:	d030      	beq.n	80016a0 <HAL_TIM_IC_Init+0x90>
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800163e:	4928      	ldr	r1, [pc, #160]	; (80016e0 <HAL_TIM_IC_Init+0xd0>)
 8001640:	428b      	cmp	r3, r1
 8001642:	d042      	beq.n	80016ca <HAL_TIM_IC_Init+0xba>
 8001644:	4927      	ldr	r1, [pc, #156]	; (80016e4 <HAL_TIM_IC_Init+0xd4>)
 8001646:	428b      	cmp	r3, r1
 8001648:	d015      	beq.n	8001676 <HAL_TIM_IC_Init+0x66>
 800164a:	4927      	ldr	r1, [pc, #156]	; (80016e8 <HAL_TIM_IC_Init+0xd8>)
 800164c:	428b      	cmp	r3, r1
 800164e:	d012      	beq.n	8001676 <HAL_TIM_IC_Init+0x66>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001650:	2180      	movs	r1, #128	; 0x80
 8001652:	438a      	bics	r2, r1
 8001654:	69a1      	ldr	r1, [r4, #24]
 8001656:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001658:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800165a:	68e2      	ldr	r2, [r4, #12]
 800165c:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800165e:	6862      	ldr	r2, [r4, #4]
 8001660:	629a      	str	r2, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8001662:	2201      	movs	r2, #1
 8001664:	615a      	str	r2, [r3, #20]
  htim->State= HAL_TIM_STATE_READY;
 8001666:	233d      	movs	r3, #61	; 0x3d
  return HAL_OK;
 8001668:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 800166a:	54e2      	strb	r2, [r4, r3]
}
 800166c:	bd10      	pop	{r4, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800166e:	2170      	movs	r1, #112	; 0x70
 8001670:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 8001672:	68a1      	ldr	r1, [r4, #8]
 8001674:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 8001676:	491d      	ldr	r1, [pc, #116]	; (80016ec <HAL_TIM_IC_Init+0xdc>)
 8001678:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800167a:	6921      	ldr	r1, [r4, #16]
 800167c:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800167e:	2180      	movs	r1, #128	; 0x80
 8001680:	438a      	bics	r2, r1
 8001682:	69a1      	ldr	r1, [r4, #24]
 8001684:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 8001686:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001688:	68e2      	ldr	r2, [r4, #12]
 800168a:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800168c:	6862      	ldr	r2, [r4, #4]
 800168e:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8001690:	6962      	ldr	r2, [r4, #20]
 8001692:	631a      	str	r2, [r3, #48]	; 0x30
 8001694:	e7e5      	b.n	8001662 <HAL_TIM_IC_Init+0x52>
    htim->Lock = HAL_UNLOCKED;
 8001696:	223c      	movs	r2, #60	; 0x3c
 8001698:	5483      	strb	r3, [r0, r2]
    HAL_TIM_IC_MspInit(htim);
 800169a:	f7ff ffb7 	bl	800160c <HAL_TIM_IC_MspInit>
 800169e:	e7bf      	b.n	8001620 <HAL_TIM_IC_Init+0x10>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016a0:	2170      	movs	r1, #112	; 0x70
 80016a2:	438a      	bics	r2, r1
    tmpcr1 |= Structure->CounterMode;
 80016a4:	68a1      	ldr	r1, [r4, #8]
 80016a6:	430a      	orrs	r2, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 80016a8:	4910      	ldr	r1, [pc, #64]	; (80016ec <HAL_TIM_IC_Init+0xdc>)
 80016aa:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016ac:	6921      	ldr	r1, [r4, #16]
 80016ae:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80016b0:	2180      	movs	r1, #128	; 0x80
 80016b2:	438a      	bics	r2, r1
 80016b4:	69a1      	ldr	r1, [r4, #24]
 80016b6:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 80016b8:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80016ba:	68e2      	ldr	r2, [r4, #12]
 80016bc:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80016be:	6862      	ldr	r2, [r4, #4]
 80016c0:	629a      	str	r2, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80016c2:	4a09      	ldr	r2, [pc, #36]	; (80016e8 <HAL_TIM_IC_Init+0xd8>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d1cc      	bne.n	8001662 <HAL_TIM_IC_Init+0x52>
 80016c8:	e7e2      	b.n	8001690 <HAL_TIM_IC_Init+0x80>
    tmpcr1 &= ~TIM_CR1_CKD;
 80016ca:	4908      	ldr	r1, [pc, #32]	; (80016ec <HAL_TIM_IC_Init+0xdc>)
 80016cc:	400a      	ands	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80016ce:	6921      	ldr	r1, [r4, #16]
 80016d0:	430a      	orrs	r2, r1
 80016d2:	e7bd      	b.n	8001650 <HAL_TIM_IC_Init+0x40>
    return HAL_ERROR;
 80016d4:	2001      	movs	r0, #1
 80016d6:	e7c9      	b.n	800166c <HAL_TIM_IC_Init+0x5c>
 80016d8:	40012c00 	.word	0x40012c00
 80016dc:	40000400 	.word	0x40000400
 80016e0:	40002000 	.word	0x40002000
 80016e4:	40014400 	.word	0x40014400
 80016e8:	40014800 	.word	0x40014800
 80016ec:	fffffcff 	.word	0xfffffcff

080016f0 <HAL_TIM_IC_Start_DMA>:
{
 80016f0:	b570      	push	{r4, r5, r6, lr}
 80016f2:	000d      	movs	r5, r1
  if((htim->State == HAL_TIM_STATE_BUSY))
 80016f4:	213d      	movs	r1, #61	; 0x3d
 80016f6:	5c46      	ldrb	r6, [r0, r1]
{
 80016f8:	0004      	movs	r4, r0
     return HAL_BUSY;
 80016fa:	2002      	movs	r0, #2
  if((htim->State == HAL_TIM_STATE_BUSY))
 80016fc:	2e02      	cmp	r6, #2
 80016fe:	d026      	beq.n	800174e <HAL_TIM_IC_Start_DMA+0x5e>
  else if((htim->State == HAL_TIM_STATE_READY))
 8001700:	5c61      	ldrb	r1, [r4, r1]
 8001702:	2901      	cmp	r1, #1
 8001704:	d024      	beq.n	8001750 <HAL_TIM_IC_Start_DMA+0x60>
  switch (Channel)
 8001706:	2d04      	cmp	r5, #4
 8001708:	d03a      	beq.n	8001780 <HAL_TIM_IC_Start_DMA+0x90>
 800170a:	2d04      	cmp	r5, #4
 800170c:	d948      	bls.n	80017a0 <HAL_TIM_IC_Start_DMA+0xb0>
 800170e:	2d08      	cmp	r5, #8
 8001710:	d026      	beq.n	8001760 <HAL_TIM_IC_Start_DMA+0x70>
 8001712:	2d0c      	cmp	r5, #12
 8001714:	d156      	bne.n	80017c4 <HAL_TIM_IC_Start_DMA+0xd4>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8001716:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001718:	492d      	ldr	r1, [pc, #180]	; (80017d0 <HAL_TIM_IC_Start_DMA+0xe0>)
 800171a:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800171c:	492d      	ldr	r1, [pc, #180]	; (80017d4 <HAL_TIM_IC_Start_DMA+0xe4>)
 800171e:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length);
 8001720:	6821      	ldr	r1, [r4, #0]
 8001722:	3140      	adds	r1, #64	; 0x40
 8001724:	f7ff f96e 	bl	8000a04 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8001728:	2280      	movs	r2, #128	; 0x80
 800172a:	6823      	ldr	r3, [r4, #0]
 800172c:	0152      	lsls	r2, r2, #5
 800172e:	68d9      	ldr	r1, [r3, #12]
 8001730:	430a      	orrs	r2, r1
 8001732:	60da      	str	r2, [r3, #12]
  tmp = TIM_CCER_CC1E << Channel;
 8001734:	2001      	movs	r0, #1
 8001736:	0002      	movs	r2, r0
 8001738:	40aa      	lsls	r2, r5
  TIMx->CCER &= ~tmp;
 800173a:	6a19      	ldr	r1, [r3, #32]
 800173c:	4391      	bics	r1, r2
 800173e:	6219      	str	r1, [r3, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001740:	6a19      	ldr	r1, [r3, #32]
 8001742:	430a      	orrs	r2, r1
 8001744:	621a      	str	r2, [r3, #32]
  __HAL_TIM_ENABLE(htim);
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4302      	orrs	r2, r0
  return HAL_OK;
 800174a:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 800174c:	601a      	str	r2, [r3, #0]
}
 800174e:	bd70      	pop	{r4, r5, r6, pc}
    if((pData == 0U ) && (Length > 0U))
 8001750:	2a00      	cmp	r2, #0
 8001752:	d039      	beq.n	80017c8 <HAL_TIM_IC_Start_DMA+0xd8>
      htim->State = HAL_TIM_STATE_BUSY;
 8001754:	2002      	movs	r0, #2
 8001756:	213d      	movs	r1, #61	; 0x3d
 8001758:	5460      	strb	r0, [r4, r1]
  switch (Channel)
 800175a:	2d04      	cmp	r5, #4
 800175c:	d1d5      	bne.n	800170a <HAL_TIM_IC_Start_DMA+0x1a>
 800175e:	e00f      	b.n	8001780 <HAL_TIM_IC_Start_DMA+0x90>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8001760:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001762:	491b      	ldr	r1, [pc, #108]	; (80017d0 <HAL_TIM_IC_Start_DMA+0xe0>)
 8001764:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8001766:	491b      	ldr	r1, [pc, #108]	; (80017d4 <HAL_TIM_IC_Start_DMA+0xe4>)
 8001768:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length);
 800176a:	6821      	ldr	r1, [r4, #0]
 800176c:	313c      	adds	r1, #60	; 0x3c
 800176e:	f7ff f949 	bl	8000a04 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8001772:	2280      	movs	r2, #128	; 0x80
 8001774:	6823      	ldr	r3, [r4, #0]
 8001776:	0112      	lsls	r2, r2, #4
 8001778:	68d9      	ldr	r1, [r3, #12]
 800177a:	430a      	orrs	r2, r1
 800177c:	60da      	str	r2, [r3, #12]
    break;
 800177e:	e7d9      	b.n	8001734 <HAL_TIM_IC_Start_DMA+0x44>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8001780:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001782:	4913      	ldr	r1, [pc, #76]	; (80017d0 <HAL_TIM_IC_Start_DMA+0xe0>)
 8001784:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8001786:	4913      	ldr	r1, [pc, #76]	; (80017d4 <HAL_TIM_IC_Start_DMA+0xe4>)
 8001788:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length);
 800178a:	6821      	ldr	r1, [r4, #0]
 800178c:	3138      	adds	r1, #56	; 0x38
 800178e:	f7ff f939 	bl	8000a04 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8001792:	2280      	movs	r2, #128	; 0x80
 8001794:	6823      	ldr	r3, [r4, #0]
 8001796:	00d2      	lsls	r2, r2, #3
 8001798:	68d9      	ldr	r1, [r3, #12]
 800179a:	430a      	orrs	r2, r1
 800179c:	60da      	str	r2, [r3, #12]
    break;
 800179e:	e7c9      	b.n	8001734 <HAL_TIM_IC_Start_DMA+0x44>
  switch (Channel)
 80017a0:	2d00      	cmp	r5, #0
 80017a2:	d10f      	bne.n	80017c4 <HAL_TIM_IC_Start_DMA+0xd4>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 80017a4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80017a6:	490a      	ldr	r1, [pc, #40]	; (80017d0 <HAL_TIM_IC_Start_DMA+0xe0>)
 80017a8:	6281      	str	r1, [r0, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80017aa:	490a      	ldr	r1, [pc, #40]	; (80017d4 <HAL_TIM_IC_Start_DMA+0xe4>)
 80017ac:	6301      	str	r1, [r0, #48]	; 0x30
      HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length);
 80017ae:	6821      	ldr	r1, [r4, #0]
 80017b0:	3134      	adds	r1, #52	; 0x34
 80017b2:	f7ff f927 	bl	8000a04 <HAL_DMA_Start_IT>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80017b6:	2280      	movs	r2, #128	; 0x80
 80017b8:	6823      	ldr	r3, [r4, #0]
 80017ba:	0092      	lsls	r2, r2, #2
 80017bc:	68d9      	ldr	r1, [r3, #12]
 80017be:	430a      	orrs	r2, r1
 80017c0:	60da      	str	r2, [r3, #12]
    break;
 80017c2:	e7b7      	b.n	8001734 <HAL_TIM_IC_Start_DMA+0x44>
 80017c4:	6823      	ldr	r3, [r4, #0]
 80017c6:	e7b5      	b.n	8001734 <HAL_TIM_IC_Start_DMA+0x44>
      return HAL_ERROR;
 80017c8:	3801      	subs	r0, #1
    if((pData == 0U ) && (Length > 0U))
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0c2      	beq.n	8001754 <HAL_TIM_IC_Start_DMA+0x64>
 80017ce:	e7be      	b.n	800174e <HAL_TIM_IC_Start_DMA+0x5e>
 80017d0:	08001d65 	.word	0x08001d65
 80017d4:	08001f09 	.word	0x08001f09

080017d8 <HAL_TIM_IC_ConfigChannel>:
{
 80017d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017da:	46ce      	mov	lr, r9
 80017dc:	4647      	mov	r7, r8
  __HAL_LOCK(htim);
 80017de:	243c      	movs	r4, #60	; 0x3c
{
 80017e0:	b580      	push	{r7, lr}
  __HAL_LOCK(htim);
 80017e2:	5d05      	ldrb	r5, [r0, r4]
{
 80017e4:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 80017e6:	2002      	movs	r0, #2
 80017e8:	2d01      	cmp	r5, #1
 80017ea:	d038      	beq.n	800185e <HAL_TIM_IC_ConfigChannel+0x86>
 80017ec:	2501      	movs	r5, #1
 80017ee:	551d      	strb	r5, [r3, r4]
  htim->State = HAL_TIM_STATE_BUSY;
 80017f0:	3401      	adds	r4, #1
 80017f2:	5518      	strb	r0, [r3, r4]
  if (Channel == TIM_CHANNEL_1)
 80017f4:	2a00      	cmp	r2, #0
 80017f6:	d036      	beq.n	8001866 <HAL_TIM_IC_ConfigChannel+0x8e>
  else if (Channel == TIM_CHANNEL_2)
 80017f8:	2a04      	cmp	r2, #4
 80017fa:	d060      	beq.n	80018be <HAL_TIM_IC_ConfigChannel+0xe6>
  else if (Channel == TIM_CHANNEL_3)
 80017fc:	2a08      	cmp	r2, #8
 80017fe:	d100      	bne.n	8001802 <HAL_TIM_IC_ConfigChannel+0x2a>
 8001800:	e083      	b.n	800190a <HAL_TIM_IC_ConfigChannel+0x132>
    TIM_TI4_SetConfig(htim->Instance,
 8001802:	6808      	ldr	r0, [r1, #0]
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	4680      	mov	r8, r0
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001808:	6a16      	ldr	r6, [r2, #32]
 800180a:	4f56      	ldr	r7, [pc, #344]	; (8001964 <HAL_TIM_IC_ConfigChannel+0x18c>)
    TIM_TI4_SetConfig(htim->Instance,
 800180c:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800180e:	403e      	ands	r6, r7
    TIM_TI4_SetConfig(htim->Instance,
 8001810:	68cc      	ldr	r4, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001812:	6216      	str	r6, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001814:	69d7      	ldr	r7, [r2, #28]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8001816:	4854      	ldr	r0, [pc, #336]	; (8001968 <HAL_TIM_IC_ConfigChannel+0x190>)
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8001818:	022d      	lsls	r5, r5, #8
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800181a:	4007      	ands	r7, r0
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800181c:	433d      	orrs	r5, r7
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800181e:	4f53      	ldr	r7, [pc, #332]	; (800196c <HAL_TIM_IC_ConfigChannel+0x194>)
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001820:	0724      	lsls	r4, r4, #28
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8001822:	403d      	ands	r5, r7
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001824:	0c24      	lsrs	r4, r4, #16
  tmpccer = TIMx->CCER;
 8001826:	6a16      	ldr	r6, [r2, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8001828:	432c      	orrs	r4, r5
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800182a:	4d51      	ldr	r5, [pc, #324]	; (8001970 <HAL_TIM_IC_ConfigChannel+0x198>)
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800182c:	4640      	mov	r0, r8
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800182e:	4035      	ands	r5, r6
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8001830:	26a0      	movs	r6, #160	; 0xa0
 8001832:	0300      	lsls	r0, r0, #12
 8001834:	0236      	lsls	r6, r6, #8
 8001836:	4030      	ands	r0, r6
 8001838:	4328      	orrs	r0, r5
  TIMx->CCMR2 = tmpccmr2;
 800183a:	61d4      	str	r4, [r2, #28]
  TIMx->CCER = tmpccer ;
 800183c:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800183e:	69d0      	ldr	r0, [r2, #28]
 8001840:	4c4c      	ldr	r4, [pc, #304]	; (8001974 <HAL_TIM_IC_ConfigChannel+0x19c>)
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001842:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8001844:	4020      	ands	r0, r4
 8001846:	61d0      	str	r0, [r2, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8001848:	69d0      	ldr	r0, [r2, #28]
 800184a:	0209      	lsls	r1, r1, #8
 800184c:	4301      	orrs	r1, r0
 800184e:	61d1      	str	r1, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 8001850:	2101      	movs	r1, #1
 8001852:	223d      	movs	r2, #61	; 0x3d
 8001854:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(htim);
 8001856:	2100      	movs	r1, #0
  return HAL_OK;
 8001858:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 800185a:	3a01      	subs	r2, #1
 800185c:	5499      	strb	r1, [r3, r2]
}
 800185e:	bc0c      	pop	{r2, r3}
 8001860:	4690      	mov	r8, r2
 8001862:	4699      	mov	r9, r3
 8001864:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	6848      	ldr	r0, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800186a:	6a14      	ldr	r4, [r2, #32]
    TIM_TI1_SetConfig(htim->Instance,
 800186c:	4680      	mov	r8, r0
 800186e:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001870:	43ac      	bics	r4, r5
    TIM_TI1_SetConfig(htim->Instance,
 8001872:	4681      	mov	r9, r0
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8001874:	4840      	ldr	r0, [pc, #256]	; (8001978 <HAL_TIM_IC_ConfigChannel+0x1a0>)
    TIM_TI1_SetConfig(htim->Instance,
 8001876:	680f      	ldr	r7, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001878:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 800187a:	6994      	ldr	r4, [r2, #24]
  tmpccer = TIMx->CCER;
 800187c:	6a16      	ldr	r6, [r2, #32]
  if(IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800187e:	4282      	cmp	r2, r0
 8001880:	d06a      	beq.n	8001958 <HAL_TIM_IC_ConfigChannel+0x180>
 8001882:	2080      	movs	r0, #128	; 0x80
 8001884:	05c0      	lsls	r0, r0, #23
 8001886:	4282      	cmp	r2, r0
 8001888:	d066      	beq.n	8001958 <HAL_TIM_IC_ConfigChannel+0x180>
 800188a:	483c      	ldr	r0, [pc, #240]	; (800197c <HAL_TIM_IC_ConfigChannel+0x1a4>)
 800188c:	4282      	cmp	r2, r0
 800188e:	d063      	beq.n	8001958 <HAL_TIM_IC_ConfigChannel+0x180>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8001890:	4325      	orrs	r5, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001892:	24f0      	movs	r4, #240	; 0xf0
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001894:	4648      	mov	r0, r9
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001896:	43a5      	bics	r5, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8001898:	0100      	lsls	r0, r0, #4
 800189a:	340f      	adds	r4, #15
 800189c:	4004      	ands	r4, r0
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800189e:	200a      	movs	r0, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80018a0:	4325      	orrs	r5, r4
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80018a2:	240c      	movs	r4, #12
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80018a4:	4386      	bics	r6, r0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80018a6:	4038      	ands	r0, r7
 80018a8:	4330      	orrs	r0, r6
  TIMx->CCMR1 = tmpccmr1;
 80018aa:	6195      	str	r5, [r2, #24]
  TIMx->CCER = tmpccer;
 80018ac:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80018ae:	6990      	ldr	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80018b0:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80018b2:	43a0      	bics	r0, r4
 80018b4:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80018b6:	6990      	ldr	r0, [r2, #24]
 80018b8:	4301      	orrs	r1, r0
 80018ba:	6191      	str	r1, [r2, #24]
 80018bc:	e7c8      	b.n	8001850 <HAL_TIM_IC_ConfigChannel+0x78>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80018be:	2710      	movs	r7, #16
    TIM_TI2_SetConfig(htim->Instance,
 80018c0:	68c8      	ldr	r0, [r1, #12]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4680      	mov	r8, r0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80018c6:	6a15      	ldr	r5, [r2, #32]
    TIM_TI2_SetConfig(htim->Instance,
 80018c8:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80018ca:	43bd      	bics	r5, r7
    TIM_TI2_SetConfig(htim->Instance,
 80018cc:	684c      	ldr	r4, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80018ce:	6215      	str	r5, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 80018d0:	6997      	ldr	r7, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80018d2:	4825      	ldr	r0, [pc, #148]	; (8001968 <HAL_TIM_IC_ConfigChannel+0x190>)
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80018d4:	0224      	lsls	r4, r4, #8
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80018d6:	4007      	ands	r7, r0
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80018d8:	4640      	mov	r0, r8
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80018da:	433c      	orrs	r4, r7
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80018dc:	4f23      	ldr	r7, [pc, #140]	; (800196c <HAL_TIM_IC_ConfigChannel+0x194>)
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80018de:	0700      	lsls	r0, r0, #28
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80018e0:	403c      	ands	r4, r7
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80018e2:	0c00      	lsrs	r0, r0, #16
 80018e4:	4320      	orrs	r0, r4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80018e6:	24a0      	movs	r4, #160	; 0xa0
  tmpccer = TIMx->CCER;
 80018e8:	6a15      	ldr	r5, [r2, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80018ea:	0136      	lsls	r6, r6, #4
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80018ec:	43a5      	bics	r5, r4
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80018ee:	4034      	ands	r4, r6
 80018f0:	4325      	orrs	r5, r4
  TIMx->CCMR1 = tmpccmr1 ;
 80018f2:	6190      	str	r0, [r2, #24]
  TIMx->CCER = tmpccer;
 80018f4:	6215      	str	r5, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80018f6:	6990      	ldr	r0, [r2, #24]
 80018f8:	4c1e      	ldr	r4, [pc, #120]	; (8001974 <HAL_TIM_IC_ConfigChannel+0x19c>)
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80018fa:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80018fc:	4020      	ands	r0, r4
 80018fe:	6190      	str	r0, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8001900:	6990      	ldr	r0, [r2, #24]
 8001902:	0209      	lsls	r1, r1, #8
 8001904:	4301      	orrs	r1, r0
 8001906:	6191      	str	r1, [r2, #24]
 8001908:	e7a2      	b.n	8001850 <HAL_TIM_IC_ConfigChannel+0x78>
    TIM_TI3_SetConfig(htim->Instance,
 800190a:	6808      	ldr	r0, [r1, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	4680      	mov	r8, r0
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001910:	2003      	movs	r0, #3
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001912:	6a16      	ldr	r6, [r2, #32]
 8001914:	4f1a      	ldr	r7, [pc, #104]	; (8001980 <HAL_TIM_IC_ConfigChannel+0x1a8>)
    TIM_TI3_SetConfig(htim->Instance,
 8001916:	68cc      	ldr	r4, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001918:	403e      	ands	r6, r7
    TIM_TI3_SetConfig(htim->Instance,
 800191a:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800191c:	6216      	str	r6, [r2, #32]
  tmpccmr2 = TIMx->CCMR2;
 800191e:	69d7      	ldr	r7, [r2, #28]
  tmpccer = TIMx->CCER;
 8001920:	6a16      	ldr	r6, [r2, #32]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8001922:	4387      	bics	r7, r0
  tmpccmr2 |= TIM_ICSelection;
 8001924:	433d      	orrs	r5, r7
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8001926:	27f0      	movs	r7, #240	; 0xf0
 8001928:	43bd      	bics	r5, r7
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800192a:	0127      	lsls	r7, r4, #4
 800192c:	24ff      	movs	r4, #255	; 0xff
 800192e:	403c      	ands	r4, r7
 8001930:	432c      	orrs	r4, r5
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001932:	4d14      	ldr	r5, [pc, #80]	; (8001984 <HAL_TIM_IC_ConfigChannel+0x1ac>)
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001934:	4640      	mov	r0, r8
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8001936:	4035      	ands	r5, r6
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001938:	26a0      	movs	r6, #160	; 0xa0
  TIMx->CCMR2 = tmpccmr2;
 800193a:	61d4      	str	r4, [r2, #28]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800193c:	240c      	movs	r4, #12
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800193e:	0200      	lsls	r0, r0, #8
 8001940:	0136      	lsls	r6, r6, #4
 8001942:	4030      	ands	r0, r6
 8001944:	4328      	orrs	r0, r5
  TIMx->CCER = tmpccer;
 8001946:	6210      	str	r0, [r2, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8001948:	69d0      	ldr	r0, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800194a:	6889      	ldr	r1, [r1, #8]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800194c:	43a0      	bics	r0, r4
 800194e:	61d0      	str	r0, [r2, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8001950:	69d0      	ldr	r0, [r2, #28]
 8001952:	4301      	orrs	r1, r0
 8001954:	61d1      	str	r1, [r2, #28]
 8001956:	e77b      	b.n	8001850 <HAL_TIM_IC_ConfigChannel+0x78>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8001958:	2503      	movs	r5, #3
    tmpccmr1 |= TIM_ICSelection;
 800195a:	4640      	mov	r0, r8
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800195c:	43ac      	bics	r4, r5
    tmpccmr1 |= TIM_ICSelection;
 800195e:	4320      	orrs	r0, r4
 8001960:	0005      	movs	r5, r0
 8001962:	e796      	b.n	8001892 <HAL_TIM_IC_ConfigChannel+0xba>
 8001964:	ffffefff 	.word	0xffffefff
 8001968:	fffffcff 	.word	0xfffffcff
 800196c:	ffff0fff 	.word	0xffff0fff
 8001970:	ffff5fff 	.word	0xffff5fff
 8001974:	fffff3ff 	.word	0xfffff3ff
 8001978:	40012c00 	.word	0x40012c00
 800197c:	40000400 	.word	0x40000400
 8001980:	fffffeff 	.word	0xfffffeff
 8001984:	fffff5ff 	.word	0xfffff5ff

08001988 <HAL_TIM_PWM_ConfigChannel>:
{
 8001988:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800198a:	243c      	movs	r4, #60	; 0x3c
 800198c:	5d05      	ldrb	r5, [r0, r4]
{
 800198e:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8001990:	2002      	movs	r0, #2
 8001992:	2d01      	cmp	r5, #1
 8001994:	d044      	beq.n	8001a20 <HAL_TIM_PWM_ConfigChannel+0x98>
 8001996:	2501      	movs	r5, #1
 8001998:	551d      	strb	r5, [r3, r4]
  htim->State = HAL_TIM_STATE_BUSY;
 800199a:	3401      	adds	r4, #1
 800199c:	5518      	strb	r0, [r3, r4]
  switch (Channel)
 800199e:	2a04      	cmp	r2, #4
 80019a0:	d100      	bne.n	80019a4 <HAL_TIM_PWM_ConfigChannel+0x1c>
 80019a2:	e06d      	b.n	8001a80 <HAL_TIM_PWM_ConfigChannel+0xf8>
 80019a4:	d800      	bhi.n	80019a8 <HAL_TIM_PWM_ConfigChannel+0x20>
 80019a6:	e09a      	b.n	8001ade <HAL_TIM_PWM_ConfigChannel+0x156>
 80019a8:	2a08      	cmp	r2, #8
 80019aa:	d03a      	beq.n	8001a22 <HAL_TIM_PWM_ConfigChannel+0x9a>
 80019ac:	2a0c      	cmp	r2, #12
 80019ae:	d130      	bne.n	8001a12 <HAL_TIM_PWM_ConfigChannel+0x8a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80019b0:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80019b2:	4c7a      	ldr	r4, [pc, #488]	; (8001b9c <HAL_TIM_PWM_ConfigChannel+0x214>)
 80019b4:	6a10      	ldr	r0, [r2, #32]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80019b6:	4d7a      	ldr	r5, [pc, #488]	; (8001ba0 <HAL_TIM_PWM_ConfigChannel+0x218>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80019b8:	4020      	ands	r0, r4
 80019ba:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 80019bc:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 80019be:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 80019c0:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80019c2:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80019c4:	680d      	ldr	r5, [r1, #0]
 80019c6:	022d      	lsls	r5, r5, #8
 80019c8:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC4P;
 80019ca:	4c76      	ldr	r4, [pc, #472]	; (8001ba4 <HAL_TIM_PWM_ConfigChannel+0x21c>)
 80019cc:	4004      	ands	r4, r0
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80019ce:	6888      	ldr	r0, [r1, #8]
 80019d0:	0300      	lsls	r0, r0, #12
 80019d2:	4320      	orrs	r0, r4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 80019d4:	4c74      	ldr	r4, [pc, #464]	; (8001ba8 <HAL_TIM_PWM_ConfigChannel+0x220>)
 80019d6:	42a2      	cmp	r2, r4
 80019d8:	d100      	bne.n	80019dc <HAL_TIM_PWM_ConfigChannel+0x54>
 80019da:	e0ac      	b.n	8001b36 <HAL_TIM_PWM_ConfigChannel+0x1ae>
 80019dc:	4c73      	ldr	r4, [pc, #460]	; (8001bac <HAL_TIM_PWM_ConfigChannel+0x224>)
 80019de:	42a2      	cmp	r2, r4
 80019e0:	d100      	bne.n	80019e4 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80019e2:	e0a8      	b.n	8001b36 <HAL_TIM_PWM_ConfigChannel+0x1ae>
 80019e4:	4c72      	ldr	r4, [pc, #456]	; (8001bb0 <HAL_TIM_PWM_ConfigChannel+0x228>)
 80019e6:	42a2      	cmp	r2, r4
 80019e8:	d100      	bne.n	80019ec <HAL_TIM_PWM_ConfigChannel+0x64>
 80019ea:	e0a4      	b.n	8001b36 <HAL_TIM_PWM_ConfigChannel+0x1ae>
  TIMx->CCR4 = OC_Config->Pulse;
 80019ec:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80019ee:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 80019f0:	61d5      	str	r5, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80019f2:	6414      	str	r4, [r2, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80019f4:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80019f6:	2080      	movs	r0, #128	; 0x80
 80019f8:	69d4      	ldr	r4, [r2, #28]
 80019fa:	0100      	lsls	r0, r0, #4
 80019fc:	4320      	orrs	r0, r4
 80019fe:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001a00:	69d0      	ldr	r0, [r2, #28]
 8001a02:	4c6c      	ldr	r4, [pc, #432]	; (8001bb4 <HAL_TIM_PWM_ConfigChannel+0x22c>)
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001a04:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001a06:	4020      	ands	r0, r4
 8001a08:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001a0a:	69d0      	ldr	r0, [r2, #28]
 8001a0c:	0209      	lsls	r1, r1, #8
 8001a0e:	4301      	orrs	r1, r0
 8001a10:	61d1      	str	r1, [r2, #28]
  htim->State = HAL_TIM_STATE_READY;
 8001a12:	2101      	movs	r1, #1
 8001a14:	223d      	movs	r2, #61	; 0x3d
 8001a16:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(htim);
 8001a18:	2100      	movs	r1, #0
  return HAL_OK;
 8001a1a:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8001a1c:	3a01      	subs	r2, #1
 8001a1e:	5499      	strb	r1, [r3, r2]
}
 8001a20:	bdf0      	pop	{r4, r5, r6, r7, pc}
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001a22:	2573      	movs	r5, #115	; 0x73
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001a24:	681a      	ldr	r2, [r3, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001a26:	4c64      	ldr	r4, [pc, #400]	; (8001bb8 <HAL_TIM_PWM_ConfigChannel+0x230>)
 8001a28:	6a10      	ldr	r0, [r2, #32]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001a2a:	4f5f      	ldr	r7, [pc, #380]	; (8001ba8 <HAL_TIM_PWM_ConfigChannel+0x220>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001a2c:	4020      	ands	r0, r4
 8001a2e:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8001a30:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001a32:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8001a34:	69d4      	ldr	r4, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001a36:	43ac      	bics	r4, r5
  tmpccmrx |= OC_Config->OCMode;
 8001a38:	680d      	ldr	r5, [r1, #0]
 8001a3a:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC3P;
 8001a3c:	4c5f      	ldr	r4, [pc, #380]	; (8001bbc <HAL_TIM_PWM_ConfigChannel+0x234>)
 8001a3e:	4020      	ands	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001a40:	688c      	ldr	r4, [r1, #8]
 8001a42:	0224      	lsls	r4, r4, #8
 8001a44:	4320      	orrs	r0, r4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001a46:	42ba      	cmp	r2, r7
 8001a48:	d100      	bne.n	8001a4c <HAL_TIM_PWM_ConfigChannel+0xc4>
 8001a4a:	e08a      	b.n	8001b62 <HAL_TIM_PWM_ConfigChannel+0x1da>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001a4c:	4f57      	ldr	r7, [pc, #348]	; (8001bac <HAL_TIM_PWM_ConfigChannel+0x224>)
 8001a4e:	42ba      	cmp	r2, r7
 8001a50:	d100      	bne.n	8001a54 <HAL_TIM_PWM_ConfigChannel+0xcc>
 8001a52:	e08d      	b.n	8001b70 <HAL_TIM_PWM_ConfigChannel+0x1e8>
 8001a54:	4f56      	ldr	r7, [pc, #344]	; (8001bb0 <HAL_TIM_PWM_ConfigChannel+0x228>)
 8001a56:	42ba      	cmp	r2, r7
 8001a58:	d100      	bne.n	8001a5c <HAL_TIM_PWM_ConfigChannel+0xd4>
 8001a5a:	e089      	b.n	8001b70 <HAL_TIM_PWM_ConfigChannel+0x1e8>
  TIMx->CCR3 = OC_Config->Pulse;
 8001a5c:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001a5e:	6056      	str	r6, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8001a60:	61d5      	str	r5, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8001a62:	63d4      	str	r4, [r2, #60]	; 0x3c
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001a64:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8001a66:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001a68:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001a6a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001a6c:	4320      	orrs	r0, r4
 8001a6e:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001a70:	69d0      	ldr	r0, [r2, #28]
 8001a72:	3c04      	subs	r4, #4
 8001a74:	43a0      	bics	r0, r4
 8001a76:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001a78:	69d0      	ldr	r0, [r2, #28]
 8001a7a:	4301      	orrs	r1, r0
 8001a7c:	61d1      	str	r1, [r2, #28]
    break;
 8001a7e:	e7c8      	b.n	8001a12 <HAL_TIM_PWM_ConfigChannel+0x8a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a80:	2410      	movs	r4, #16
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001a82:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001a84:	4d46      	ldr	r5, [pc, #280]	; (8001ba0 <HAL_TIM_PWM_ConfigChannel+0x218>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a86:	6a10      	ldr	r0, [r2, #32]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001a88:	4f47      	ldr	r7, [pc, #284]	; (8001ba8 <HAL_TIM_PWM_ConfigChannel+0x220>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001a8a:	43a0      	bics	r0, r4
 8001a8c:	6210      	str	r0, [r2, #32]
  tmpccer = TIMx->CCER;
 8001a8e:	6a10      	ldr	r0, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001a90:	6856      	ldr	r6, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8001a92:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001a94:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001a96:	680d      	ldr	r5, [r1, #0]
 8001a98:	022d      	lsls	r5, r5, #8
 8001a9a:	4325      	orrs	r5, r4
  tmpccer &= ~TIM_CCER_CC2P;
 8001a9c:	2420      	movs	r4, #32
 8001a9e:	43a0      	bics	r0, r4
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001aa0:	688c      	ldr	r4, [r1, #8]
 8001aa2:	0124      	lsls	r4, r4, #4
 8001aa4:	4320      	orrs	r0, r4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001aa6:	42ba      	cmp	r2, r7
 8001aa8:	d04b      	beq.n	8001b42 <HAL_TIM_PWM_ConfigChannel+0x1ba>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001aaa:	4f40      	ldr	r7, [pc, #256]	; (8001bac <HAL_TIM_PWM_ConfigChannel+0x224>)
 8001aac:	42ba      	cmp	r2, r7
 8001aae:	d050      	beq.n	8001b52 <HAL_TIM_PWM_ConfigChannel+0x1ca>
 8001ab0:	4f3f      	ldr	r7, [pc, #252]	; (8001bb0 <HAL_TIM_PWM_ConfigChannel+0x228>)
 8001ab2:	42ba      	cmp	r2, r7
 8001ab4:	d04d      	beq.n	8001b52 <HAL_TIM_PWM_ConfigChannel+0x1ca>
  TIMx->CCR2 = OC_Config->Pulse;
 8001ab6:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001ab8:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001aba:	6195      	str	r5, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001abc:	6394      	str	r4, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001abe:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001ac0:	2080      	movs	r0, #128	; 0x80
 8001ac2:	6994      	ldr	r4, [r2, #24]
 8001ac4:	0100      	lsls	r0, r0, #4
 8001ac6:	4320      	orrs	r0, r4
 8001ac8:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001aca:	6990      	ldr	r0, [r2, #24]
 8001acc:	4c39      	ldr	r4, [pc, #228]	; (8001bb4 <HAL_TIM_PWM_ConfigChannel+0x22c>)
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ace:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001ad0:	4020      	ands	r0, r4
 8001ad2:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001ad4:	6990      	ldr	r0, [r2, #24]
 8001ad6:	0209      	lsls	r1, r1, #8
 8001ad8:	4301      	orrs	r1, r0
 8001ada:	6191      	str	r1, [r2, #24]
    break;
 8001adc:	e799      	b.n	8001a12 <HAL_TIM_PWM_ConfigChannel+0x8a>
  switch (Channel)
 8001ade:	2a00      	cmp	r2, #0
 8001ae0:	d197      	bne.n	8001a12 <HAL_TIM_PWM_ConfigChannel+0x8a>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ae2:	681a      	ldr	r2, [r3, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001ae4:	2773      	movs	r7, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ae6:	6a14      	ldr	r4, [r2, #32]
 8001ae8:	43ac      	bics	r4, r5
 8001aea:	6214      	str	r4, [r2, #32]
  tmpccer = TIMx->CCER;
 8001aec:	6a14      	ldr	r4, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8001aee:	6856      	ldr	r6, [r2, #4]
  tmpccer &= ~TIM_CCER_CC1P;
 8001af0:	4384      	bics	r4, r0
 8001af2:	0020      	movs	r0, r4
  tmpccmrx = TIMx->CCMR1;
 8001af4:	6995      	ldr	r5, [r2, #24]
  tmpccer |= OC_Config->OCPolarity;
 8001af6:	688c      	ldr	r4, [r1, #8]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001af8:	43bd      	bics	r5, r7
  tmpccer |= OC_Config->OCPolarity;
 8001afa:	4320      	orrs	r0, r4
  tmpccmrx |= OC_Config->OCMode;
 8001afc:	680f      	ldr	r7, [r1, #0]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001afe:	4c2a      	ldr	r4, [pc, #168]	; (8001ba8 <HAL_TIM_PWM_ConfigChannel+0x220>)
  tmpccmrx |= OC_Config->OCMode;
 8001b00:	433d      	orrs	r5, r7
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001b02:	42a2      	cmp	r2, r4
 8001b04:	d03c      	beq.n	8001b80 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8001b06:	4c29      	ldr	r4, [pc, #164]	; (8001bac <HAL_TIM_PWM_ConfigChannel+0x224>)
 8001b08:	42a2      	cmp	r2, r4
 8001b0a:	d039      	beq.n	8001b80 <HAL_TIM_PWM_ConfigChannel+0x1f8>
 8001b0c:	4c28      	ldr	r4, [pc, #160]	; (8001bb0 <HAL_TIM_PWM_ConfigChannel+0x228>)
 8001b0e:	42a2      	cmp	r2, r4
 8001b10:	d036      	beq.n	8001b80 <HAL_TIM_PWM_ConfigChannel+0x1f8>
  TIMx->CCR1 = OC_Config->Pulse;
 8001b12:	684c      	ldr	r4, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8001b14:	6056      	str	r6, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001b16:	6195      	str	r5, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8001b18:	6354      	str	r4, [r2, #52]	; 0x34
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001b1a:	2408      	movs	r4, #8
  TIMx->CCER = tmpccer;
 8001b1c:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001b1e:	6990      	ldr	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001b20:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001b22:	4320      	orrs	r0, r4
 8001b24:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001b26:	6990      	ldr	r0, [r2, #24]
 8001b28:	3c04      	subs	r4, #4
 8001b2a:	43a0      	bics	r0, r4
 8001b2c:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001b2e:	6990      	ldr	r0, [r2, #24]
 8001b30:	4301      	orrs	r1, r0
 8001b32:	6191      	str	r1, [r2, #24]
    break;
 8001b34:	e76d      	b.n	8001a12 <HAL_TIM_PWM_ConfigChannel+0x8a>
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001b36:	4c22      	ldr	r4, [pc, #136]	; (8001bc0 <HAL_TIM_PWM_ConfigChannel+0x238>)
 8001b38:	4026      	ands	r6, r4
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001b3a:	694c      	ldr	r4, [r1, #20]
 8001b3c:	01a4      	lsls	r4, r4, #6
 8001b3e:	4326      	orrs	r6, r4
 8001b40:	e754      	b.n	80019ec <HAL_TIM_PWM_ConfigChannel+0x64>
    tmpccer &= ~TIM_CCER_CC2NP;
 8001b42:	2480      	movs	r4, #128	; 0x80
 8001b44:	43a0      	bics	r0, r4
 8001b46:	0004      	movs	r4, r0
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001b48:	68c8      	ldr	r0, [r1, #12]
 8001b4a:	0100      	lsls	r0, r0, #4
 8001b4c:	4320      	orrs	r0, r4
    tmpccer &= ~TIM_CCER_CC2NE;
 8001b4e:	2440      	movs	r4, #64	; 0x40
 8001b50:	43a0      	bics	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001b52:	4f1c      	ldr	r7, [pc, #112]	; (8001bc4 <HAL_TIM_PWM_ConfigChannel+0x23c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b54:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001b56:	4037      	ands	r7, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001b58:	698e      	ldr	r6, [r1, #24]
 8001b5a:	4326      	orrs	r6, r4
 8001b5c:	00b6      	lsls	r6, r6, #2
 8001b5e:	433e      	orrs	r6, r7
 8001b60:	e7a9      	b.n	8001ab6 <HAL_TIM_PWM_ConfigChannel+0x12e>
    tmpccer &= ~TIM_CCER_CC3NP;
 8001b62:	4c19      	ldr	r4, [pc, #100]	; (8001bc8 <HAL_TIM_PWM_ConfigChannel+0x240>)
 8001b64:	4004      	ands	r4, r0
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001b66:	68c8      	ldr	r0, [r1, #12]
 8001b68:	0200      	lsls	r0, r0, #8
 8001b6a:	4320      	orrs	r0, r4
    tmpccer &= ~TIM_CCER_CC3NE;
 8001b6c:	4c11      	ldr	r4, [pc, #68]	; (8001bb4 <HAL_TIM_PWM_ConfigChannel+0x22c>)
 8001b6e:	4020      	ands	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001b70:	4f16      	ldr	r7, [pc, #88]	; (8001bcc <HAL_TIM_PWM_ConfigChannel+0x244>)
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001b72:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001b74:	4037      	ands	r7, r6
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001b76:	698e      	ldr	r6, [r1, #24]
 8001b78:	4326      	orrs	r6, r4
 8001b7a:	0136      	lsls	r6, r6, #4
 8001b7c:	433e      	orrs	r6, r7
 8001b7e:	e76d      	b.n	8001a5c <HAL_TIM_PWM_ConfigChannel+0xd4>
    tmpccer &= ~TIM_CCER_CC1NP;
 8001b80:	2408      	movs	r4, #8
 8001b82:	43a0      	bics	r0, r4
    tmpccer |= OC_Config->OCNPolarity;
 8001b84:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 8001b86:	698f      	ldr	r7, [r1, #24]
    tmpccer |= OC_Config->OCNPolarity;
 8001b88:	4320      	orrs	r0, r4
    tmpccer &= ~TIM_CCER_CC1NE;
 8001b8a:	2404      	movs	r4, #4
 8001b8c:	43a0      	bics	r0, r4
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001b8e:	4c10      	ldr	r4, [pc, #64]	; (8001bd0 <HAL_TIM_PWM_ConfigChannel+0x248>)
 8001b90:	4026      	ands	r6, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8001b92:	694c      	ldr	r4, [r1, #20]
 8001b94:	433c      	orrs	r4, r7
 8001b96:	4326      	orrs	r6, r4
 8001b98:	e7bb      	b.n	8001b12 <HAL_TIM_PWM_ConfigChannel+0x18a>
 8001b9a:	46c0      	nop			; (mov r8, r8)
 8001b9c:	ffffefff 	.word	0xffffefff
 8001ba0:	ffff8cff 	.word	0xffff8cff
 8001ba4:	ffffdfff 	.word	0xffffdfff
 8001ba8:	40012c00 	.word	0x40012c00
 8001bac:	40014400 	.word	0x40014400
 8001bb0:	40014800 	.word	0x40014800
 8001bb4:	fffffbff 	.word	0xfffffbff
 8001bb8:	fffffeff 	.word	0xfffffeff
 8001bbc:	fffffdff 	.word	0xfffffdff
 8001bc0:	ffffbfff 	.word	0xffffbfff
 8001bc4:	fffff3ff 	.word	0xfffff3ff
 8001bc8:	fffff7ff 	.word	0xfffff7ff
 8001bcc:	ffffcfff 	.word	0xffffcfff
 8001bd0:	fffffcff 	.word	0xfffffcff

08001bd4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001bd4:	223c      	movs	r2, #60	; 0x3c
{
 8001bd6:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001bd8:	5c84      	ldrb	r4, [r0, r2]
 8001bda:	2302      	movs	r3, #2
 8001bdc:	2c01      	cmp	r4, #1
 8001bde:	d03d      	beq.n	8001c5c <HAL_TIM_ConfigClockSource+0x88>
 8001be0:	2401      	movs	r4, #1
 8001be2:	5484      	strb	r4, [r0, r2]
  htim->State = HAL_TIM_STATE_BUSY;
 8001be4:	3201      	adds	r2, #1
 8001be6:	5483      	strb	r3, [r0, r2]
  tmpsmcr = htim->Instance->SMCR;
 8001be8:	6803      	ldr	r3, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001bea:	4d59      	ldr	r5, [pc, #356]	; (8001d50 <HAL_TIM_ConfigClockSource+0x17c>)
  tmpsmcr = htim->Instance->SMCR;
 8001bec:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001bee:	402a      	ands	r2, r5
  htim->Instance->SMCR = tmpsmcr;
 8001bf0:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001bf2:	680a      	ldr	r2, [r1, #0]
 8001bf4:	2a40      	cmp	r2, #64	; 0x40
 8001bf6:	d100      	bne.n	8001bfa <HAL_TIM_ConfigClockSource+0x26>
 8001bf8:	e074      	b.n	8001ce4 <HAL_TIM_ConfigClockSource+0x110>
 8001bfa:	d91b      	bls.n	8001c34 <HAL_TIM_ConfigClockSource+0x60>
 8001bfc:	2a70      	cmp	r2, #112	; 0x70
 8001bfe:	d061      	beq.n	8001cc4 <HAL_TIM_ConfigClockSource+0xf0>
 8001c00:	d92e      	bls.n	8001c60 <HAL_TIM_ConfigClockSource+0x8c>
 8001c02:	2480      	movs	r4, #128	; 0x80
 8001c04:	0164      	lsls	r4, r4, #5
 8001c06:	42a2      	cmp	r2, r4
 8001c08:	d057      	beq.n	8001cba <HAL_TIM_ConfigClockSource+0xe6>
 8001c0a:	2480      	movs	r4, #128	; 0x80
 8001c0c:	01a4      	lsls	r4, r4, #6
 8001c0e:	42a2      	cmp	r2, r4
 8001c10:	d11d      	bne.n	8001c4e <HAL_TIM_ConfigClockSource+0x7a>
  tmpsmcr = TIMx->SMCR;
 8001c12:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c14:	4c4f      	ldr	r4, [pc, #316]	; (8001d54 <HAL_TIM_ConfigClockSource+0x180>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c16:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c18:	4014      	ands	r4, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001c1a:	688a      	ldr	r2, [r1, #8]
 8001c1c:	68c9      	ldr	r1, [r1, #12]
 8001c1e:	432a      	orrs	r2, r5
 8001c20:	0209      	lsls	r1, r1, #8
 8001c22:	430a      	orrs	r2, r1
 8001c24:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001c26:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001c28:	2280      	movs	r2, #128	; 0x80
 8001c2a:	6899      	ldr	r1, [r3, #8]
 8001c2c:	01d2      	lsls	r2, r2, #7
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	609a      	str	r2, [r3, #8]
    break;
 8001c32:	e00c      	b.n	8001c4e <HAL_TIM_ConfigClockSource+0x7a>
  switch (sClockSourceConfig->ClockSource)
 8001c34:	2a10      	cmp	r2, #16
 8001c36:	d030      	beq.n	8001c9a <HAL_TIM_ConfigClockSource+0xc6>
 8001c38:	d936      	bls.n	8001ca8 <HAL_TIM_ConfigClockSource+0xd4>
 8001c3a:	2a20      	cmp	r2, #32
 8001c3c:	d069      	beq.n	8001d12 <HAL_TIM_ConfigClockSource+0x13e>
 8001c3e:	2a30      	cmp	r2, #48	; 0x30
 8001c40:	d105      	bne.n	8001c4e <HAL_TIM_ConfigClockSource+0x7a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8001c42:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001c44:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001c46:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001c48:	3939      	subs	r1, #57	; 0x39
 8001c4a:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8001c4c:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001c4e:	2201      	movs	r2, #1
 8001c50:	233d      	movs	r3, #61	; 0x3d
 8001c52:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 8001c54:	2200      	movs	r2, #0
 8001c56:	3b01      	subs	r3, #1
 8001c58:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001c60:	2a50      	cmp	r2, #80	; 0x50
 8001c62:	d05d      	beq.n	8001d20 <HAL_TIM_ConfigClockSource+0x14c>
 8001c64:	2a60      	cmp	r2, #96	; 0x60
 8001c66:	d1f2      	bne.n	8001c4e <HAL_TIM_ConfigClockSource+0x7a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c68:	2510      	movs	r5, #16
 8001c6a:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c6c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c6e:	43ac      	bics	r4, r5
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001c70:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c72:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c74:	699d      	ldr	r5, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c76:	4e38      	ldr	r6, [pc, #224]	; (8001d58 <HAL_TIM_ConfigClockSource+0x184>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c78:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c7a:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c7c:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c7e:	25a0      	movs	r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8001c80:	6a1c      	ldr	r4, [r3, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8001c82:	6199      	str	r1, [r3, #24]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001c84:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c86:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c88:	0112      	lsls	r2, r2, #4
 8001c8a:	4322      	orrs	r2, r4
  TIMx->CCER = tmpccer;
 8001c8c:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001c8e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001c90:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001c92:	3909      	subs	r1, #9
 8001c94:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	e7d9      	b.n	8001c4e <HAL_TIM_ConfigClockSource+0x7a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8001c9a:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001c9c:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001c9e:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001ca0:	3959      	subs	r1, #89	; 0x59
 8001ca2:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	e7d2      	b.n	8001c4e <HAL_TIM_ConfigClockSource+0x7a>
  switch (sClockSourceConfig->ClockSource)
 8001ca8:	2a00      	cmp	r2, #0
 8001caa:	d1d0      	bne.n	8001c4e <HAL_TIM_ConfigClockSource+0x7a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8001cac:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001cae:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001cb0:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001cb2:	3969      	subs	r1, #105	; 0x69
 8001cb4:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	e7c9      	b.n	8001c4e <HAL_TIM_ConfigClockSource+0x7a>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001cba:	2107      	movs	r1, #7
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	438a      	bics	r2, r1
 8001cc0:	609a      	str	r2, [r3, #8]
    break;
 8001cc2:	e7c4      	b.n	8001c4e <HAL_TIM_ConfigClockSource+0x7a>
  tmpsmcr = TIMx->SMCR;
 8001cc4:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cc6:	4c23      	ldr	r4, [pc, #140]	; (8001d54 <HAL_TIM_ConfigClockSource+0x180>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001cc8:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cca:	4014      	ands	r4, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001ccc:	688a      	ldr	r2, [r1, #8]
 8001cce:	68c9      	ldr	r1, [r1, #12]
 8001cd0:	432a      	orrs	r2, r5
 8001cd2:	0209      	lsls	r1, r1, #8
 8001cd4:	430a      	orrs	r2, r1
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001cd6:	2177      	movs	r1, #119	; 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001cd8:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001cda:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001cdc:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001cde:	430a      	orrs	r2, r1
      htim->Instance->SMCR = tmpsmcr;
 8001ce0:	609a      	str	r2, [r3, #8]
    break;
 8001ce2:	e7b4      	b.n	8001c4e <HAL_TIM_ConfigClockSource+0x7a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ce4:	684d      	ldr	r5, [r1, #4]
 8001ce6:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8001ce8:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cea:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001cec:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001cee:	43a6      	bics	r6, r4
 8001cf0:	621e      	str	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001cf2:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8001cf4:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001cf6:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001cf8:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001cfa:	240a      	movs	r4, #10
 8001cfc:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8001cfe:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8001d00:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d02:	6219      	str	r1, [r3, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d04:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001d06:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d08:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d0a:	3929      	subs	r1, #41	; 0x29
 8001d0c:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	e79d      	b.n	8001c4e <HAL_TIM_ConfigClockSource+0x7a>
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d12:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001d14:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d16:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d18:	3949      	subs	r1, #73	; 0x49
 8001d1a:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	e796      	b.n	8001c4e <HAL_TIM_ConfigClockSource+0x7a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d20:	684d      	ldr	r5, [r1, #4]
 8001d22:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8001d24:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d26:	6a1e      	ldr	r6, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d28:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d2a:	43a6      	bics	r6, r4
 8001d2c:	621e      	str	r6, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d2e:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8001d30:	699c      	ldr	r4, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d32:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d34:	4322      	orrs	r2, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d36:	240a      	movs	r4, #10
 8001d38:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8001d3a:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8001d3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001d3e:	6219      	str	r1, [r3, #32]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d40:	2170      	movs	r1, #112	; 0x70
   tmpsmcr = TIMx->SMCR;
 8001d42:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001d44:	438a      	bics	r2, r1
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001d46:	3919      	subs	r1, #25
 8001d48:	430a      	orrs	r2, r1
   TIMx->SMCR = tmpsmcr;
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	e77f      	b.n	8001c4e <HAL_TIM_ConfigClockSource+0x7a>
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	ffff0088 	.word	0xffff0088
 8001d54:	ffff00ff 	.word	0xffff00ff
 8001d58:	ffff0fff 	.word	0xffff0fff

08001d5c <HAL_TIM_OC_DelayElapsedCallback>:
 8001d5c:	4770      	bx	lr
 8001d5e:	46c0      	nop			; (mov r8, r8)

08001d60 <HAL_TIM_IC_CaptureCallback>:
 8001d60:	4770      	bx	lr
 8001d62:	46c0      	nop			; (mov r8, r8)

08001d64 <TIM_DMACaptureCplt>:
  htim->State= HAL_TIM_STATE_READY;
 8001d64:	223d      	movs	r2, #61	; 0x3d
 8001d66:	2301      	movs	r3, #1
{
 8001d68:	b510      	push	{r4, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d6a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  htim->State= HAL_TIM_STATE_READY;
 8001d6c:	54a3      	strb	r3, [r4, r2]
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8001d6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d70:	4290      	cmp	r0, r2
 8001d72:	d00f      	beq.n	8001d94 <TIM_DMACaptureCplt+0x30>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8001d74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001d76:	4298      	cmp	r0, r3
 8001d78:	d00e      	beq.n	8001d98 <TIM_DMACaptureCplt+0x34>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8001d7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001d7c:	4298      	cmp	r0, r3
 8001d7e:	d00e      	beq.n	8001d9e <TIM_DMACaptureCplt+0x3a>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8001d80:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d82:	4298      	cmp	r0, r3
 8001d84:	d005      	beq.n	8001d92 <TIM_DMACaptureCplt+0x2e>
  HAL_TIM_IC_CaptureCallback(htim);
 8001d86:	0020      	movs	r0, r4
 8001d88:	f7ff ffea 	bl	8001d60 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	7723      	strb	r3, [r4, #28]
}
 8001d90:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d92:	2308      	movs	r3, #8
 8001d94:	7723      	strb	r3, [r4, #28]
 8001d96:	e7f6      	b.n	8001d86 <TIM_DMACaptureCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	7723      	strb	r3, [r4, #28]
 8001d9c:	e7f3      	b.n	8001d86 <TIM_DMACaptureCplt+0x22>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d9e:	2304      	movs	r3, #4
 8001da0:	7723      	strb	r3, [r4, #28]
 8001da2:	e7f0      	b.n	8001d86 <TIM_DMACaptureCplt+0x22>

08001da4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001da4:	4770      	bx	lr
 8001da6:	46c0      	nop			; (mov r8, r8)

08001da8 <HAL_TIM_TriggerCallback>:
 8001da8:	4770      	bx	lr
 8001daa:	46c0      	nop			; (mov r8, r8)

08001dac <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001dac:	2202      	movs	r2, #2
 8001dae:	6803      	ldr	r3, [r0, #0]
{
 8001db0:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001db2:	6919      	ldr	r1, [r3, #16]
{
 8001db4:	0004      	movs	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001db6:	420a      	tst	r2, r1
 8001db8:	d002      	beq.n	8001dc0 <HAL_TIM_IRQHandler+0x14>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001dba:	68d9      	ldr	r1, [r3, #12]
 8001dbc:	420a      	tst	r2, r1
 8001dbe:	d168      	bne.n	8001e92 <HAL_TIM_IRQHandler+0xe6>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001dc0:	2204      	movs	r2, #4
 8001dc2:	6919      	ldr	r1, [r3, #16]
 8001dc4:	420a      	tst	r2, r1
 8001dc6:	d002      	beq.n	8001dce <HAL_TIM_IRQHandler+0x22>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001dc8:	68d9      	ldr	r1, [r3, #12]
 8001dca:	420a      	tst	r2, r1
 8001dcc:	d14e      	bne.n	8001e6c <HAL_TIM_IRQHandler+0xc0>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dce:	2208      	movs	r2, #8
 8001dd0:	6919      	ldr	r1, [r3, #16]
 8001dd2:	420a      	tst	r2, r1
 8001dd4:	d002      	beq.n	8001ddc <HAL_TIM_IRQHandler+0x30>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001dd6:	68d9      	ldr	r1, [r3, #12]
 8001dd8:	420a      	tst	r2, r1
 8001dda:	d136      	bne.n	8001e4a <HAL_TIM_IRQHandler+0x9e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ddc:	2210      	movs	r2, #16
 8001dde:	6919      	ldr	r1, [r3, #16]
 8001de0:	420a      	tst	r2, r1
 8001de2:	d002      	beq.n	8001dea <HAL_TIM_IRQHandler+0x3e>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001de4:	68d9      	ldr	r1, [r3, #12]
 8001de6:	420a      	tst	r2, r1
 8001de8:	d11c      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x78>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dea:	2201      	movs	r2, #1
 8001dec:	6919      	ldr	r1, [r3, #16]
 8001dee:	420a      	tst	r2, r1
 8001df0:	d002      	beq.n	8001df8 <HAL_TIM_IRQHandler+0x4c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001df2:	68d9      	ldr	r1, [r3, #12]
 8001df4:	420a      	tst	r2, r1
 8001df6:	d169      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x120>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001df8:	2280      	movs	r2, #128	; 0x80
 8001dfa:	6919      	ldr	r1, [r3, #16]
 8001dfc:	420a      	tst	r2, r1
 8001dfe:	d002      	beq.n	8001e06 <HAL_TIM_IRQHandler+0x5a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001e00:	68d9      	ldr	r1, [r3, #12]
 8001e02:	420a      	tst	r2, r1
 8001e04:	d169      	bne.n	8001eda <HAL_TIM_IRQHandler+0x12e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e06:	2240      	movs	r2, #64	; 0x40
 8001e08:	6919      	ldr	r1, [r3, #16]
 8001e0a:	420a      	tst	r2, r1
 8001e0c:	d002      	beq.n	8001e14 <HAL_TIM_IRQHandler+0x68>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001e0e:	68d9      	ldr	r1, [r3, #12]
 8001e10:	420a      	tst	r2, r1
 8001e12:	d154      	bne.n	8001ebe <HAL_TIM_IRQHandler+0x112>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e14:	2220      	movs	r2, #32
 8001e16:	6919      	ldr	r1, [r3, #16]
 8001e18:	420a      	tst	r2, r1
 8001e1a:	d002      	beq.n	8001e22 <HAL_TIM_IRQHandler+0x76>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001e1c:	68d9      	ldr	r1, [r3, #12]
 8001e1e:	420a      	tst	r2, r1
 8001e20:	d147      	bne.n	8001eb2 <HAL_TIM_IRQHandler+0x106>
}
 8001e22:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e24:	3a21      	subs	r2, #33	; 0x21
 8001e26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e28:	3219      	adds	r2, #25
 8001e2a:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e2c:	69da      	ldr	r2, [r3, #28]
 8001e2e:	23c0      	movs	r3, #192	; 0xc0
 8001e30:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8001e32:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e34:	421a      	tst	r2, r3
 8001e36:	d15b      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x144>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e38:	f7ff ff90 	bl	8001d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e3c:	0020      	movs	r0, r4
 8001e3e:	f7ff ffb1 	bl	8001da4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e42:	2300      	movs	r3, #0
 8001e44:	7723      	strb	r3, [r4, #28]
 8001e46:	6823      	ldr	r3, [r4, #0]
 8001e48:	e7cf      	b.n	8001dea <HAL_TIM_IRQHandler+0x3e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e4a:	3a11      	subs	r2, #17
 8001e4c:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e4e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e50:	320d      	adds	r2, #13
 8001e52:	7722      	strb	r2, [r4, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8001e54:	0020      	movs	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e56:	079b      	lsls	r3, r3, #30
 8001e58:	d150      	bne.n	8001efc <HAL_TIM_IRQHandler+0x150>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e5a:	f7ff ff7f 	bl	8001d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e5e:	0020      	movs	r0, r4
 8001e60:	f7ff ffa0 	bl	8001da4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e64:	2300      	movs	r3, #0
 8001e66:	7723      	strb	r3, [r4, #28]
 8001e68:	6823      	ldr	r3, [r4, #0]
 8001e6a:	e7b7      	b.n	8001ddc <HAL_TIM_IRQHandler+0x30>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e6c:	3a09      	subs	r2, #9
 8001e6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e70:	3207      	adds	r2, #7
 8001e72:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e74:	699a      	ldr	r2, [r3, #24]
 8001e76:	23c0      	movs	r3, #192	; 0xc0
 8001e78:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8001e7a:	0020      	movs	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e7c:	421a      	tst	r2, r3
 8001e7e:	d13a      	bne.n	8001ef6 <HAL_TIM_IRQHandler+0x14a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e80:	f7ff ff6c 	bl	8001d5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e84:	0020      	movs	r0, r4
 8001e86:	f7ff ff8d 	bl	8001da4 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	7723      	strb	r3, [r4, #28]
 8001e8e:	6823      	ldr	r3, [r4, #0]
 8001e90:	e79d      	b.n	8001dce <HAL_TIM_IRQHandler+0x22>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e92:	3a05      	subs	r2, #5
 8001e94:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e96:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e98:	3204      	adds	r2, #4
 8001e9a:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e9c:	079b      	lsls	r3, r3, #30
 8001e9e:	d124      	bne.n	8001eea <HAL_TIM_IRQHandler+0x13e>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea0:	f7ff ff5c 	bl	8001d5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea4:	0020      	movs	r0, r4
 8001ea6:	f7ff ff7d 	bl	8001da4 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	7723      	strb	r3, [r4, #28]
 8001eae:	6823      	ldr	r3, [r4, #0]
 8001eb0:	e786      	b.n	8001dc0 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001eb2:	3a41      	subs	r2, #65	; 0x41
 8001eb4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8001eb6:	0020      	movs	r0, r4
 8001eb8:	f000 f89e 	bl	8001ff8 <HAL_TIMEx_CommutationCallback>
}
 8001ebc:	e7b1      	b.n	8001e22 <HAL_TIM_IRQHandler+0x76>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ebe:	3a81      	subs	r2, #129	; 0x81
 8001ec0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001ec2:	0020      	movs	r0, r4
 8001ec4:	f7ff ff70 	bl	8001da8 <HAL_TIM_TriggerCallback>
 8001ec8:	6823      	ldr	r3, [r4, #0]
 8001eca:	e7a3      	b.n	8001e14 <HAL_TIM_IRQHandler+0x68>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ecc:	3a03      	subs	r2, #3
 8001ece:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ed0:	0020      	movs	r0, r4
 8001ed2:	f001 fc0b 	bl	80036ec <HAL_TIM_PeriodElapsedCallback>
 8001ed6:	6823      	ldr	r3, [r4, #0]
 8001ed8:	e78e      	b.n	8001df8 <HAL_TIM_IRQHandler+0x4c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001eda:	3a02      	subs	r2, #2
 8001edc:	3aff      	subs	r2, #255	; 0xff
 8001ede:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001ee0:	0020      	movs	r0, r4
 8001ee2:	f000 f88b 	bl	8001ffc <HAL_TIMEx_BreakCallback>
 8001ee6:	6823      	ldr	r3, [r4, #0]
 8001ee8:	e78d      	b.n	8001e06 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_IC_CaptureCallback(htim);
 8001eea:	f7ff ff39 	bl	8001d60 <HAL_TIM_IC_CaptureCallback>
 8001eee:	e7dc      	b.n	8001eaa <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef0:	f7ff ff36 	bl	8001d60 <HAL_TIM_IC_CaptureCallback>
 8001ef4:	e7a5      	b.n	8001e42 <HAL_TIM_IRQHandler+0x96>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ef6:	f7ff ff33 	bl	8001d60 <HAL_TIM_IC_CaptureCallback>
 8001efa:	e7c6      	b.n	8001e8a <HAL_TIM_IRQHandler+0xde>
        HAL_TIM_IC_CaptureCallback(htim);
 8001efc:	f7ff ff30 	bl	8001d60 <HAL_TIM_IC_CaptureCallback>
 8001f00:	e7b0      	b.n	8001e64 <HAL_TIM_IRQHandler+0xb8>
 8001f02:	46c0      	nop			; (mov r8, r8)

08001f04 <HAL_TIM_ErrorCallback>:
}
 8001f04:	4770      	bx	lr
 8001f06:	46c0      	nop			; (mov r8, r8)

08001f08 <TIM_DMAError>:
  htim->State= HAL_TIM_STATE_READY;
 8001f08:	2201      	movs	r2, #1
 8001f0a:	233d      	movs	r3, #61	; 0x3d
{
 8001f0c:	b510      	push	{r4, lr}
  TIM_HandleTypeDef* htim = ( TIM_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f0e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  htim->State= HAL_TIM_STATE_READY;
 8001f10:	54c2      	strb	r2, [r0, r3]
  HAL_TIM_ErrorCallback(htim);
 8001f12:	f7ff fff7 	bl	8001f04 <HAL_TIM_ErrorCallback>
}
 8001f16:	bd10      	pop	{r4, pc}

08001f18 <HAL_TIMEx_PWMN_Start>:
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelNState)
{
  uint32_t tmp = 0U;

  tmp = TIM_CCER_CC1NE << Channel;
 8001f18:	2204      	movs	r2, #4
 8001f1a:	408a      	lsls	r2, r1
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8001f1c:	6803      	ldr	r3, [r0, #0]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8001f1e:	6a19      	ldr	r1, [r3, #32]
}
 8001f20:	2000      	movs	r0, #0
  TIMx->CCER &=  ~tmp;
 8001f22:	4391      	bics	r1, r2
 8001f24:	6219      	str	r1, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelNState << Channel);
 8001f26:	6a19      	ldr	r1, [r3, #32]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	621a      	str	r2, [r3, #32]
  __HAL_TIM_MOE_ENABLE(htim);
 8001f2c:	2280      	movs	r2, #128	; 0x80
 8001f2e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001f30:	0212      	lsls	r2, r2, #8
 8001f32:	430a      	orrs	r2, r1
  __HAL_TIM_ENABLE(htim);
 8001f34:	2101      	movs	r1, #1
  __HAL_TIM_MOE_ENABLE(htim);
 8001f36:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	601a      	str	r2, [r3, #0]
}
 8001f3e:	4770      	bx	lr

08001f40 <HAL_TIMEx_MasterConfigSynchronization>:
{
 8001f40:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001f42:	243c      	movs	r4, #60	; 0x3c
 8001f44:	5d03      	ldrb	r3, [r0, r4]
{
 8001f46:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8001f48:	2002      	movs	r0, #2
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d017      	beq.n	8001f7e <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  htim->State = HAL_TIM_STATE_BUSY;
 8001f4e:	253d      	movs	r5, #61	; 0x3d
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001f50:	2670      	movs	r6, #112	; 0x70
 8001f52:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8001f54:	5550      	strb	r0, [r2, r5]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8001f56:	6858      	ldr	r0, [r3, #4]
 8001f58:	43b0      	bics	r0, r6
 8001f5a:	6058      	str	r0, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001f5c:	6858      	ldr	r0, [r3, #4]
 8001f5e:	680e      	ldr	r6, [r1, #0]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001f60:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001f62:	4330      	orrs	r0, r6
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001f64:	2680      	movs	r6, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 8001f66:	6058      	str	r0, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 8001f68:	6898      	ldr	r0, [r3, #8]
 8001f6a:	43b0      	bics	r0, r6
 8001f6c:	6098      	str	r0, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001f6e:	6898      	ldr	r0, [r3, #8]
 8001f70:	4301      	orrs	r1, r0
 8001f72:	6099      	str	r1, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001f74:	2301      	movs	r3, #1
 8001f76:	5553      	strb	r3, [r2, r5]
  __HAL_UNLOCK(htim);
 8001f78:	2300      	movs	r3, #0
  return HAL_OK;
 8001f7a:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8001f7c:	5513      	strb	r3, [r2, r4]
}
 8001f7e:	bd70      	pop	{r4, r5, r6, pc}

08001f80 <HAL_TIMEx_ConfigBreakDeadTime>:
{
 8001f80:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001f82:	243c      	movs	r4, #60	; 0x3c
 8001f84:	5d03      	ldrb	r3, [r0, r4]
{
 8001f86:	0002      	movs	r2, r0
  __HAL_LOCK(htim);
 8001f88:	2002      	movs	r0, #2
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d024      	beq.n	8001fd8 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  htim->State = HAL_TIM_STATE_BUSY;
 8001f8e:	253d      	movs	r5, #61	; 0x3d
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001f90:	4b12      	ldr	r3, [pc, #72]	; (8001fdc <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001f92:	5550      	strb	r0, [r2, r5]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001f94:	68c8      	ldr	r0, [r1, #12]
 8001f96:	4003      	ands	r3, r0
 8001f98:	6888      	ldr	r0, [r1, #8]
 8001f9a:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001f9c:	4810      	ldr	r0, [pc, #64]	; (8001fe0 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8001f9e:	4003      	ands	r3, r0
 8001fa0:	6848      	ldr	r0, [r1, #4]
 8001fa2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8001fa4:	480f      	ldr	r0, [pc, #60]	; (8001fe4 <HAL_TIMEx_ConfigBreakDeadTime+0x64>)
 8001fa6:	4003      	ands	r3, r0
 8001fa8:	6808      	ldr	r0, [r1, #0]
 8001faa:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001fac:	480e      	ldr	r0, [pc, #56]	; (8001fe8 <HAL_TIMEx_ConfigBreakDeadTime+0x68>)
 8001fae:	4003      	ands	r3, r0
 8001fb0:	6908      	ldr	r0, [r1, #16]
 8001fb2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001fb4:	480d      	ldr	r0, [pc, #52]	; (8001fec <HAL_TIMEx_ConfigBreakDeadTime+0x6c>)
 8001fb6:	4003      	ands	r3, r0
 8001fb8:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001fba:	6989      	ldr	r1, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001fbc:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001fbe:	480c      	ldr	r0, [pc, #48]	; (8001ff0 <HAL_TIMEx_ConfigBreakDeadTime+0x70>)
 8001fc0:	4003      	ands	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001fc2:	480c      	ldr	r0, [pc, #48]	; (8001ff4 <HAL_TIMEx_ConfigBreakDeadTime+0x74>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001fc4:	430b      	orrs	r3, r1
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001fc6:	4003      	ands	r3, r0
 8001fc8:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8001fca:	6811      	ldr	r1, [r2, #0]
  return HAL_OK;
 8001fcc:	2000      	movs	r0, #0
  htim->Instance->BDTR = tmpbdtr;
 8001fce:	644b      	str	r3, [r1, #68]	; 0x44
  htim->State = HAL_TIM_STATE_READY;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	5553      	strb	r3, [r2, r5]
  __HAL_UNLOCK(htim);
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	5513      	strb	r3, [r2, r4]
}
 8001fd8:	bd30      	pop	{r4, r5, pc}
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	fffffcff 	.word	0xfffffcff
 8001fe0:	fffffbff 	.word	0xfffffbff
 8001fe4:	fffff7ff 	.word	0xfffff7ff
 8001fe8:	ffffefff 	.word	0xffffefff
 8001fec:	ffffdfff 	.word	0xffffdfff
 8001ff0:	ffffbfff 	.word	0xffffbfff
 8001ff4:	ffff7fff 	.word	0xffff7fff

08001ff8 <HAL_TIMEx_CommutationCallback>:
 8001ff8:	4770      	bx	lr
 8001ffa:	46c0      	nop			; (mov r8, r8)

08001ffc <HAL_TIMEx_BreakCallback>:
}
 8001ffc:	4770      	bx	lr
 8001ffe:	46c0      	nop			; (mov r8, r8)

08002000 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002000:	b510      	push	{r4, lr}
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002002:	7902      	ldrb	r2, [r0, #4]
{
 8002004:	0003      	movs	r3, r0
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002006:	2a00      	cmp	r2, #0
 8002008:	d01c      	beq.n	8002044 <LL_EXTI_Init+0x44>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800200a:	6802      	ldr	r2, [r0, #0]
 800200c:	2001      	movs	r0, #1
 800200e:	2a00      	cmp	r2, #0
 8002010:	d017      	beq.n	8002042 <LL_EXTI_Init+0x42>
    {
      switch (EXTI_InitStruct->Mode)
 8002012:	7959      	ldrb	r1, [r3, #5]
 8002014:	2901      	cmp	r1, #1
 8002016:	d02a      	beq.n	800206e <LL_EXTI_Init+0x6e>
 8002018:	2900      	cmp	r1, #0
 800201a:	d01e      	beq.n	800205a <LL_EXTI_Init+0x5a>
 800201c:	2902      	cmp	r1, #2
 800201e:	d124      	bne.n	800206a <LL_EXTI_Init+0x6a>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR, ExtiLine);
 8002020:	4923      	ldr	r1, [pc, #140]	; (80020b0 <LL_EXTI_Init+0xb0>)
 8002022:	680c      	ldr	r4, [r1, #0]
 8002024:	4314      	orrs	r4, r2
 8002026:	600c      	str	r4, [r1, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->EMR, ExtiLine);
 8002028:	684c      	ldr	r4, [r1, #4]
 800202a:	4314      	orrs	r4, r2
 800202c:	604c      	str	r4, [r1, #4]
          break;
        default:
          status = ERROR;
          break;
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800202e:	799b      	ldrb	r3, [r3, #6]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d006      	beq.n	8002042 <LL_EXTI_Init+0x42>
      {
        switch (EXTI_InitStruct->Trigger)
 8002034:	2b02      	cmp	r3, #2
 8002036:	d022      	beq.n	800207e <LL_EXTI_Init+0x7e>
 8002038:	2b03      	cmp	r3, #3
 800203a:	d030      	beq.n	800209e <LL_EXTI_Init+0x9e>
 800203c:	2b01      	cmp	r3, #1
 800203e:	d026      	beq.n	800208e <LL_EXTI_Init+0x8e>
 8002040:	2000      	movs	r0, #0
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
  }
  return status;
}
 8002042:	bd10      	pop	{r4, pc}
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8002044:	6803      	ldr	r3, [r0, #0]
 8002046:	4a1a      	ldr	r2, [pc, #104]	; (80020b0 <LL_EXTI_Init+0xb0>)
 8002048:	43db      	mvns	r3, r3
 800204a:	6811      	ldr	r1, [r2, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 800204c:	2001      	movs	r0, #1
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800204e:	4019      	ands	r1, r3
 8002050:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 8002052:	6851      	ldr	r1, [r2, #4]
 8002054:	400b      	ands	r3, r1
 8002056:	6053      	str	r3, [r2, #4]
 8002058:	e7f3      	b.n	8002042 <LL_EXTI_Init+0x42>
 800205a:	4915      	ldr	r1, [pc, #84]	; (80020b0 <LL_EXTI_Init+0xb0>)
 800205c:	684c      	ldr	r4, [r1, #4]
 800205e:	4394      	bics	r4, r2
 8002060:	604c      	str	r4, [r1, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8002062:	680c      	ldr	r4, [r1, #0]
 8002064:	4314      	orrs	r4, r2
 8002066:	600c      	str	r4, [r1, #0]
 8002068:	e7e1      	b.n	800202e <LL_EXTI_Init+0x2e>
      switch (EXTI_InitStruct->Mode)
 800206a:	2000      	movs	r0, #0
 800206c:	e7df      	b.n	800202e <LL_EXTI_Init+0x2e>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 800206e:	4910      	ldr	r1, [pc, #64]	; (80020b0 <LL_EXTI_Init+0xb0>)
 8002070:	680c      	ldr	r4, [r1, #0]
 8002072:	4394      	bics	r4, r2
 8002074:	600c      	str	r4, [r1, #0]
  SET_BIT(EXTI->EMR, ExtiLine);
 8002076:	684c      	ldr	r4, [r1, #4]
 8002078:	4314      	orrs	r4, r2
 800207a:	604c      	str	r4, [r1, #4]
 800207c:	e7d7      	b.n	800202e <LL_EXTI_Init+0x2e>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 800207e:	4b0c      	ldr	r3, [pc, #48]	; (80020b0 <LL_EXTI_Init+0xb0>)
 8002080:	6899      	ldr	r1, [r3, #8]
 8002082:	4391      	bics	r1, r2
 8002084:	6099      	str	r1, [r3, #8]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->FTSR, ExtiLine);
 8002086:	68d9      	ldr	r1, [r3, #12]
 8002088:	430a      	orrs	r2, r1
 800208a:	60da      	str	r2, [r3, #12]
 800208c:	e7d9      	b.n	8002042 <LL_EXTI_Init+0x42>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 800208e:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <LL_EXTI_Init+0xb0>)
 8002090:	68d9      	ldr	r1, [r3, #12]
 8002092:	4391      	bics	r1, r2
 8002094:	60d9      	str	r1, [r3, #12]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8002096:	6899      	ldr	r1, [r3, #8]
 8002098:	430a      	orrs	r2, r1
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	e7d1      	b.n	8002042 <LL_EXTI_Init+0x42>
 800209e:	4b04      	ldr	r3, [pc, #16]	; (80020b0 <LL_EXTI_Init+0xb0>)
 80020a0:	6899      	ldr	r1, [r3, #8]
 80020a2:	4311      	orrs	r1, r2
 80020a4:	6099      	str	r1, [r3, #8]
  SET_BIT(EXTI->FTSR, ExtiLine);
 80020a6:	68d9      	ldr	r1, [r3, #12]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	60da      	str	r2, [r3, #12]
 80020ac:	e7c9      	b.n	8002042 <LL_EXTI_Init+0x42>
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	40010400 	.word	0x40010400

080020b4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80020b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020b6:	46de      	mov	lr, fp
 80020b8:	464e      	mov	r6, r9
 80020ba:	4657      	mov	r7, sl
 80020bc:	4645      	mov	r5, r8
 80020be:	b5e0      	push	{r5, r6, r7, lr}
  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  /* pinpos = 0; useless as already done in default initialization */

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80020c0:	680e      	ldr	r6, [r1, #0]
{
 80020c2:	468b      	mov	fp, r1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80020c4:	2e00      	cmp	r6, #0
 80020c6:	d100      	bne.n	80020ca <LL_GPIO_Init+0x16>
 80020c8:	e073      	b.n	80021b2 <LL_GPIO_Init+0xfe>
 80020ca:	684b      	ldr	r3, [r1, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	469c      	mov	ip, r3
 80020d0:	2301      	movs	r3, #1
 80020d2:	425b      	negs	r3, r3
 80020d4:	4463      	add	r3, ip
 80020d6:	4698      	mov	r8, r3
 80020d8:	e00a      	b.n	80020f0 <LL_GPIO_Init+0x3c>
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 80020da:	4659      	mov	r1, fp
 80020dc:	6909      	ldr	r1, [r1, #16]
 80020de:	68c3      	ldr	r3, [r0, #12]
 80020e0:	434d      	muls	r5, r1
 80020e2:	401c      	ands	r4, r3
 80020e4:	432c      	orrs	r4, r5
 80020e6:	60c4      	str	r4, [r0, #12]
 80020e8:	0033      	movs	r3, r6
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
        }
      }
    }
    pinpos++;
 80020ea:	3201      	adds	r2, #1
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80020ec:	40d3      	lsrs	r3, r2
 80020ee:	d042      	beq.n	8002176 <LL_GPIO_Init+0xc2>
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80020f0:	2301      	movs	r3, #1
 80020f2:	4093      	lsls	r3, r2
 80020f4:	4033      	ands	r3, r6
    if (currentpin)
 80020f6:	d0f7      	beq.n	80020e8 <LL_GPIO_Init+0x34>
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80020f8:	001d      	movs	r5, r3
 80020fa:	6804      	ldr	r4, [r0, #0]
 80020fc:	435d      	muls	r5, r3
 80020fe:	46a1      	mov	r9, r4
 8002100:	006c      	lsls	r4, r5, #1
 8002102:	1964      	adds	r4, r4, r5
 8002104:	464f      	mov	r7, r9
 8002106:	43e4      	mvns	r4, r4
 8002108:	4027      	ands	r7, r4
 800210a:	46b9      	mov	r9, r7
 800210c:	4667      	mov	r7, ip
 800210e:	436f      	muls	r7, r5
 8002110:	46ba      	mov	sl, r7
 8002112:	464f      	mov	r7, r9
 8002114:	4651      	mov	r1, sl
 8002116:	430f      	orrs	r7, r1
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002118:	4641      	mov	r1, r8
 800211a:	6007      	str	r7, [r0, #0]
 800211c:	2901      	cmp	r1, #1
 800211e:	d8dc      	bhi.n	80020da <LL_GPIO_Init+0x26>
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8002120:	6881      	ldr	r1, [r0, #8]
 8002122:	468a      	mov	sl, r1
 8002124:	4659      	mov	r1, fp
 8002126:	6889      	ldr	r1, [r1, #8]
 8002128:	4369      	muls	r1, r5
 800212a:	4689      	mov	r9, r1
 800212c:	4651      	mov	r1, sl
 800212e:	4021      	ands	r1, r4
 8002130:	468a      	mov	sl, r1
 8002132:	4649      	mov	r1, r9
 8002134:	4657      	mov	r7, sl
 8002136:	4339      	orrs	r1, r7
 8002138:	6081      	str	r1, [r0, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 800213a:	68c1      	ldr	r1, [r0, #12]
 800213c:	468a      	mov	sl, r1
 800213e:	4659      	mov	r1, fp
 8002140:	6909      	ldr	r1, [r1, #16]
 8002142:	4369      	muls	r1, r5
 8002144:	4689      	mov	r9, r1
 8002146:	4651      	mov	r1, sl
 8002148:	400c      	ands	r4, r1
 800214a:	4649      	mov	r1, r9
 800214c:	430c      	orrs	r4, r1
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800214e:	4661      	mov	r1, ip
 8002150:	60c4      	str	r4, [r0, #12]
 8002152:	2902      	cmp	r1, #2
 8002154:	d1c8      	bne.n	80020e8 <LL_GPIO_Init+0x34>
        if (currentpin < LL_GPIO_PIN_8)
 8002156:	2bff      	cmp	r3, #255	; 0xff
 8002158:	d81e      	bhi.n	8002198 <LL_GPIO_Init+0xe4>
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800215a:	4659      	mov	r1, fp
 800215c:	436d      	muls	r5, r5
 800215e:	6949      	ldr	r1, [r1, #20]
 8002160:	012c      	lsls	r4, r5, #4
 8002162:	1b64      	subs	r4, r4, r5
 8002164:	434d      	muls	r5, r1
 8002166:	6a03      	ldr	r3, [r0, #32]
    pinpos++;
 8002168:	3201      	adds	r2, #1
 800216a:	43a3      	bics	r3, r4
 800216c:	431d      	orrs	r5, r3
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800216e:	0033      	movs	r3, r6
 8002170:	6205      	str	r5, [r0, #32]
 8002172:	40d3      	lsrs	r3, r2
 8002174:	d1bc      	bne.n	80020f0 <LL_GPIO_Init+0x3c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002176:	4643      	mov	r3, r8
 8002178:	2b01      	cmp	r3, #1
 800217a:	d806      	bhi.n	800218a <LL_GPIO_Init+0xd6>
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800217c:	465a      	mov	r2, fp
 800217e:	6843      	ldr	r3, [r0, #4]
 8002180:	68d2      	ldr	r2, [r2, #12]
 8002182:	43b3      	bics	r3, r6
 8002184:	4356      	muls	r6, r2
 8002186:	431e      	orrs	r6, r3
 8002188:	6046      	str	r6, [r0, #4]
    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);

  }
  return (SUCCESS);
}
 800218a:	2001      	movs	r0, #1
 800218c:	bc3c      	pop	{r2, r3, r4, r5}
 800218e:	4690      	mov	r8, r2
 8002190:	4699      	mov	r9, r3
 8002192:	46a2      	mov	sl, r4
 8002194:	46ab      	mov	fp, r5
 8002196:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *         @arg @ref LL_GPIO_AF_7
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002198:	4659      	mov	r1, fp
 800219a:	0a1b      	lsrs	r3, r3, #8
 800219c:	435b      	muls	r3, r3
 800219e:	435b      	muls	r3, r3
 80021a0:	6949      	ldr	r1, [r1, #20]
 80021a2:	011d      	lsls	r5, r3, #4
 80021a4:	1aed      	subs	r5, r5, r3
 80021a6:	434b      	muls	r3, r1
 80021a8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80021aa:	43ac      	bics	r4, r5
 80021ac:	4323      	orrs	r3, r4
 80021ae:	6243      	str	r3, [r0, #36]	; 0x24
 80021b0:	e79a      	b.n	80020e8 <LL_GPIO_Init+0x34>
 80021b2:	684b      	ldr	r3, [r1, #4]
 80021b4:	3b01      	subs	r3, #1
 80021b6:	4698      	mov	r8, r3
 80021b8:	e7dd      	b.n	8002176 <LL_GPIO_Init+0xc2>
 80021ba:	46c0      	nop			; (mov r8, r8)

080021bc <HAL_ADC_ConvCpltCallback>:




void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tempraw = ADC1ConvertedValues[0];
 80021be:	4b0d      	ldr	r3, [pc, #52]	; (80021f4 <HAL_ADC_ConvCpltCallback+0x38>)
		total = total - readings[readIndex];
 80021c0:	490d      	ldr	r1, [pc, #52]	; (80021f8 <HAL_ADC_ConvCpltCallback+0x3c>)
	tempraw = ADC1ConvertedValues[0];
 80021c2:	6818      	ldr	r0, [r3, #0]
 80021c4:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <HAL_ADC_ConvCpltCallback+0x40>)
		total = total - readings[readIndex];
 80021c6:	4c0e      	ldr	r4, [pc, #56]	; (8002200 <HAL_ADC_ConvCpltCallback+0x44>)
	tempraw = ADC1ConvertedValues[0];
 80021c8:	6018      	str	r0, [r3, #0]
		total = total - readings[readIndex];
 80021ca:	680b      	ldr	r3, [r1, #0]
 80021cc:	4d0d      	ldr	r5, [pc, #52]	; (8002204 <HAL_ADC_ConvCpltCallback+0x48>)
 80021ce:	009e      	lsls	r6, r3, #2
 80021d0:	6822      	ldr	r2, [r4, #0]
 80021d2:	5977      	ldr	r7, [r6, r5]
		readIndex = readIndex + 1;
 80021d4:	3301      	adds	r3, #1
		total = total - readings[readIndex];
 80021d6:	1bd2      	subs	r2, r2, r7
		readings[readIndex] = tempraw;
 80021d8:	5170      	str	r0, [r6, r5]
		total = total + readings[readIndex];
 80021da:	1880      	adds	r0, r0, r2
 80021dc:	6020      	str	r0, [r4, #0]
		if (readIndex >= numReadings) {
 80021de:	2b63      	cmp	r3, #99	; 0x63
 80021e0:	dd00      	ble.n	80021e4 <HAL_ADC_ConvCpltCallback+0x28>
			readIndex = 0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	600b      	str	r3, [r1, #0]
		smoothedinput = total / numReadings;
 80021e6:	2164      	movs	r1, #100	; 0x64
 80021e8:	f7fe f818 	bl	800021c <__divsi3>
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <HAL_ADC_ConvCpltCallback+0x4c>)
 80021ee:	6018      	str	r0, [r3, #0]
	getADCs();
}
 80021f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021f2:	46c0      	nop			; (mov r8, r8)
 80021f4:	2000005c 	.word	0x2000005c
 80021f8:	200000d8 	.word	0x200000d8
 80021fc:	20000100 	.word	0x20000100
 8002200:	20000104 	.word	0x20000104
 8002204:	200002e8 	.word	0x200002e8
 8002208:	200000ec 	.word	0x200000ec

0800220c <fullBrake>:
//stop_time = TIM14->CNT;

}

void fullBrake(){                     // full braking shorting all low sides
	phaseA(lowside);
 800220c:	4b56      	ldr	r3, [pc, #344]	; (8002368 <fullBrake+0x15c>)
 800220e:	681b      	ldr	r3, [r3, #0]
		if (newPhase==1){
 8002210:	2b01      	cmp	r3, #1
 8002212:	d100      	bne.n	8002216 <fullBrake+0xa>
 8002214:	e079      	b.n	800230a <fullBrake+0xfe>
		if (newPhase==2){
 8002216:	2b02      	cmp	r3, #2
 8002218:	d041      	beq.n	800229e <fullBrake+0x92>
		if (newPhase==3){
 800221a:	2b03      	cmp	r3, #3
 800221c:	d13e      	bne.n	800229c <fullBrake+0x90>
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 800221e:	4a53      	ldr	r2, [pc, #332]	; (800236c <fullBrake+0x160>)
 8002220:	4953      	ldr	r1, [pc, #332]	; (8002370 <fullBrake+0x164>)
 8002222:	6813      	ldr	r3, [r2, #0]
 8002224:	4853      	ldr	r0, [pc, #332]	; (8002374 <fullBrake+0x168>)
 8002226:	4019      	ands	r1, r3
 8002228:	2380      	movs	r3, #128	; 0x80
 800222a:	04db      	lsls	r3, r3, #19
 800222c:	430b      	orrs	r3, r1
 800222e:	6013      	str	r3, [r2, #0]
		LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_13, LL_GPIO_MODE_OUTPUT); GPIOB->BSRR = GPIO_PIN_13;
 8002230:	2380      	movs	r3, #128	; 0x80
 8002232:	019b      	lsls	r3, r3, #6
 8002234:	6193      	str	r3, [r2, #24]
 8002236:	2390      	movs	r3, #144	; 0x90
 8002238:	05db      	lsls	r3, r3, #23
 800223a:	6819      	ldr	r1, [r3, #0]
 800223c:	4008      	ands	r0, r1
 800223e:	2180      	movs	r1, #128	; 0x80
 8002240:	0249      	lsls	r1, r1, #9
 8002242:	4301      	orrs	r1, r0
 8002244:	6019      	str	r1, [r3, #0]
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_8, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_8;
 8002246:	2180      	movs	r1, #128	; 0x80
 8002248:	0049      	lsls	r1, r1, #1
 800224a:	6299      	str	r1, [r3, #40]	; 0x28
 800224c:	6811      	ldr	r1, [r2, #0]
 800224e:	484a      	ldr	r0, [pc, #296]	; (8002378 <fullBrake+0x16c>)
 8002250:	4008      	ands	r0, r1
 8002252:	2180      	movs	r1, #128	; 0x80
 8002254:	0549      	lsls	r1, r1, #21
 8002256:	4301      	orrs	r1, r0
 8002258:	6011      	str	r1, [r2, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_14, LL_GPIO_MODE_OUTPUT); GPIOB->BSRR = GPIO_PIN_14;
 800225a:	2180      	movs	r1, #128	; 0x80
 800225c:	01c9      	lsls	r1, r1, #7
 800225e:	6191      	str	r1, [r2, #24]
 8002260:	6819      	ldr	r1, [r3, #0]
 8002262:	4846      	ldr	r0, [pc, #280]	; (800237c <fullBrake+0x170>)
 8002264:	4008      	ands	r0, r1
 8002266:	2180      	movs	r1, #128	; 0x80
 8002268:	02c9      	lsls	r1, r1, #11
 800226a:	4301      	orrs	r1, r0
 800226c:	6019      	str	r1, [r3, #0]
	LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_9, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_9;
 800226e:	2180      	movs	r1, #128	; 0x80
 8002270:	2080      	movs	r0, #128	; 0x80
 8002272:	0089      	lsls	r1, r1, #2
 8002274:	6299      	str	r1, [r3, #40]	; 0x28
 8002276:	6811      	ldr	r1, [r2, #0]
 8002278:	05c0      	lsls	r0, r0, #23
 800227a:	0089      	lsls	r1, r1, #2
 800227c:	0889      	lsrs	r1, r1, #2
 800227e:	4301      	orrs	r1, r0
 8002280:	6011      	str	r1, [r2, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_15, LL_GPIO_MODE_OUTPUT); GPIOB->BSRR = GPIO_PIN_15;
 8002282:	2180      	movs	r1, #128	; 0x80
 8002284:	0209      	lsls	r1, r1, #8
 8002286:	6191      	str	r1, [r2, #24]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	493d      	ldr	r1, [pc, #244]	; (8002380 <fullBrake+0x174>)
 800228c:	4011      	ands	r1, r2
 800228e:	2280      	movs	r2, #128	; 0x80
 8002290:	0352      	lsls	r2, r2, #13
 8002292:	430a      	orrs	r2, r1
 8002294:	601a      	str	r2, [r3, #0]
	LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_10, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_10;
 8002296:	2280      	movs	r2, #128	; 0x80
 8002298:	00d2      	lsls	r2, r2, #3
 800229a:	629a      	str	r2, [r3, #40]	; 0x28
	phaseB(lowside);
	phaseC(lowside);
}
 800229c:	4770      	bx	lr
 800229e:	4a33      	ldr	r2, [pc, #204]	; (800236c <fullBrake+0x160>)
 80022a0:	4933      	ldr	r1, [pc, #204]	; (8002370 <fullBrake+0x164>)
 80022a2:	6813      	ldr	r3, [r2, #0]
 80022a4:	4833      	ldr	r0, [pc, #204]	; (8002374 <fullBrake+0x168>)
 80022a6:	4019      	ands	r1, r3
 80022a8:	2380      	movs	r3, #128	; 0x80
 80022aa:	04db      	lsls	r3, r3, #19
 80022ac:	430b      	orrs	r3, r1
 80022ae:	6013      	str	r3, [r2, #0]
		LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_13, LL_GPIO_MODE_OUTPUT); GPIOB->BRR = GPIO_PIN_13;
 80022b0:	2380      	movs	r3, #128	; 0x80
 80022b2:	019b      	lsls	r3, r3, #6
 80022b4:	6293      	str	r3, [r2, #40]	; 0x28
 80022b6:	2390      	movs	r3, #144	; 0x90
 80022b8:	05db      	lsls	r3, r3, #23
 80022ba:	6819      	ldr	r1, [r3, #0]
 80022bc:	4008      	ands	r0, r1
 80022be:	2180      	movs	r1, #128	; 0x80
 80022c0:	0249      	lsls	r1, r1, #9
 80022c2:	4301      	orrs	r1, r0
 80022c4:	6019      	str	r1, [r3, #0]
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_8, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_8;
 80022c6:	2180      	movs	r1, #128	; 0x80
 80022c8:	0049      	lsls	r1, r1, #1
 80022ca:	6299      	str	r1, [r3, #40]	; 0x28
 80022cc:	6811      	ldr	r1, [r2, #0]
 80022ce:	482a      	ldr	r0, [pc, #168]	; (8002378 <fullBrake+0x16c>)
 80022d0:	4008      	ands	r0, r1
 80022d2:	2180      	movs	r1, #128	; 0x80
 80022d4:	0549      	lsls	r1, r1, #21
 80022d6:	4301      	orrs	r1, r0
 80022d8:	6011      	str	r1, [r2, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_14, LL_GPIO_MODE_OUTPUT); GPIOB->BRR = GPIO_PIN_14;
 80022da:	2180      	movs	r1, #128	; 0x80
 80022dc:	01c9      	lsls	r1, r1, #7
 80022de:	6291      	str	r1, [r2, #40]	; 0x28
 80022e0:	6819      	ldr	r1, [r3, #0]
 80022e2:	4826      	ldr	r0, [pc, #152]	; (800237c <fullBrake+0x170>)
 80022e4:	4008      	ands	r0, r1
 80022e6:	2180      	movs	r1, #128	; 0x80
 80022e8:	02c9      	lsls	r1, r1, #11
 80022ea:	4301      	orrs	r1, r0
 80022ec:	6019      	str	r1, [r3, #0]
	LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_9, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_9;
 80022ee:	2180      	movs	r1, #128	; 0x80
 80022f0:	2080      	movs	r0, #128	; 0x80
 80022f2:	0089      	lsls	r1, r1, #2
 80022f4:	6299      	str	r1, [r3, #40]	; 0x28
 80022f6:	6811      	ldr	r1, [r2, #0]
 80022f8:	05c0      	lsls	r0, r0, #23
 80022fa:	0089      	lsls	r1, r1, #2
 80022fc:	0889      	lsrs	r1, r1, #2
 80022fe:	4301      	orrs	r1, r0
 8002300:	6011      	str	r1, [r2, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_15, LL_GPIO_MODE_OUTPUT); GPIOB->BRR = GPIO_PIN_15;
 8002302:	2180      	movs	r1, #128	; 0x80
 8002304:	0209      	lsls	r1, r1, #8
 8002306:	6291      	str	r1, [r2, #40]	; 0x28
 8002308:	e7be      	b.n	8002288 <fullBrake+0x7c>
 800230a:	4a18      	ldr	r2, [pc, #96]	; (800236c <fullBrake+0x160>)
 800230c:	4918      	ldr	r1, [pc, #96]	; (8002370 <fullBrake+0x164>)
 800230e:	6813      	ldr	r3, [r2, #0]
 8002310:	4818      	ldr	r0, [pc, #96]	; (8002374 <fullBrake+0x168>)
 8002312:	4019      	ands	r1, r3
 8002314:	2380      	movs	r3, #128	; 0x80
 8002316:	051b      	lsls	r3, r3, #20
 8002318:	430b      	orrs	r3, r1
 800231a:	6013      	str	r3, [r2, #0]
 800231c:	2390      	movs	r3, #144	; 0x90
 800231e:	05db      	lsls	r3, r3, #23
 8002320:	6819      	ldr	r1, [r3, #0]
 8002322:	4008      	ands	r0, r1
 8002324:	2180      	movs	r1, #128	; 0x80
 8002326:	0289      	lsls	r1, r1, #10
 8002328:	4301      	orrs	r1, r0
 800232a:	6019      	str	r1, [r3, #0]
 800232c:	6811      	ldr	r1, [r2, #0]
 800232e:	4812      	ldr	r0, [pc, #72]	; (8002378 <fullBrake+0x16c>)
 8002330:	4008      	ands	r0, r1
 8002332:	2180      	movs	r1, #128	; 0x80
 8002334:	0589      	lsls	r1, r1, #22
 8002336:	4301      	orrs	r1, r0
 8002338:	6011      	str	r1, [r2, #0]
 800233a:	6819      	ldr	r1, [r3, #0]
 800233c:	480f      	ldr	r0, [pc, #60]	; (800237c <fullBrake+0x170>)
 800233e:	4008      	ands	r0, r1
 8002340:	2180      	movs	r1, #128	; 0x80
 8002342:	0309      	lsls	r1, r1, #12
 8002344:	4301      	orrs	r1, r0
 8002346:	2080      	movs	r0, #128	; 0x80
 8002348:	6019      	str	r1, [r3, #0]
 800234a:	6811      	ldr	r1, [r2, #0]
 800234c:	0600      	lsls	r0, r0, #24
 800234e:	0089      	lsls	r1, r1, #2
 8002350:	0889      	lsrs	r1, r1, #2
 8002352:	4301      	orrs	r1, r0
 8002354:	6011      	str	r1, [r2, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	4909      	ldr	r1, [pc, #36]	; (8002380 <fullBrake+0x174>)
 800235a:	4011      	ands	r1, r2
 800235c:	2280      	movs	r2, #128	; 0x80
 800235e:	0392      	lsls	r2, r2, #14
 8002360:	430a      	orrs	r2, r1
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	e79a      	b.n	800229c <fullBrake+0x90>
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	2000001c 	.word	0x2000001c
 800236c:	48000400 	.word	0x48000400
 8002370:	f3ffffff 	.word	0xf3ffffff
 8002374:	fffcffff 	.word	0xfffcffff
 8002378:	cfffffff 	.word	0xcfffffff
 800237c:	fff3ffff 	.word	0xfff3ffff
 8002380:	ffcfffff 	.word	0xffcfffff

08002384 <allpwm>:


void allpwm(){                        // for stepper_sine
	phaseA(pwm);
 8002384:	4b56      	ldr	r3, [pc, #344]	; (80024e0 <allpwm+0x15c>)
 8002386:	681b      	ldr	r3, [r3, #0]
		if (newPhase==1){
 8002388:	2b01      	cmp	r3, #1
 800238a:	d100      	bne.n	800238e <allpwm+0xa>
 800238c:	e079      	b.n	8002482 <allpwm+0xfe>
		if (newPhase==2){
 800238e:	2b02      	cmp	r3, #2
 8002390:	d041      	beq.n	8002416 <allpwm+0x92>
		if (newPhase==3){
 8002392:	2b03      	cmp	r3, #3
 8002394:	d13e      	bne.n	8002414 <allpwm+0x90>
 8002396:	4a53      	ldr	r2, [pc, #332]	; (80024e4 <allpwm+0x160>)
 8002398:	4953      	ldr	r1, [pc, #332]	; (80024e8 <allpwm+0x164>)
 800239a:	6813      	ldr	r3, [r2, #0]
 800239c:	4853      	ldr	r0, [pc, #332]	; (80024ec <allpwm+0x168>)
 800239e:	4019      	ands	r1, r3
 80023a0:	2380      	movs	r3, #128	; 0x80
 80023a2:	04db      	lsls	r3, r3, #19
 80023a4:	430b      	orrs	r3, r1
 80023a6:	6013      	str	r3, [r2, #0]
		LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_13, LL_GPIO_MODE_OUTPUT); GPIOB->BSRR = GPIO_PIN_13;
 80023a8:	2380      	movs	r3, #128	; 0x80
 80023aa:	019b      	lsls	r3, r3, #6
 80023ac:	6193      	str	r3, [r2, #24]
 80023ae:	2390      	movs	r3, #144	; 0x90
 80023b0:	05db      	lsls	r3, r3, #23
 80023b2:	6819      	ldr	r1, [r3, #0]
 80023b4:	4008      	ands	r0, r1
 80023b6:	2180      	movs	r1, #128	; 0x80
 80023b8:	0249      	lsls	r1, r1, #9
 80023ba:	4301      	orrs	r1, r0
 80023bc:	6019      	str	r1, [r3, #0]
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_8, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_8;
 80023be:	2180      	movs	r1, #128	; 0x80
 80023c0:	0049      	lsls	r1, r1, #1
 80023c2:	6299      	str	r1, [r3, #40]	; 0x28
 80023c4:	6811      	ldr	r1, [r2, #0]
 80023c6:	484a      	ldr	r0, [pc, #296]	; (80024f0 <allpwm+0x16c>)
 80023c8:	4008      	ands	r0, r1
 80023ca:	2180      	movs	r1, #128	; 0x80
 80023cc:	0549      	lsls	r1, r1, #21
 80023ce:	4301      	orrs	r1, r0
 80023d0:	6011      	str	r1, [r2, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_14, LL_GPIO_MODE_OUTPUT); GPIOB->BSRR = GPIO_PIN_14;
 80023d2:	2180      	movs	r1, #128	; 0x80
 80023d4:	01c9      	lsls	r1, r1, #7
 80023d6:	6191      	str	r1, [r2, #24]
 80023d8:	6819      	ldr	r1, [r3, #0]
 80023da:	4846      	ldr	r0, [pc, #280]	; (80024f4 <allpwm+0x170>)
 80023dc:	4008      	ands	r0, r1
 80023de:	2180      	movs	r1, #128	; 0x80
 80023e0:	02c9      	lsls	r1, r1, #11
 80023e2:	4301      	orrs	r1, r0
 80023e4:	6019      	str	r1, [r3, #0]
	LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_9, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_9;
 80023e6:	2180      	movs	r1, #128	; 0x80
 80023e8:	2080      	movs	r0, #128	; 0x80
 80023ea:	0089      	lsls	r1, r1, #2
 80023ec:	6299      	str	r1, [r3, #40]	; 0x28
 80023ee:	6811      	ldr	r1, [r2, #0]
 80023f0:	05c0      	lsls	r0, r0, #23
 80023f2:	0089      	lsls	r1, r1, #2
 80023f4:	0889      	lsrs	r1, r1, #2
 80023f6:	4301      	orrs	r1, r0
 80023f8:	6011      	str	r1, [r2, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_15, LL_GPIO_MODE_OUTPUT); GPIOB->BSRR = GPIO_PIN_15;
 80023fa:	2180      	movs	r1, #128	; 0x80
 80023fc:	0209      	lsls	r1, r1, #8
 80023fe:	6191      	str	r1, [r2, #24]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	493d      	ldr	r1, [pc, #244]	; (80024f8 <allpwm+0x174>)
 8002404:	4011      	ands	r1, r2
 8002406:	2280      	movs	r2, #128	; 0x80
 8002408:	0352      	lsls	r2, r2, #13
 800240a:	430a      	orrs	r2, r1
 800240c:	601a      	str	r2, [r3, #0]
	LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_10, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_10;
 800240e:	2280      	movs	r2, #128	; 0x80
 8002410:	00d2      	lsls	r2, r2, #3
 8002412:	629a      	str	r2, [r3, #40]	; 0x28
	phaseB(pwm);
	phaseC(pwm);
}
 8002414:	4770      	bx	lr
 8002416:	4a33      	ldr	r2, [pc, #204]	; (80024e4 <allpwm+0x160>)
 8002418:	4933      	ldr	r1, [pc, #204]	; (80024e8 <allpwm+0x164>)
 800241a:	6813      	ldr	r3, [r2, #0]
 800241c:	4833      	ldr	r0, [pc, #204]	; (80024ec <allpwm+0x168>)
 800241e:	4019      	ands	r1, r3
 8002420:	2380      	movs	r3, #128	; 0x80
 8002422:	04db      	lsls	r3, r3, #19
 8002424:	430b      	orrs	r3, r1
 8002426:	6013      	str	r3, [r2, #0]
		LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_13, LL_GPIO_MODE_OUTPUT); GPIOB->BRR = GPIO_PIN_13;
 8002428:	2380      	movs	r3, #128	; 0x80
 800242a:	019b      	lsls	r3, r3, #6
 800242c:	6293      	str	r3, [r2, #40]	; 0x28
 800242e:	2390      	movs	r3, #144	; 0x90
 8002430:	05db      	lsls	r3, r3, #23
 8002432:	6819      	ldr	r1, [r3, #0]
 8002434:	4008      	ands	r0, r1
 8002436:	2180      	movs	r1, #128	; 0x80
 8002438:	0249      	lsls	r1, r1, #9
 800243a:	4301      	orrs	r1, r0
 800243c:	6019      	str	r1, [r3, #0]
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_8, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_8;
 800243e:	2180      	movs	r1, #128	; 0x80
 8002440:	0049      	lsls	r1, r1, #1
 8002442:	6299      	str	r1, [r3, #40]	; 0x28
 8002444:	6811      	ldr	r1, [r2, #0]
 8002446:	482a      	ldr	r0, [pc, #168]	; (80024f0 <allpwm+0x16c>)
 8002448:	4008      	ands	r0, r1
 800244a:	2180      	movs	r1, #128	; 0x80
 800244c:	0549      	lsls	r1, r1, #21
 800244e:	4301      	orrs	r1, r0
 8002450:	6011      	str	r1, [r2, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_14, LL_GPIO_MODE_OUTPUT); GPIOB->BRR = GPIO_PIN_14;
 8002452:	2180      	movs	r1, #128	; 0x80
 8002454:	01c9      	lsls	r1, r1, #7
 8002456:	6291      	str	r1, [r2, #40]	; 0x28
 8002458:	6819      	ldr	r1, [r3, #0]
 800245a:	4826      	ldr	r0, [pc, #152]	; (80024f4 <allpwm+0x170>)
 800245c:	4008      	ands	r0, r1
 800245e:	2180      	movs	r1, #128	; 0x80
 8002460:	02c9      	lsls	r1, r1, #11
 8002462:	4301      	orrs	r1, r0
 8002464:	6019      	str	r1, [r3, #0]
	LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_9, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_9;
 8002466:	2180      	movs	r1, #128	; 0x80
 8002468:	2080      	movs	r0, #128	; 0x80
 800246a:	0089      	lsls	r1, r1, #2
 800246c:	6299      	str	r1, [r3, #40]	; 0x28
 800246e:	6811      	ldr	r1, [r2, #0]
 8002470:	05c0      	lsls	r0, r0, #23
 8002472:	0089      	lsls	r1, r1, #2
 8002474:	0889      	lsrs	r1, r1, #2
 8002476:	4301      	orrs	r1, r0
 8002478:	6011      	str	r1, [r2, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_15, LL_GPIO_MODE_OUTPUT); GPIOB->BRR = GPIO_PIN_15;
 800247a:	2180      	movs	r1, #128	; 0x80
 800247c:	0209      	lsls	r1, r1, #8
 800247e:	6291      	str	r1, [r2, #40]	; 0x28
 8002480:	e7be      	b.n	8002400 <allpwm+0x7c>
 8002482:	4a18      	ldr	r2, [pc, #96]	; (80024e4 <allpwm+0x160>)
 8002484:	4918      	ldr	r1, [pc, #96]	; (80024e8 <allpwm+0x164>)
 8002486:	6813      	ldr	r3, [r2, #0]
 8002488:	4818      	ldr	r0, [pc, #96]	; (80024ec <allpwm+0x168>)
 800248a:	4019      	ands	r1, r3
 800248c:	2380      	movs	r3, #128	; 0x80
 800248e:	051b      	lsls	r3, r3, #20
 8002490:	430b      	orrs	r3, r1
 8002492:	6013      	str	r3, [r2, #0]
 8002494:	2390      	movs	r3, #144	; 0x90
 8002496:	05db      	lsls	r3, r3, #23
 8002498:	6819      	ldr	r1, [r3, #0]
 800249a:	4008      	ands	r0, r1
 800249c:	2180      	movs	r1, #128	; 0x80
 800249e:	0289      	lsls	r1, r1, #10
 80024a0:	4301      	orrs	r1, r0
 80024a2:	6019      	str	r1, [r3, #0]
 80024a4:	6811      	ldr	r1, [r2, #0]
 80024a6:	4812      	ldr	r0, [pc, #72]	; (80024f0 <allpwm+0x16c>)
 80024a8:	4008      	ands	r0, r1
 80024aa:	2180      	movs	r1, #128	; 0x80
 80024ac:	0589      	lsls	r1, r1, #22
 80024ae:	4301      	orrs	r1, r0
 80024b0:	6011      	str	r1, [r2, #0]
 80024b2:	6819      	ldr	r1, [r3, #0]
 80024b4:	480f      	ldr	r0, [pc, #60]	; (80024f4 <allpwm+0x170>)
 80024b6:	4008      	ands	r0, r1
 80024b8:	2180      	movs	r1, #128	; 0x80
 80024ba:	0309      	lsls	r1, r1, #12
 80024bc:	4301      	orrs	r1, r0
 80024be:	2080      	movs	r0, #128	; 0x80
 80024c0:	6019      	str	r1, [r3, #0]
 80024c2:	6811      	ldr	r1, [r2, #0]
 80024c4:	0600      	lsls	r0, r0, #24
 80024c6:	0089      	lsls	r1, r1, #2
 80024c8:	0889      	lsrs	r1, r1, #2
 80024ca:	4301      	orrs	r1, r0
 80024cc:	6011      	str	r1, [r2, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	4909      	ldr	r1, [pc, #36]	; (80024f8 <allpwm+0x174>)
 80024d2:	4011      	ands	r1, r2
 80024d4:	2280      	movs	r2, #128	; 0x80
 80024d6:	0392      	lsls	r2, r2, #14
 80024d8:	430a      	orrs	r2, r1
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	e79a      	b.n	8002414 <allpwm+0x90>
 80024de:	46c0      	nop			; (mov r8, r8)
 80024e0:	2000002c 	.word	0x2000002c
 80024e4:	48000400 	.word	0x48000400
 80024e8:	f3ffffff 	.word	0xf3ffffff
 80024ec:	fffcffff 	.word	0xfffcffff
 80024f0:	cfffffff 	.word	0xcfffffff
 80024f4:	fff3ffff 	.word	0xfff3ffff
 80024f8:	ffcfffff 	.word	0xffcfffff

080024fc <detectInput>:

void detectInput(){
 80024fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024fe:	464e      	mov	r6, r9
 8002500:	46de      	mov	lr, fp
 8002502:	4657      	mov	r7, sl
 8002504:	4645      	mov	r5, r8
	smallestnumber = 20000;
 8002506:	4b3d      	ldr	r3, [pc, #244]	; (80025fc <detectInput+0x100>)
void detectInput(){
 8002508:	b5e0      	push	{r5, r6, r7, lr}
	smallestnumber = 20000;
 800250a:	4e3d      	ldr	r6, [pc, #244]	; (8002600 <detectInput+0x104>)
 800250c:	4699      	mov	r9, r3
 800250e:	601e      	str	r6, [r3, #0]
	dshot = 0;
 8002510:	4b3c      	ldr	r3, [pc, #240]	; (8002604 <detectInput+0x108>)
 8002512:	469b      	mov	fp, r3
 8002514:	2300      	movs	r3, #0
 8002516:	465a      	mov	r2, fp
 8002518:	7013      	strb	r3, [r2, #0]
	proshot = 0;
 800251a:	4a3b      	ldr	r2, [pc, #236]	; (8002608 <detectInput+0x10c>)
 800251c:	7013      	strb	r3, [r2, #0]
 800251e:	4692      	mov	sl, r2
	multishot = 0;
 8002520:	4a3a      	ldr	r2, [pc, #232]	; (800260c <detectInput+0x110>)
 8002522:	7013      	strb	r3, [r2, #0]
	oneshot42 = 0;
 8002524:	4a3a      	ldr	r2, [pc, #232]	; (8002610 <detectInput+0x114>)
 8002526:	7013      	strb	r3, [r2, #0]
	oneshot125 = 0;
 8002528:	4a3a      	ldr	r2, [pc, #232]	; (8002614 <detectInput+0x118>)
 800252a:	7013      	strb	r3, [r2, #0]
	servoPwm = 0;
 800252c:	4a3a      	ldr	r2, [pc, #232]	; (8002618 <detectInput+0x11c>)
 800252e:	7013      	strb	r3, [r2, #0]
	int lastnumber = dma_buffer[0];
 8002530:	4b3a      	ldr	r3, [pc, #232]	; (800261c <detectInput+0x120>)
 8002532:	681a      	ldr	r2, [r3, #0]
	for ( int j = 1 ; j < input_buffer_size; j++){
 8002534:	4b3a      	ldr	r3, [pc, #232]	; (8002620 <detectInput+0x124>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	2b01      	cmp	r3, #1
 800253a:	dd40      	ble.n	80025be <detectInput+0xc2>
 800253c:	4837      	ldr	r0, [pc, #220]	; (800261c <detectInput+0x120>)
 800253e:	0035      	movs	r5, r6
 8002540:	4680      	mov	r8, r0
 8002542:	4936      	ldr	r1, [pc, #216]	; (800261c <detectInput+0x120>)
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	3104      	adds	r1, #4
 8002548:	4498      	add	r8, r3

		if((dma_buffer[j] - lastnumber) < smallestnumber){ // blank space
 800254a:	6808      	ldr	r0, [r1, #0]
 800254c:	1a83      	subs	r3, r0, r2
 800254e:	001c      	movs	r4, r3
 8002550:	002a      	movs	r2, r5
 8002552:	42ab      	cmp	r3, r5
 8002554:	d300      	bcc.n	8002558 <detectInput+0x5c>
 8002556:	002c      	movs	r4, r5
 8002558:	0025      	movs	r5, r4
 800255a:	001f      	movs	r7, r3
 800255c:	4293      	cmp	r3, r2
 800255e:	d900      	bls.n	8002562 <detectInput+0x66>
 8002560:	0017      	movs	r7, r2
 8002562:	4293      	cmp	r3, r2
 8002564:	d300      	bcc.n	8002568 <detectInput+0x6c>
 8002566:	0033      	movs	r3, r6
 8002568:	3104      	adds	r1, #4
 800256a:	001e      	movs	r6, r3
			smallestnumber = dma_buffer[j] - lastnumber;

		}
		lastnumber = dma_buffer[j];
 800256c:	0002      	movs	r2, r0
	for ( int j = 1 ; j < input_buffer_size; j++){
 800256e:	4541      	cmp	r1, r8
 8002570:	d1eb      	bne.n	800254a <detectInput+0x4e>
 8002572:	464a      	mov	r2, r9
 8002574:	6013      	str	r3, [r2, #0]
	}

	if ((smallestnumber > 3)&&(smallestnumber < 22)){
 8002576:	1f3b      	subs	r3, r7, #4
 8002578:	2b11      	cmp	r3, #17
 800257a:	d830      	bhi.n	80025de <detectInput+0xe2>
		dshot = 1;
 800257c:	465a      	mov	r2, fp
 800257e:	2301      	movs	r3, #1
 8002580:	7013      	strb	r3, [r2, #0]
 8002582:	003a      	movs	r2, r7
 8002584:	3a65      	subs	r2, #101	; 0x65
	if ((smallestnumber > 40 )&&(smallestnumber < 80)){
		proshot = 1;
		TIM2->PSC=1;
		TIM2->CNT = 0xffff;
	}
	if ((smallestnumber > 100 )&&(smallestnumber < 400)){
 8002586:	2395      	movs	r3, #149	; 0x95
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	429a      	cmp	r2, r3
 800258c:	d813      	bhi.n	80025b6 <detectInput+0xba>
		multishot = 1;
 800258e:	3b2a      	subs	r3, #42	; 0x2a
 8002590:	4a1e      	ldr	r2, [pc, #120]	; (800260c <detectInput+0x110>)
 8002592:	3bff      	subs	r3, #255	; 0xff
 8002594:	7013      	strb	r3, [r2, #0]
		servoPwm = 1;
		TIM2->PSC = 47;
		TIM2->CNT = 0xffff;
	}

	if (smallestnumber == 0){
 8002596:	2c00      	cmp	r4, #0
 8002598:	d11a      	bne.n	80025d0 <detectInput+0xd4>
		inputSet = 0;
 800259a:	4b22      	ldr	r3, [pc, #136]	; (8002624 <detectInput+0x128>)
 800259c:	701c      	strb	r4, [r3, #0]
		inputSet = 1;

		HAL_Delay(50);
		//	playInputTune();
	}
	HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_4, dma_buffer , 64);
 800259e:	2340      	movs	r3, #64	; 0x40
 80025a0:	4a1e      	ldr	r2, [pc, #120]	; (800261c <detectInput+0x120>)
 80025a2:	210c      	movs	r1, #12
 80025a4:	4820      	ldr	r0, [pc, #128]	; (8002628 <detectInput+0x12c>)
 80025a6:	f7ff f8a3 	bl	80016f0 <HAL_TIM_IC_Start_DMA>
}
 80025aa:	bc3c      	pop	{r2, r3, r4, r5}
 80025ac:	4690      	mov	r8, r2
 80025ae:	4699      	mov	r9, r3
 80025b0:	46a2      	mov	sl, r4
 80025b2:	46ab      	mov	fp, r5
 80025b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (smallestnumber > 500){
 80025b6:	23fa      	movs	r3, #250	; 0xfa
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	429c      	cmp	r4, r3
 80025bc:	ddeb      	ble.n	8002596 <detectInput+0x9a>
		servoPwm = 1;
 80025be:	2301      	movs	r3, #1
 80025c0:	4a15      	ldr	r2, [pc, #84]	; (8002618 <detectInput+0x11c>)
 80025c2:	7013      	strb	r3, [r2, #0]
		TIM2->PSC = 47;
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	222f      	movs	r2, #47	; 0x2f
 80025c8:	05db      	lsls	r3, r3, #23
 80025ca:	629a      	str	r2, [r3, #40]	; 0x28
		TIM2->CNT = 0xffff;
 80025cc:	4a17      	ldr	r2, [pc, #92]	; (800262c <detectInput+0x130>)
 80025ce:	625a      	str	r2, [r3, #36]	; 0x24
		inputSet = 1;
 80025d0:	2201      	movs	r2, #1
 80025d2:	4b14      	ldr	r3, [pc, #80]	; (8002624 <detectInput+0x128>)
		HAL_Delay(50);
 80025d4:	2032      	movs	r0, #50	; 0x32
		inputSet = 1;
 80025d6:	701a      	strb	r2, [r3, #0]
		HAL_Delay(50);
 80025d8:	f7fd ff3c 	bl	8000454 <HAL_Delay>
 80025dc:	e7df      	b.n	800259e <detectInput+0xa2>
 80025de:	003a      	movs	r2, r7
	if ((smallestnumber > 40 )&&(smallestnumber < 80)){
 80025e0:	3f29      	subs	r7, #41	; 0x29
 80025e2:	3a65      	subs	r2, #101	; 0x65
 80025e4:	2f26      	cmp	r7, #38	; 0x26
 80025e6:	d8ce      	bhi.n	8002586 <detectInput+0x8a>
		proshot = 1;
 80025e8:	2101      	movs	r1, #1
 80025ea:	4653      	mov	r3, sl
 80025ec:	7019      	strb	r1, [r3, #0]
		TIM2->PSC=1;
 80025ee:	2380      	movs	r3, #128	; 0x80
 80025f0:	05db      	lsls	r3, r3, #23
 80025f2:	6299      	str	r1, [r3, #40]	; 0x28
		TIM2->CNT = 0xffff;
 80025f4:	490d      	ldr	r1, [pc, #52]	; (800262c <detectInput+0x130>)
 80025f6:	6259      	str	r1, [r3, #36]	; 0x24
 80025f8:	e7c5      	b.n	8002586 <detectInput+0x8a>
 80025fa:	46c0      	nop			; (mov r8, r8)
 80025fc:	20000034 	.word	0x20000034
 8002600:	00004e20 	.word	0x00004e20
 8002604:	200000b0 	.word	0x200000b0
 8002608:	200000d4 	.word	0x200000d4
 800260c:	200000b9 	.word	0x200000b9
 8002610:	200000c1 	.word	0x200000c1
 8002614:	200000c0 	.word	0x200000c0
 8002618:	200000e4 	.word	0x200000e4
 800261c:	2000019c 	.word	0x2000019c
 8002620:	20000018 	.word	0x20000018
 8002624:	200000b8 	.word	0x200000b8
 8002628:	200004c8 	.word	0x200004c8
 800262c:	0000ffff 	.word	0x0000ffff

08002630 <computeProshotDMA>:

void computeProshotDMA(){
 8002630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002632:	46d6      	mov	lr, sl
 8002634:	464f      	mov	r7, r9
 8002636:	4646      	mov	r6, r8
	int lastnumber = dma_buffer[0];
	for ( int j = 1 ; j < 9; j++){

		if(((dma_buffer[j] - lastnumber) > 1500) && ((dma_buffer[j] - lastnumber) < 50000)){ // blank space
 8002638:	4c66      	ldr	r4, [pc, #408]	; (80027d4 <computeProshotDMA+0x1a4>)
 800263a:	4a67      	ldr	r2, [pc, #412]	; (80027d8 <computeProshotDMA+0x1a8>)
 800263c:	6863      	ldr	r3, [r4, #4]
void computeProshotDMA(){
 800263e:	b5c0      	push	{r6, r7, lr}
		if(((dma_buffer[j] - lastnumber) > 1500) && ((dma_buffer[j] - lastnumber) < 50000)){ // blank space
 8002640:	1899      	adds	r1, r3, r2
 8002642:	6822      	ldr	r2, [r4, #0]
 8002644:	1a89      	subs	r1, r1, r2
 8002646:	4a65      	ldr	r2, [pc, #404]	; (80027dc <computeProshotDMA+0x1ac>)
 8002648:	4291      	cmp	r1, r2
 800264a:	d935      	bls.n	80026b8 <computeProshotDMA+0x88>
 800264c:	68a0      	ldr	r0, [r4, #8]
 800264e:	4962      	ldr	r1, [pc, #392]	; (80027d8 <computeProshotDMA+0x1a8>)
 8002650:	1841      	adds	r1, r0, r1
 8002652:	1acb      	subs	r3, r1, r3
 8002654:	4293      	cmp	r3, r2
 8002656:	d800      	bhi.n	800265a <computeProshotDMA+0x2a>
 8002658:	e0a1      	b.n	800279e <computeProshotDMA+0x16e>
 800265a:	68e3      	ldr	r3, [r4, #12]
 800265c:	495e      	ldr	r1, [pc, #376]	; (80027d8 <computeProshotDMA+0x1a8>)
 800265e:	1859      	adds	r1, r3, r1
 8002660:	1a09      	subs	r1, r1, r0
 8002662:	4291      	cmp	r1, r2
 8002664:	d800      	bhi.n	8002668 <computeProshotDMA+0x38>
 8002666:	e09d      	b.n	80027a4 <computeProshotDMA+0x174>
 8002668:	6920      	ldr	r0, [r4, #16]
 800266a:	495b      	ldr	r1, [pc, #364]	; (80027d8 <computeProshotDMA+0x1a8>)
 800266c:	1841      	adds	r1, r0, r1
 800266e:	1acb      	subs	r3, r1, r3
 8002670:	4293      	cmp	r3, r2
 8002672:	d800      	bhi.n	8002676 <computeProshotDMA+0x46>
 8002674:	e098      	b.n	80027a8 <computeProshotDMA+0x178>
 8002676:	6963      	ldr	r3, [r4, #20]
 8002678:	4957      	ldr	r1, [pc, #348]	; (80027d8 <computeProshotDMA+0x1a8>)
 800267a:	1859      	adds	r1, r3, r1
 800267c:	1a09      	subs	r1, r1, r0
 800267e:	4291      	cmp	r1, r2
 8002680:	d800      	bhi.n	8002684 <computeProshotDMA+0x54>
 8002682:	e094      	b.n	80027ae <computeProshotDMA+0x17e>
 8002684:	69a0      	ldr	r0, [r4, #24]
 8002686:	4954      	ldr	r1, [pc, #336]	; (80027d8 <computeProshotDMA+0x1a8>)
 8002688:	1841      	adds	r1, r0, r1
 800268a:	1acb      	subs	r3, r1, r3
 800268c:	4293      	cmp	r3, r2
 800268e:	d800      	bhi.n	8002692 <computeProshotDMA+0x62>
 8002690:	e08f      	b.n	80027b2 <computeProshotDMA+0x182>
 8002692:	69e3      	ldr	r3, [r4, #28]
 8002694:	4950      	ldr	r1, [pc, #320]	; (80027d8 <computeProshotDMA+0x1a8>)
 8002696:	1859      	adds	r1, r3, r1
 8002698:	1a09      	subs	r1, r1, r0
 800269a:	4291      	cmp	r1, r2
 800269c:	d800      	bhi.n	80026a0 <computeProshotDMA+0x70>
 800269e:	e08b      	b.n	80027b8 <computeProshotDMA+0x188>
 80026a0:	6a20      	ldr	r0, [r4, #32]
 80026a2:	494d      	ldr	r1, [pc, #308]	; (80027d8 <computeProshotDMA+0x1a8>)
 80026a4:	1841      	adds	r1, r0, r1
 80026a6:	1acb      	subs	r3, r1, r3
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d800      	bhi.n	80026ae <computeProshotDMA+0x7e>
 80026ac:	e086      	b.n	80027bc <computeProshotDMA+0x18c>
            }
			break;
		}
		lastnumber = dma_buffer[j];
	}
}
 80026ae:	bc1c      	pop	{r2, r3, r4}
 80026b0:	4690      	mov	r8, r2
 80026b2:	4699      	mov	r9, r3
 80026b4:	46a2      	mov	sl, r4
 80026b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for ( int j = 1 ; j < 9; j++){
 80026b8:	2501      	movs	r5, #1
			if ((dma_buffer[j+7] - dma_buffer[j])<10000){
 80026ba:	1dea      	adds	r2, r5, #7
 80026bc:	0092      	lsls	r2, r2, #2
 80026be:	58a7      	ldr	r7, [r4, r2]
 80026c0:	4a47      	ldr	r2, [pc, #284]	; (80027e0 <computeProshotDMA+0x1b0>)
 80026c2:	1afb      	subs	r3, r7, r3
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d921      	bls.n	800270c <computeProshotDMA+0xdc>
 80026c8:	4b46      	ldr	r3, [pc, #280]	; (80027e4 <computeProshotDMA+0x1b4>)
 80026ca:	681e      	ldr	r6, [r3, #0]
 80026cc:	4b46      	ldr	r3, [pc, #280]	; (80027e8 <computeProshotDMA+0x1b8>)
 80026ce:	6818      	ldr	r0, [r3, #0]
            if (calcCRC == checkCRC){
 80026d0:	4286      	cmp	r6, r0
 80026d2:	d1ec      	bne.n	80026ae <computeProshotDMA+0x7e>
			int tocheck = ((propulse[0]<<7 | propulse[1]<<3 | propulse[2]>>1));
 80026d4:	4a45      	ldr	r2, [pc, #276]	; (80027ec <computeProshotDMA+0x1bc>)
 80026d6:	6813      	ldr	r3, [r2, #0]
 80026d8:	6851      	ldr	r1, [r2, #4]
 80026da:	6892      	ldr	r2, [r2, #8]
 80026dc:	01db      	lsls	r3, r3, #7
 80026de:	00c9      	lsls	r1, r1, #3
 80026e0:	1052      	asrs	r2, r2, #1
 80026e2:	430b      	orrs	r3, r1
 80026e4:	4313      	orrs	r3, r2
			if (tocheck > 2047 || tocheck < 0){
 80026e6:	4a42      	ldr	r2, [pc, #264]	; (80027f0 <computeProshotDMA+0x1c0>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d8e0      	bhi.n	80026ae <computeProshotDMA+0x7e>
				if(tocheck > 47){
 80026ec:	2b2f      	cmp	r3, #47	; 0x2f
 80026ee:	dd04      	ble.n	80026fa <computeProshotDMA+0xca>
					dshotcommand = 0;
 80026f0:	2100      	movs	r1, #0
					newinput = tocheck;
 80026f2:	4a40      	ldr	r2, [pc, #256]	; (80027f4 <computeProshotDMA+0x1c4>)
 80026f4:	6013      	str	r3, [r2, #0]
					dshotcommand = 0;
 80026f6:	4a40      	ldr	r2, [pc, #256]	; (80027f8 <computeProshotDMA+0x1c8>)
 80026f8:	6011      	str	r1, [r2, #0]
				if ((tocheck <= 47)&& (tocheck > 0)){
 80026fa:	1e5a      	subs	r2, r3, #1
 80026fc:	2a2e      	cmp	r2, #46	; 0x2e
 80026fe:	d860      	bhi.n	80027c2 <computeProshotDMA+0x192>
					newinput = 0;
 8002700:	2100      	movs	r1, #0
 8002702:	4a3c      	ldr	r2, [pc, #240]	; (80027f4 <computeProshotDMA+0x1c4>)
 8002704:	6011      	str	r1, [r2, #0]
					dshotcommand = tocheck;    //  todo
 8002706:	4a3c      	ldr	r2, [pc, #240]	; (80027f8 <computeProshotDMA+0x1c8>)
 8002708:	6013      	str	r3, [r2, #0]
 800270a:	e7d0      	b.n	80026ae <computeProshotDMA+0x7e>
					propulse[i] = (((dma_buffer[j + i*2 +1] - dma_buffer[j + i*2])) - 23)/3;
 800270c:	1c6b      	adds	r3, r5, #1
 800270e:	00aa      	lsls	r2, r5, #2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	58e0      	ldr	r0, [r4, r3]
 8002714:	58a3      	ldr	r3, [r4, r2]
 8002716:	2103      	movs	r1, #3
 8002718:	1ac0      	subs	r0, r0, r3
 800271a:	3817      	subs	r0, #23
 800271c:	f7fd fcf4 	bl	8000108 <__udivsi3>
 8002720:	4b32      	ldr	r3, [pc, #200]	; (80027ec <computeProshotDMA+0x1bc>)
 8002722:	1cea      	adds	r2, r5, #3
 8002724:	4698      	mov	r8, r3
 8002726:	6018      	str	r0, [r3, #0]
 8002728:	1cab      	adds	r3, r5, #2
 800272a:	0092      	lsls	r2, r2, #2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	58e3      	ldr	r3, [r4, r3]
 8002730:	4682      	mov	sl, r0
 8002732:	58a0      	ldr	r0, [r4, r2]
 8002734:	2103      	movs	r1, #3
 8002736:	1ac0      	subs	r0, r0, r3
 8002738:	3817      	subs	r0, #23
 800273a:	f7fd fce5 	bl	8000108 <__udivsi3>
 800273e:	4643      	mov	r3, r8
 8002740:	1d6a      	adds	r2, r5, #5
 8002742:	6058      	str	r0, [r3, #4]
 8002744:	1d2b      	adds	r3, r5, #4
 8002746:	0092      	lsls	r2, r2, #2
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	58e3      	ldr	r3, [r4, r3]
 800274c:	0006      	movs	r6, r0
 800274e:	58a0      	ldr	r0, [r4, r2]
 8002750:	2103      	movs	r1, #3
 8002752:	1ac0      	subs	r0, r0, r3
 8002754:	3817      	subs	r0, #23
 8002756:	f7fd fcd7 	bl	8000108 <__udivsi3>
 800275a:	4643      	mov	r3, r8
 800275c:	3506      	adds	r5, #6
 800275e:	00ad      	lsls	r5, r5, #2
 8002760:	6098      	str	r0, [r3, #8]
 8002762:	4681      	mov	r9, r0
 8002764:	5960      	ldr	r0, [r4, r5]
 8002766:	2103      	movs	r1, #3
 8002768:	1a38      	subs	r0, r7, r0
 800276a:	3817      	subs	r0, #23
 800276c:	f7fd fccc 	bl	8000108 <__udivsi3>
 8002770:	4643      	mov	r3, r8
 8002772:	60d8      	str	r0, [r3, #12]
				calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 8002774:	4653      	mov	r3, sl
 8002776:	405e      	eors	r6, r3
 8002778:	464b      	mov	r3, r9
 800277a:	405e      	eors	r6, r3
						|(propulse[0]^propulse[1]^propulse[2])<<2
 800277c:	00b2      	lsls	r2, r6, #2
				calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 800277e:	00f3      	lsls	r3, r6, #3
						|(propulse[0]^propulse[1]^propulse[2])<<2
 8002780:	4313      	orrs	r3, r2
						|(propulse[0]^propulse[1]^propulse[2]));
 8002782:	4333      	orrs	r3, r6
						|(propulse[0]^propulse[1]^propulse[2])<<1
 8002784:	0076      	lsls	r6, r6, #1
						|(propulse[0]^propulse[1]^propulse[2]));
 8002786:	431e      	orrs	r6, r3
				calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 8002788:	4b16      	ldr	r3, [pc, #88]	; (80027e4 <computeProshotDMA+0x1b4>)
				checkCRC = (propulse[3]<<3 | propulse[3]<<2 | propulse[3]<<1 | propulse[3]);
 800278a:	0082      	lsls	r2, r0, #2
				calcCRC = ((propulse[0]^propulse[1]^propulse[2])<<3
 800278c:	601e      	str	r6, [r3, #0]
				checkCRC = (propulse[3]<<3 | propulse[3]<<2 | propulse[3]<<1 | propulse[3]);
 800278e:	00c3      	lsls	r3, r0, #3
 8002790:	4313      	orrs	r3, r2
 8002792:	4303      	orrs	r3, r0
 8002794:	0040      	lsls	r0, r0, #1
 8002796:	4318      	orrs	r0, r3
 8002798:	4b13      	ldr	r3, [pc, #76]	; (80027e8 <computeProshotDMA+0x1b8>)
 800279a:	6018      	str	r0, [r3, #0]
 800279c:	e798      	b.n	80026d0 <computeProshotDMA+0xa0>
		if(((dma_buffer[j] - lastnumber) > 1500) && ((dma_buffer[j] - lastnumber) < 50000)){ // blank space
 800279e:	0003      	movs	r3, r0
	for ( int j = 1 ; j < 9; j++){
 80027a0:	2502      	movs	r5, #2
 80027a2:	e78a      	b.n	80026ba <computeProshotDMA+0x8a>
 80027a4:	2503      	movs	r5, #3
 80027a6:	e788      	b.n	80026ba <computeProshotDMA+0x8a>
		if(((dma_buffer[j] - lastnumber) > 1500) && ((dma_buffer[j] - lastnumber) < 50000)){ // blank space
 80027a8:	0003      	movs	r3, r0
	for ( int j = 1 ; j < 9; j++){
 80027aa:	2504      	movs	r5, #4
 80027ac:	e785      	b.n	80026ba <computeProshotDMA+0x8a>
 80027ae:	2505      	movs	r5, #5
 80027b0:	e783      	b.n	80026ba <computeProshotDMA+0x8a>
		if(((dma_buffer[j] - lastnumber) > 1500) && ((dma_buffer[j] - lastnumber) < 50000)){ // blank space
 80027b2:	0003      	movs	r3, r0
	for ( int j = 1 ; j < 9; j++){
 80027b4:	2506      	movs	r5, #6
 80027b6:	e780      	b.n	80026ba <computeProshotDMA+0x8a>
 80027b8:	2507      	movs	r5, #7
 80027ba:	e77e      	b.n	80026ba <computeProshotDMA+0x8a>
		if(((dma_buffer[j] - lastnumber) > 1500) && ((dma_buffer[j] - lastnumber) < 50000)){ // blank space
 80027bc:	0003      	movs	r3, r0
	for ( int j = 1 ; j < 9; j++){
 80027be:	2508      	movs	r5, #8
 80027c0:	e77b      	b.n	80026ba <computeProshotDMA+0x8a>
				if (tocheck == 0){
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d000      	beq.n	80027c8 <computeProshotDMA+0x198>
 80027c6:	e772      	b.n	80026ae <computeProshotDMA+0x7e>
					newinput = 0;
 80027c8:	4a0a      	ldr	r2, [pc, #40]	; (80027f4 <computeProshotDMA+0x1c4>)
 80027ca:	6013      	str	r3, [r2, #0]
					dshotcommand = 0;
 80027cc:	4a0a      	ldr	r2, [pc, #40]	; (80027f8 <computeProshotDMA+0x1c8>)
 80027ce:	6013      	str	r3, [r2, #0]
}
 80027d0:	e76d      	b.n	80026ae <computeProshotDMA+0x7e>
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	2000019c 	.word	0x2000019c
 80027d8:	fffffa23 	.word	0xfffffa23
 80027dc:	0000bd72 	.word	0x0000bd72
 80027e0:	0000270f 	.word	0x0000270f
 80027e4:	20000120 	.word	0x20000120
 80027e8:	20000138 	.word	0x20000138
 80027ec:	200000c4 	.word	0x200000c4
 80027f0:	000007ff 	.word	0x000007ff
 80027f4:	200000bc 	.word	0x200000bc
 80027f8:	20000140 	.word	0x20000140

080027fc <computeDshotDMA>:
		lastnumber = dma_buffer[j];
	}
}


void computeDshotDMA(){
 80027fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027fe:	464e      	mov	r6, r9
 8002800:	4645      	mov	r5, r8
 8002802:	46de      	mov	lr, fp
 8002804:	4657      	mov	r7, sl
 8002806:	b5e0      	push	{r5, r6, r7, lr}

	int lastnumber = dma_buffer[0];
	for ( int j = 1 ; j < input_buffer_size; j++){
 8002808:	4baf      	ldr	r3, [pc, #700]	; (8002ac8 <computeDshotDMA+0x2cc>)
	int lastnumber = dma_buffer[0];
 800280a:	4db0      	ldr	r5, [pc, #704]	; (8002acc <computeDshotDMA+0x2d0>)
	for ( int j = 1 ; j < input_buffer_size; j++){
 800280c:	681e      	ldr	r6, [r3, #0]
void computeDshotDMA(){
 800280e:	b08b      	sub	sp, #44	; 0x2c
	int lastnumber = dma_buffer[0];
 8002810:	6829      	ldr	r1, [r5, #0]
	for ( int j = 1 ; j < input_buffer_size; j++){
 8002812:	2e01      	cmp	r6, #1
 8002814:	dd15      	ble.n	8002842 <computeDshotDMA+0x46>

		if(((dma_buffer[j] - lastnumber) > 50) && ((dma_buffer[j] - lastnumber) < 65000)){ // blank space
 8002816:	686b      	ldr	r3, [r5, #4]
 8002818:	48ad      	ldr	r0, [pc, #692]	; (8002ad0 <computeDshotDMA+0x2d4>)
 800281a:	001a      	movs	r2, r3
 800281c:	3a33      	subs	r2, #51	; 0x33
 800281e:	1a52      	subs	r2, r2, r1
 8002820:	4282      	cmp	r2, r0
 8002822:	d915      	bls.n	8002850 <computeDshotDMA+0x54>
 8002824:	0029      	movs	r1, r5
 8002826:	2733      	movs	r7, #51	; 0x33
 8002828:	3108      	adds	r1, #8
 800282a:	2401      	movs	r4, #1
 800282c:	427f      	negs	r7, r7
 800282e:	e005      	b.n	800283c <computeDshotDMA+0x40>
 8002830:	c904      	ldmia	r1!, {r2}
 8002832:	1afb      	subs	r3, r7, r3
 8002834:	189b      	adds	r3, r3, r2
 8002836:	4283      	cmp	r3, r0
 8002838:	d90b      	bls.n	8002852 <computeDshotDMA+0x56>
 800283a:	0013      	movs	r3, r2
	for ( int j = 1 ; j < input_buffer_size; j++){
 800283c:	3401      	adds	r4, #1
 800283e:	42b4      	cmp	r4, r6
 8002840:	d1f6      	bne.n	8002830 <computeDshotDMA+0x34>

			break;
		}
		lastnumber = dma_buffer[j];
	}
}
 8002842:	b00b      	add	sp, #44	; 0x2c
 8002844:	bc3c      	pop	{r2, r3, r4, r5}
 8002846:	4690      	mov	r8, r2
 8002848:	4699      	mov	r9, r3
 800284a:	46a2      	mov	sl, r4
 800284c:	46ab      	mov	fp, r5
 800284e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	for ( int j = 1 ; j < input_buffer_size; j++){
 8002850:	2401      	movs	r4, #1
				dpulse[i] = ((dma_buffer[j + i*2 +1] - dma_buffer[j + i*2]) / 13) - 1;
 8002852:	1c63      	adds	r3, r4, #1
 8002854:	00a2      	lsls	r2, r4, #2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	58e8      	ldr	r0, [r5, r3]
 800285a:	58ab      	ldr	r3, [r5, r2]
 800285c:	210d      	movs	r1, #13
 800285e:	1ac0      	subs	r0, r0, r3
 8002860:	f7fd fc52 	bl	8000108 <__udivsi3>
 8002864:	1ce2      	adds	r2, r4, #3
 8002866:	1ca3      	adds	r3, r4, #2
 8002868:	0092      	lsls	r2, r2, #2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4f99      	ldr	r7, [pc, #612]	; (8002ad4 <computeDshotDMA+0x2d8>)
 800286e:	1e46      	subs	r6, r0, #1
 8002870:	58eb      	ldr	r3, [r5, r3]
 8002872:	58a8      	ldr	r0, [r5, r2]
 8002874:	603e      	str	r6, [r7, #0]
 8002876:	1ac0      	subs	r0, r0, r3
 8002878:	210d      	movs	r1, #13
 800287a:	f7fd fc45 	bl	8000108 <__udivsi3>
 800287e:	1e43      	subs	r3, r0, #1
 8002880:	607b      	str	r3, [r7, #4]
 8002882:	9302      	str	r3, [sp, #8]
 8002884:	1d62      	adds	r2, r4, #5
 8002886:	1d23      	adds	r3, r4, #4
 8002888:	0092      	lsls	r2, r2, #2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	58a8      	ldr	r0, [r5, r2]
 800288e:	58eb      	ldr	r3, [r5, r3]
 8002890:	210d      	movs	r1, #13
 8002892:	1ac0      	subs	r0, r0, r3
 8002894:	f7fd fc38 	bl	8000108 <__udivsi3>
 8002898:	1e42      	subs	r2, r0, #1
 800289a:	4691      	mov	r9, r2
 800289c:	60ba      	str	r2, [r7, #8]
 800289e:	1da3      	adds	r3, r4, #6
 80028a0:	1de2      	adds	r2, r4, #7
 80028a2:	0092      	lsls	r2, r2, #2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	58a8      	ldr	r0, [r5, r2]
 80028a8:	58eb      	ldr	r3, [r5, r3]
 80028aa:	210d      	movs	r1, #13
 80028ac:	1ac0      	subs	r0, r0, r3
 80028ae:	f7fd fc2b 	bl	8000108 <__udivsi3>
 80028b2:	0021      	movs	r1, r4
 80028b4:	1e42      	subs	r2, r0, #1
 80028b6:	3109      	adds	r1, #9
 80028b8:	60fa      	str	r2, [r7, #12]
 80028ba:	9203      	str	r2, [sp, #12]
 80028bc:	008a      	lsls	r2, r1, #2
 80028be:	3901      	subs	r1, #1
 80028c0:	008b      	lsls	r3, r1, #2
 80028c2:	58a8      	ldr	r0, [r5, r2]
 80028c4:	58eb      	ldr	r3, [r5, r3]
 80028c6:	210d      	movs	r1, #13
 80028c8:	1ac0      	subs	r0, r0, r3
 80028ca:	f7fd fc1d 	bl	8000108 <__udivsi3>
 80028ce:	1e41      	subs	r1, r0, #1
 80028d0:	0020      	movs	r0, r4
 80028d2:	300b      	adds	r0, #11
 80028d4:	0082      	lsls	r2, r0, #2
 80028d6:	3801      	subs	r0, #1
 80028d8:	0083      	lsls	r3, r0, #2
 80028da:	58eb      	ldr	r3, [r5, r3]
 80028dc:	58a8      	ldr	r0, [r5, r2]
 80028de:	6139      	str	r1, [r7, #16]
 80028e0:	9104      	str	r1, [sp, #16]
 80028e2:	1ac0      	subs	r0, r0, r3
 80028e4:	210d      	movs	r1, #13
 80028e6:	f7fd fc0f 	bl	8000108 <__udivsi3>
 80028ea:	0022      	movs	r2, r4
 80028ec:	0023      	movs	r3, r4
 80028ee:	320d      	adds	r2, #13
 80028f0:	330c      	adds	r3, #12
 80028f2:	3801      	subs	r0, #1
 80028f4:	0092      	lsls	r2, r2, #2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	58eb      	ldr	r3, [r5, r3]
 80028fa:	6178      	str	r0, [r7, #20]
 80028fc:	9005      	str	r0, [sp, #20]
 80028fe:	58a8      	ldr	r0, [r5, r2]
 8002900:	210d      	movs	r1, #13
 8002902:	1ac0      	subs	r0, r0, r3
 8002904:	f7fd fc00 	bl	8000108 <__udivsi3>
 8002908:	1e43      	subs	r3, r0, #1
 800290a:	4698      	mov	r8, r3
 800290c:	61bb      	str	r3, [r7, #24]
 800290e:	0022      	movs	r2, r4
 8002910:	0023      	movs	r3, r4
 8002912:	320f      	adds	r2, #15
 8002914:	330e      	adds	r3, #14
 8002916:	0092      	lsls	r2, r2, #2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	58a8      	ldr	r0, [r5, r2]
 800291c:	58eb      	ldr	r3, [r5, r3]
 800291e:	210d      	movs	r1, #13
 8002920:	1ac0      	subs	r0, r0, r3
 8002922:	f7fd fbf1 	bl	8000108 <__udivsi3>
 8002926:	1e43      	subs	r3, r0, #1
 8002928:	469a      	mov	sl, r3
 800292a:	61fb      	str	r3, [r7, #28]
 800292c:	0022      	movs	r2, r4
 800292e:	0023      	movs	r3, r4
 8002930:	3211      	adds	r2, #17
 8002932:	3310      	adds	r3, #16
 8002934:	0092      	lsls	r2, r2, #2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	58a8      	ldr	r0, [r5, r2]
 800293a:	58eb      	ldr	r3, [r5, r3]
 800293c:	210d      	movs	r1, #13
 800293e:	1ac0      	subs	r0, r0, r3
 8002940:	f7fd fbe2 	bl	8000108 <__udivsi3>
 8002944:	0022      	movs	r2, r4
 8002946:	1e43      	subs	r3, r0, #1
 8002948:	0020      	movs	r0, r4
 800294a:	3213      	adds	r2, #19
 800294c:	3012      	adds	r0, #18
 800294e:	623b      	str	r3, [r7, #32]
 8002950:	0092      	lsls	r2, r2, #2
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	0083      	lsls	r3, r0, #2
 8002956:	58eb      	ldr	r3, [r5, r3]
 8002958:	58a8      	ldr	r0, [r5, r2]
 800295a:	210d      	movs	r1, #13
 800295c:	1ac0      	subs	r0, r0, r3
 800295e:	f7fd fbd3 	bl	8000108 <__udivsi3>
 8002962:	1e42      	subs	r2, r0, #1
 8002964:	0020      	movs	r0, r4
 8002966:	3015      	adds	r0, #21
 8002968:	627a      	str	r2, [r7, #36]	; 0x24
 800296a:	9201      	str	r2, [sp, #4]
 800296c:	0082      	lsls	r2, r0, #2
 800296e:	3801      	subs	r0, #1
 8002970:	0083      	lsls	r3, r0, #2
 8002972:	58eb      	ldr	r3, [r5, r3]
 8002974:	58a8      	ldr	r0, [r5, r2]
 8002976:	210d      	movs	r1, #13
 8002978:	1ac0      	subs	r0, r0, r3
 800297a:	f7fd fbc5 	bl	8000108 <__udivsi3>
 800297e:	3801      	subs	r0, #1
 8002980:	4683      	mov	fp, r0
 8002982:	62b8      	str	r0, [r7, #40]	; 0x28
 8002984:	0020      	movs	r0, r4
 8002986:	3017      	adds	r0, #23
 8002988:	0082      	lsls	r2, r0, #2
 800298a:	3801      	subs	r0, #1
 800298c:	0083      	lsls	r3, r0, #2
 800298e:	58eb      	ldr	r3, [r5, r3]
 8002990:	58a8      	ldr	r0, [r5, r2]
 8002992:	210d      	movs	r1, #13
 8002994:	1ac0      	subs	r0, r0, r3
 8002996:	f7fd fbb7 	bl	8000108 <__udivsi3>
 800299a:	0022      	movs	r2, r4
 800299c:	0023      	movs	r3, r4
 800299e:	3219      	adds	r2, #25
 80029a0:	3318      	adds	r3, #24
 80029a2:	3801      	subs	r0, #1
 80029a4:	0092      	lsls	r2, r2, #2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	58eb      	ldr	r3, [r5, r3]
 80029aa:	62f8      	str	r0, [r7, #44]	; 0x2c
 80029ac:	9006      	str	r0, [sp, #24]
 80029ae:	58a8      	ldr	r0, [r5, r2]
 80029b0:	210d      	movs	r1, #13
 80029b2:	1ac0      	subs	r0, r0, r3
 80029b4:	f7fd fba8 	bl	8000108 <__udivsi3>
 80029b8:	0022      	movs	r2, r4
 80029ba:	0023      	movs	r3, r4
 80029bc:	321b      	adds	r2, #27
 80029be:	331a      	adds	r3, #26
 80029c0:	0092      	lsls	r2, r2, #2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	1e41      	subs	r1, r0, #1
 80029c6:	58eb      	ldr	r3, [r5, r3]
 80029c8:	58a8      	ldr	r0, [r5, r2]
 80029ca:	6339      	str	r1, [r7, #48]	; 0x30
 80029cc:	9107      	str	r1, [sp, #28]
 80029ce:	1ac0      	subs	r0, r0, r3
 80029d0:	210d      	movs	r1, #13
 80029d2:	f7fd fb99 	bl	8000108 <__udivsi3>
 80029d6:	1e43      	subs	r3, r0, #1
 80029d8:	637b      	str	r3, [r7, #52]	; 0x34
 80029da:	9308      	str	r3, [sp, #32]
 80029dc:	0022      	movs	r2, r4
 80029de:	0023      	movs	r3, r4
 80029e0:	321d      	adds	r2, #29
 80029e2:	331c      	adds	r3, #28
 80029e4:	0092      	lsls	r2, r2, #2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	58a8      	ldr	r0, [r5, r2]
 80029ea:	58eb      	ldr	r3, [r5, r3]
 80029ec:	210d      	movs	r1, #13
 80029ee:	1ac0      	subs	r0, r0, r3
 80029f0:	f7fd fb8a 	bl	8000108 <__udivsi3>
 80029f4:	0023      	movs	r3, r4
 80029f6:	341e      	adds	r4, #30
 80029f8:	331f      	adds	r3, #31
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	00a4      	lsls	r4, r4, #2
 80029fe:	1e42      	subs	r2, r0, #1
 8002a00:	58e8      	ldr	r0, [r5, r3]
 8002a02:	592b      	ldr	r3, [r5, r4]
 8002a04:	63ba      	str	r2, [r7, #56]	; 0x38
 8002a06:	1ac0      	subs	r0, r0, r3
 8002a08:	210d      	movs	r1, #13
 8002a0a:	9209      	str	r2, [sp, #36]	; 0x24
 8002a0c:	f7fd fb7c 	bl	8000108 <__udivsi3>
			int tocheck = (
 8002a10:	465d      	mov	r5, fp
				dpulse[i] = ((dma_buffer[j + i*2 +1] - dma_buffer[j + i*2]) / 13) - 1;
 8002a12:	1e42      	subs	r2, r0, #1
					dpulse[0]<<10 | dpulse[1]<<9 | dpulse[2]<<8 | dpulse[3]<<7
 8002a14:	9802      	ldr	r0, [sp, #8]
 8002a16:	02b3      	lsls	r3, r6, #10
 8002a18:	0241      	lsls	r1, r0, #9
 8002a1a:	430b      	orrs	r3, r1
			int tocheck = (
 8002a1c:	432b      	orrs	r3, r5
					dpulse[0]<<10 | dpulse[1]<<9 | dpulse[2]<<8 | dpulse[3]<<7
 8002a1e:	464d      	mov	r5, r9
 8002a20:	9c03      	ldr	r4, [sp, #12]
 8002a22:	0229      	lsls	r1, r5, #8
					| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 8002a24:	9d04      	ldr	r5, [sp, #16]
				dpulse[i] = ((dma_buffer[j + i*2 +1] - dma_buffer[j + i*2]) / 13) - 1;
 8002a26:	63fa      	str	r2, [r7, #60]	; 0x3c
			int tocheck = (
 8002a28:	430b      	orrs	r3, r1
					| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 8002a2a:	9f05      	ldr	r7, [sp, #20]
					dpulse[0]<<10 | dpulse[1]<<9 | dpulse[2]<<8 | dpulse[3]<<7
 8002a2c:	01e1      	lsls	r1, r4, #7
			int tocheck = (
 8002a2e:	430b      	orrs	r3, r1
					| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 8002a30:	01a9      	lsls	r1, r5, #6
			int tocheck = (
 8002a32:	430b      	orrs	r3, r1
					| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 8002a34:	0179      	lsls	r1, r7, #5
			int tocheck = (
 8002a36:	430b      	orrs	r3, r1
					| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 8002a38:	4641      	mov	r1, r8
 8002a3a:	0109      	lsls	r1, r1, #4
			int tocheck = (
 8002a3c:	430b      	orrs	r3, r1
					| dpulse[4]<<6 | dpulse[5]<<5 | dpulse[6]<<4 | dpulse[7]<<3
 8002a3e:	4651      	mov	r1, sl
 8002a40:	00c9      	lsls	r1, r1, #3
			int tocheck = (
 8002a42:	430b      	orrs	r3, r1
					| dpulse[8]<<2 | dpulse[9]<<1 | dpulse[10]);
 8002a44:	9900      	ldr	r1, [sp, #0]
					|(dpulse[1]^dpulse[5]^dpulse[9])<<2
 8002a46:	4078      	eors	r0, r7
					| dpulse[8]<<2 | dpulse[9]<<1 | dpulse[10]);
 8002a48:	0089      	lsls	r1, r1, #2
			int tocheck = (
 8002a4a:	430b      	orrs	r3, r1
					| dpulse[8]<<2 | dpulse[9]<<1 | dpulse[10]);
 8002a4c:	9901      	ldr	r1, [sp, #4]
 8002a4e:	0049      	lsls	r1, r1, #1
			int tocheck = (
 8002a50:	430b      	orrs	r3, r1
			uint8_t calcCRC = ((dpulse[0]^dpulse[4]^dpulse[8])<<3
 8002a52:	0029      	movs	r1, r5
 8002a54:	9d00      	ldr	r5, [sp, #0]
 8002a56:	4071      	eors	r1, r6
 8002a58:	4069      	eors	r1, r5
					|(dpulse[1]^dpulse[5]^dpulse[9])<<2
 8002a5a:	9d01      	ldr	r5, [sp, #4]
			uint8_t calcCRC = ((dpulse[0]^dpulse[4]^dpulse[8])<<3
 8002a5c:	00c9      	lsls	r1, r1, #3
					|(dpulse[1]^dpulse[5]^dpulse[9])<<2
 8002a5e:	4068      	eors	r0, r5
 8002a60:	0080      	lsls	r0, r0, #2
 8002a62:	4301      	orrs	r1, r0
					|(dpulse[3]^dpulse[7]^dpulse[11])
 8002a64:	4655      	mov	r5, sl
 8002a66:	0020      	movs	r0, r4
					|(dpulse[2]^dpulse[6]^dpulse[10])<<1
 8002a68:	4646      	mov	r6, r8
					|(dpulse[3]^dpulse[7]^dpulse[11])
 8002a6a:	4068      	eors	r0, r5
					|(dpulse[2]^dpulse[6]^dpulse[10])<<1
 8002a6c:	464d      	mov	r5, r9
					|(dpulse[3]^dpulse[7]^dpulse[11])
 8002a6e:	9c06      	ldr	r4, [sp, #24]
					|(dpulse[2]^dpulse[6]^dpulse[10])<<1
 8002a70:	4075      	eors	r5, r6
					|(dpulse[3]^dpulse[7]^dpulse[11])
 8002a72:	4060      	eors	r0, r4
 8002a74:	4301      	orrs	r1, r0
					|(dpulse[2]^dpulse[6]^dpulse[10])<<1
 8002a76:	0028      	movs	r0, r5
 8002a78:	465d      	mov	r5, fp
 8002a7a:	4068      	eors	r0, r5
 8002a7c:	0040      	lsls	r0, r0, #1
					|(dpulse[3]^dpulse[7]^dpulse[11])
 8002a7e:	4301      	orrs	r1, r0
			uint8_t checkCRC = (dpulse[12]<<3 | dpulse[13]<<2 | dpulse[14]<<1 | dpulse[15]);
 8002a80:	9c08      	ldr	r4, [sp, #32]
 8002a82:	9807      	ldr	r0, [sp, #28]
 8002a84:	00a4      	lsls	r4, r4, #2
 8002a86:	00c0      	lsls	r0, r0, #3
 8002a88:	4320      	orrs	r0, r4
 8002a8a:	4302      	orrs	r2, r0
 8002a8c:	9809      	ldr	r0, [sp, #36]	; 0x24
			if(calcCRC == checkCRC){
 8002a8e:	b249      	sxtb	r1, r1
			uint8_t checkCRC = (dpulse[12]<<3 | dpulse[13]<<2 | dpulse[14]<<1 | dpulse[15]);
 8002a90:	0040      	lsls	r0, r0, #1
 8002a92:	4302      	orrs	r2, r0
			if(calcCRC == checkCRC){
 8002a94:	b252      	sxtb	r2, r2
 8002a96:	4291      	cmp	r1, r2
 8002a98:	d00e      	beq.n	8002ab8 <computeDshotDMA+0x2bc>
			if ((tocheck <= 47)&& (tocheck > 0)){
 8002a9a:	1e5a      	subs	r2, r3, #1
 8002a9c:	2a2e      	cmp	r2, #46	; 0x2e
 8002a9e:	d805      	bhi.n	8002aac <computeDshotDMA+0x2b0>
				newinput = 0;
 8002aa0:	2100      	movs	r1, #0
 8002aa2:	4a0d      	ldr	r2, [pc, #52]	; (8002ad8 <computeDshotDMA+0x2dc>)
 8002aa4:	6011      	str	r1, [r2, #0]
				dshotcommand = tocheck;    //  todo
 8002aa6:	4a0d      	ldr	r2, [pc, #52]	; (8002adc <computeDshotDMA+0x2e0>)
 8002aa8:	6013      	str	r3, [r2, #0]
 8002aaa:	e6ca      	b.n	8002842 <computeDshotDMA+0x46>
			if (tocheck == 0){
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d000      	beq.n	8002ab2 <computeDshotDMA+0x2b6>
 8002ab0:	e6c7      	b.n	8002842 <computeDshotDMA+0x46>
				newinput = 0;
 8002ab2:	4a09      	ldr	r2, [pc, #36]	; (8002ad8 <computeDshotDMA+0x2dc>)
 8002ab4:	6013      	str	r3, [r2, #0]
 8002ab6:	e6c4      	b.n	8002842 <computeDshotDMA+0x46>
				if (tocheck > 47){
 8002ab8:	2b2f      	cmp	r3, #47	; 0x2f
 8002aba:	ddee      	ble.n	8002a9a <computeDshotDMA+0x29e>
                    dshotcommand = 0;
 8002abc:	2100      	movs	r1, #0
					newinput = tocheck;
 8002abe:	4a06      	ldr	r2, [pc, #24]	; (8002ad8 <computeDshotDMA+0x2dc>)
 8002ac0:	6013      	str	r3, [r2, #0]
                    dshotcommand = 0;
 8002ac2:	4a06      	ldr	r2, [pc, #24]	; (8002adc <computeDshotDMA+0x2e0>)
 8002ac4:	6011      	str	r1, [r2, #0]
 8002ac6:	e7e8      	b.n	8002a9a <computeDshotDMA+0x29e>
 8002ac8:	20000018 	.word	0x20000018
 8002acc:	2000019c 	.word	0x2000019c
 8002ad0:	0000fdb4 	.word	0x0000fdb4
 8002ad4:	20000070 	.word	0x20000070
 8002ad8:	200000bc 	.word	0x200000bc
 8002adc:	20000140 	.word	0x20000140

08002ae0 <transferComplete>:

void transferComplete(){
	//	TIM15->CNT = 1;
//	compit = 0;
	signaltimeout = 0;
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	4b70      	ldr	r3, [pc, #448]	; (8002ca4 <transferComplete+0x1c4>)
void transferComplete(){
 8002ae4:	b510      	push	{r4, lr}
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 8002ae6:	2108      	movs	r1, #8
 8002ae8:	486f      	ldr	r0, [pc, #444]	; (8002ca8 <transferComplete+0x1c8>)
	signaltimeout = 0;
 8002aea:	601a      	str	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_3);
 8002aec:	f7fe f8f4 	bl	8000cd8 <HAL_GPIO_TogglePin>


	if (inputSet == 1){
 8002af0:	4b6e      	ldr	r3, [pc, #440]	; (8002cac <transferComplete+0x1cc>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d000      	beq.n	8002afa <transferComplete+0x1a>


	  }

	}
}
 8002af8:	bd10      	pop	{r4, pc}
		if (dshot == 1){
 8002afa:	4b6d      	ldr	r3, [pc, #436]	; (8002cb0 <transferComplete+0x1d0>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d076      	beq.n	8002bf0 <transferComplete+0x110>
		if (proshot == 1){
 8002b02:	4b6c      	ldr	r3, [pc, #432]	; (8002cb4 <transferComplete+0x1d4>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d069      	beq.n	8002bde <transferComplete+0xfe>
		if  (servoPwm == 1){
 8002b0a:	4b6b      	ldr	r3, [pc, #428]	; (8002cb8 <transferComplete+0x1d8>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d04e      	beq.n	8002bb0 <transferComplete+0xd0>
		if  (multishot){
 8002b12:	4b6a      	ldr	r3, [pc, #424]	; (8002cbc <transferComplete+0x1dc>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d13a      	bne.n	8002b90 <transferComplete+0xb0>
		if  (oneshot125){
 8002b1a:	4b69      	ldr	r3, [pc, #420]	; (8002cc0 <transferComplete+0x1e0>)
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d126      	bne.n	8002b70 <transferComplete+0x90>
		if  (oneshot42){
 8002b22:	4b68      	ldr	r3, [pc, #416]	; (8002cc4 <transferComplete+0x1e4>)
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d111      	bne.n	8002b4e <transferComplete+0x6e>
		if (!armed){
 8002b2a:	4b67      	ldr	r3, [pc, #412]	; (8002cc8 <transferComplete+0x1e8>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d1e2      	bne.n	8002af8 <transferComplete+0x18>
			if (input < 0){
 8002b32:	4966      	ldr	r1, [pc, #408]	; (8002ccc <transferComplete+0x1ec>)
 8002b34:	680a      	ldr	r2, [r1, #0]
 8002b36:	2a00      	cmp	r2, #0
 8002b38:	db03      	blt.n	8002b42 <transferComplete+0x62>
			 		 if (input == 0){                       // note this in input..not newinput so it will be adjusted be main loop
 8002b3a:	d003      	beq.n	8002b44 <transferComplete+0x64>
			 		 			zero_input_count = 0;
 8002b3c:	4a64      	ldr	r2, [pc, #400]	; (8002cd0 <transferComplete+0x1f0>)
 8002b3e:	6013      	str	r3, [r2, #0]
}
 8002b40:	e7da      	b.n	8002af8 <transferComplete+0x18>
				  						input = 0;
 8002b42:	600b      	str	r3, [r1, #0]
			 		 			zero_input_count++;
 8002b44:	4a62      	ldr	r2, [pc, #392]	; (8002cd0 <transferComplete+0x1f0>)
 8002b46:	6813      	ldr	r3, [r2, #0]
 8002b48:	3301      	adds	r3, #1
 8002b4a:	6013      	str	r3, [r2, #0]
 8002b4c:	e7d4      	b.n	8002af8 <transferComplete+0x18>
	int lastnumber = dma_buffer[0];
 8002b4e:	4c61      	ldr	r4, [pc, #388]	; (8002cd4 <transferComplete+0x1f4>)
		if(((dma_buffer[j] - lastnumber) < 4500) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 8002b50:	4861      	ldr	r0, [pc, #388]	; (8002cd8 <transferComplete+0x1f8>)
	int lastnumber = dma_buffer[0];
 8002b52:	6823      	ldr	r3, [r4, #0]
		if(((dma_buffer[j] - lastnumber) < 4500) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 8002b54:	6862      	ldr	r2, [r4, #4]
 8002b56:	1ad1      	subs	r1, r2, r3
 8002b58:	4281      	cmp	r1, r0
 8002b5a:	d802      	bhi.n	8002b62 <transferComplete+0x82>
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d000      	beq.n	8002b62 <transferComplete+0x82>
 8002b60:	e08a      	b.n	8002c78 <transferComplete+0x198>
			HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_4, dma_buffer , 3);
 8002b62:	2303      	movs	r3, #3
 8002b64:	0022      	movs	r2, r4
 8002b66:	210c      	movs	r1, #12
 8002b68:	485c      	ldr	r0, [pc, #368]	; (8002cdc <transferComplete+0x1fc>)
 8002b6a:	f7fe fdc1 	bl	80016f0 <HAL_TIM_IC_Start_DMA>
 8002b6e:	e7dc      	b.n	8002b2a <transferComplete+0x4a>
	int lastnumber = dma_buffer[0];
 8002b70:	4c58      	ldr	r4, [pc, #352]	; (8002cd4 <transferComplete+0x1f4>)
		if(((dma_buffer[j] - lastnumber) < 12300) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 8002b72:	485b      	ldr	r0, [pc, #364]	; (8002ce0 <transferComplete+0x200>)
	int lastnumber = dma_buffer[0];
 8002b74:	6822      	ldr	r2, [r4, #0]
		if(((dma_buffer[j] - lastnumber) < 12300) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 8002b76:	6863      	ldr	r3, [r4, #4]
 8002b78:	1a99      	subs	r1, r3, r2
 8002b7a:	4281      	cmp	r1, r0
 8002b7c:	d801      	bhi.n	8002b82 <transferComplete+0xa2>
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d166      	bne.n	8002c50 <transferComplete+0x170>
			HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_4, dma_buffer , 3);
 8002b82:	2303      	movs	r3, #3
 8002b84:	0022      	movs	r2, r4
 8002b86:	210c      	movs	r1, #12
 8002b88:	4854      	ldr	r0, [pc, #336]	; (8002cdc <transferComplete+0x1fc>)
 8002b8a:	f7fe fdb1 	bl	80016f0 <HAL_TIM_IC_Start_DMA>
 8002b8e:	e7c8      	b.n	8002b22 <transferComplete+0x42>
	int lastnumber = dma_buffer[0];
 8002b90:	4c50      	ldr	r4, [pc, #320]	; (8002cd4 <transferComplete+0x1f4>)
		if(((dma_buffer[j] - lastnumber) < 1500) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 8002b92:	4854      	ldr	r0, [pc, #336]	; (8002ce4 <transferComplete+0x204>)
	int lastnumber = dma_buffer[0];
 8002b94:	6822      	ldr	r2, [r4, #0]
		if(((dma_buffer[j] - lastnumber) < 1500) && ((dma_buffer[j] - lastnumber) > 0)){ // blank space
 8002b96:	6863      	ldr	r3, [r4, #4]
 8002b98:	1a99      	subs	r1, r3, r2
 8002b9a:	4281      	cmp	r1, r0
 8002b9c:	d801      	bhi.n	8002ba2 <transferComplete+0xc2>
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d144      	bne.n	8002c2c <transferComplete+0x14c>
			HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_4, dma_buffer , 3);
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	0022      	movs	r2, r4
 8002ba6:	210c      	movs	r1, #12
 8002ba8:	484c      	ldr	r0, [pc, #304]	; (8002cdc <transferComplete+0x1fc>)
 8002baa:	f7fe fda1 	bl	80016f0 <HAL_TIM_IC_Start_DMA>
 8002bae:	e7b4      	b.n	8002b1a <transferComplete+0x3a>
		if(((dma_buffer[j] - lastnumber) >1000 ) && ((dma_buffer[j] - lastnumber) < 2010)){ // blank space
 8002bb0:	4c48      	ldr	r4, [pc, #288]	; (8002cd4 <transferComplete+0x1f4>)
 8002bb2:	4a4d      	ldr	r2, [pc, #308]	; (8002ce8 <transferComplete+0x208>)
 8002bb4:	6861      	ldr	r1, [r4, #4]
 8002bb6:	6823      	ldr	r3, [r4, #0]
 8002bb8:	1acb      	subs	r3, r1, r3
 8002bba:	1898      	adds	r0, r3, r2
 8002bbc:	22fc      	movs	r2, #252	; 0xfc
 8002bbe:	0092      	lsls	r2, r2, #2
 8002bc0:	4290      	cmp	r0, r2
 8002bc2:	d91e      	bls.n	8002c02 <transferComplete+0x122>
 8002bc4:	68a3      	ldr	r3, [r4, #8]
 8002bc6:	1a5b      	subs	r3, r3, r1
 8002bc8:	4947      	ldr	r1, [pc, #284]	; (8002ce8 <transferComplete+0x208>)
 8002bca:	1859      	adds	r1, r3, r1
 8002bcc:	4291      	cmp	r1, r2
 8002bce:	d918      	bls.n	8002c02 <transferComplete+0x122>
			HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_4, dma_buffer , 3);
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	0022      	movs	r2, r4
 8002bd4:	210c      	movs	r1, #12
 8002bd6:	4841      	ldr	r0, [pc, #260]	; (8002cdc <transferComplete+0x1fc>)
 8002bd8:	f7fe fd8a 	bl	80016f0 <HAL_TIM_IC_Start_DMA>
 8002bdc:	e799      	b.n	8002b12 <transferComplete+0x32>
			computeProshotDMA();
 8002bde:	f7ff fd27 	bl	8002630 <computeProshotDMA>
			HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_4, dma_buffer , 16);
 8002be2:	2310      	movs	r3, #16
 8002be4:	4a3b      	ldr	r2, [pc, #236]	; (8002cd4 <transferComplete+0x1f4>)
 8002be6:	210c      	movs	r1, #12
 8002be8:	483c      	ldr	r0, [pc, #240]	; (8002cdc <transferComplete+0x1fc>)
 8002bea:	f7fe fd81 	bl	80016f0 <HAL_TIM_IC_Start_DMA>
 8002bee:	e78c      	b.n	8002b0a <transferComplete+0x2a>
			computeDshotDMA();
 8002bf0:	f7ff fe04 	bl	80027fc <computeDshotDMA>
			HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_4, dma_buffer , 64);
 8002bf4:	2340      	movs	r3, #64	; 0x40
 8002bf6:	4a37      	ldr	r2, [pc, #220]	; (8002cd4 <transferComplete+0x1f4>)
 8002bf8:	210c      	movs	r1, #12
 8002bfa:	4838      	ldr	r0, [pc, #224]	; (8002cdc <transferComplete+0x1fc>)
 8002bfc:	f7fe fd78 	bl	80016f0 <HAL_TIM_IC_Start_DMA>
 8002c00:	e77f      	b.n	8002b02 <transferComplete+0x22>
	if (x < in_min){
 8002c02:	4a3a      	ldr	r2, [pc, #232]	; (8002cec <transferComplete+0x20c>)
 8002c04:	2000      	movs	r0, #0
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d90d      	bls.n	8002c26 <transferComplete+0x146>
 8002c0a:	22fa      	movs	r2, #250	; 0xfa
 8002c0c:	00d2      	lsls	r2, r2, #3
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	dd00      	ble.n	8002c14 <transferComplete+0x134>
 8002c12:	0013      	movs	r3, r2
 8002c14:	4a36      	ldr	r2, [pc, #216]	; (8002cf0 <transferComplete+0x210>)
 8002c16:	20fa      	movs	r0, #250	; 0xfa
 8002c18:	4694      	mov	ip, r2
 8002c1a:	00c0      	lsls	r0, r0, #3
 8002c1c:	4463      	add	r3, ip
 8002c1e:	4358      	muls	r0, r3
 8002c20:	4934      	ldr	r1, [pc, #208]	; (8002cf4 <transferComplete+0x214>)
 8002c22:	f7fd fafb 	bl	800021c <__divsi3>
			newinput = map((dma_buffer[j] - lastnumber), 1090, 2000, 0, 2000);
 8002c26:	4b34      	ldr	r3, [pc, #208]	; (8002cf8 <transferComplete+0x218>)
 8002c28:	6018      	str	r0, [r3, #0]
 8002c2a:	e7d1      	b.n	8002bd0 <transferComplete+0xf0>
	if (x < in_min){
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	29f2      	cmp	r1, #242	; 0xf2
 8002c30:	d90b      	bls.n	8002c4a <transferComplete+0x16a>
 8002c32:	2396      	movs	r3, #150	; 0x96
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	4299      	cmp	r1, r3
 8002c38:	dd00      	ble.n	8002c3c <transferComplete+0x15c>
 8002c3a:	0019      	movs	r1, r3
 8002c3c:	20fa      	movs	r0, #250	; 0xfa
 8002c3e:	39f3      	subs	r1, #243	; 0xf3
 8002c40:	00c0      	lsls	r0, r0, #3
 8002c42:	4348      	muls	r0, r1
 8002c44:	492d      	ldr	r1, [pc, #180]	; (8002cfc <transferComplete+0x21c>)
 8002c46:	f7fd fae9 	bl	800021c <__divsi3>
			newinput = map((dma_buffer[j] - lastnumber),243,1200, 0, 2000);
 8002c4a:	4b2b      	ldr	r3, [pc, #172]	; (8002cf8 <transferComplete+0x218>)
 8002c4c:	6018      	str	r0, [r3, #0]
 8002c4e:	e7a8      	b.n	8002ba2 <transferComplete+0xc2>
	if (x < in_min){
 8002c50:	4b2b      	ldr	r3, [pc, #172]	; (8002d00 <transferComplete+0x220>)
 8002c52:	2000      	movs	r0, #0
 8002c54:	4299      	cmp	r1, r3
 8002c56:	d90c      	bls.n	8002c72 <transferComplete+0x192>
 8002c58:	4b2a      	ldr	r3, [pc, #168]	; (8002d04 <transferComplete+0x224>)
 8002c5a:	4299      	cmp	r1, r3
 8002c5c:	dd00      	ble.n	8002c60 <transferComplete+0x180>
 8002c5e:	0019      	movs	r1, r3
 8002c60:	4b29      	ldr	r3, [pc, #164]	; (8002d08 <transferComplete+0x228>)
 8002c62:	20fa      	movs	r0, #250	; 0xfa
 8002c64:	469c      	mov	ip, r3
 8002c66:	00c0      	lsls	r0, r0, #3
 8002c68:	4461      	add	r1, ip
 8002c6a:	4348      	muls	r0, r1
 8002c6c:	4927      	ldr	r1, [pc, #156]	; (8002d0c <transferComplete+0x22c>)
 8002c6e:	f7fd fad5 	bl	800021c <__divsi3>
			newinput = map((dma_buffer[j] - lastnumber),6500,12000, 0, 2000);
 8002c72:	4b21      	ldr	r3, [pc, #132]	; (8002cf8 <transferComplete+0x218>)
 8002c74:	6018      	str	r0, [r3, #0]
 8002c76:	e784      	b.n	8002b82 <transferComplete+0xa2>
	if (x < in_min){
 8002c78:	4b25      	ldr	r3, [pc, #148]	; (8002d10 <transferComplete+0x230>)
 8002c7a:	2000      	movs	r0, #0
 8002c7c:	4299      	cmp	r1, r3
 8002c7e:	d90d      	bls.n	8002c9c <transferComplete+0x1bc>
 8002c80:	23fc      	movs	r3, #252	; 0xfc
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	4299      	cmp	r1, r3
 8002c86:	dd00      	ble.n	8002c8a <transferComplete+0x1aa>
 8002c88:	0019      	movs	r1, r3
 8002c8a:	4b22      	ldr	r3, [pc, #136]	; (8002d14 <transferComplete+0x234>)
 8002c8c:	20fa      	movs	r0, #250	; 0xfa
 8002c8e:	469c      	mov	ip, r3
 8002c90:	00c0      	lsls	r0, r0, #3
 8002c92:	4461      	add	r1, ip
 8002c94:	4348      	muls	r0, r1
 8002c96:	4920      	ldr	r1, [pc, #128]	; (8002d18 <transferComplete+0x238>)
 8002c98:	f7fd fac0 	bl	800021c <__divsi3>
			newinput = map((dma_buffer[j] - lastnumber),2020, 4032, 0, 2000);
 8002c9c:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <transferComplete+0x218>)
 8002c9e:	6018      	str	r0, [r3, #0]
 8002ca0:	e75f      	b.n	8002b62 <transferComplete+0x82>
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	200000e8 	.word	0x200000e8
 8002ca8:	48000800 	.word	0x48000800
 8002cac:	200000b8 	.word	0x200000b8
 8002cb0:	200000b0 	.word	0x200000b0
 8002cb4:	200000d4 	.word	0x200000d4
 8002cb8:	200000e4 	.word	0x200000e4
 8002cbc:	200000b9 	.word	0x200000b9
 8002cc0:	200000c0 	.word	0x200000c0
 8002cc4:	200000c1 	.word	0x200000c1
 8002cc8:	20000064 	.word	0x20000064
 8002ccc:	200000b4 	.word	0x200000b4
 8002cd0:	20000110 	.word	0x20000110
 8002cd4:	2000019c 	.word	0x2000019c
 8002cd8:	00001193 	.word	0x00001193
 8002cdc:	200004c8 	.word	0x200004c8
 8002ce0:	0000300b 	.word	0x0000300b
 8002ce4:	000005db 	.word	0x000005db
 8002ce8:	fffffc17 	.word	0xfffffc17
 8002cec:	00000441 	.word	0x00000441
 8002cf0:	fffffbbe 	.word	0xfffffbbe
 8002cf4:	0000038e 	.word	0x0000038e
 8002cf8:	200000bc 	.word	0x200000bc
 8002cfc:	000003bd 	.word	0x000003bd
 8002d00:	00001963 	.word	0x00001963
 8002d04:	00002ee0 	.word	0x00002ee0
 8002d08:	ffffe69c 	.word	0xffffe69c
 8002d0c:	0000157c 	.word	0x0000157c
 8002d10:	000007e3 	.word	0x000007e3
 8002d14:	fffff81c 	.word	0xfffff81c
 8002d18:	000007dc 	.word	0x000007dc

08002d1c <playStartupTune>:

void playStartupTune(){
 8002d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d1e:	46de      	mov	lr, fp
 8002d20:	4657      	mov	r7, sl
 8002d22:	464e      	mov	r6, r9
 8002d24:	4645      	mov	r5, r8
	TIM1->PSC = 75;
 8002d26:	234b      	movs	r3, #75	; 0x4b
 8002d28:	2280      	movs	r2, #128	; 0x80
void playStartupTune(){
 8002d2a:	b5e0      	push	{r5, r6, r7, lr}
	TIM1->PSC = 75;
 8002d2c:	4e7b      	ldr	r6, [pc, #492]	; (8002f1c <playStartupTune+0x200>)
 8002d2e:	4c7c      	ldr	r4, [pc, #496]	; (8002f20 <playStartupTune+0x204>)
 8002d30:	62b3      	str	r3, [r6, #40]	; 0x28
	TIM1->CCR1 = 5;
 8002d32:	3b46      	subs	r3, #70	; 0x46
 8002d34:	6373      	str	r3, [r6, #52]	; 0x34
	TIM1->CCR2 = 5;
 8002d36:	63b3      	str	r3, [r6, #56]	; 0x38
	TIM1->CCR3 = 5;
 8002d38:	63f3      	str	r3, [r6, #60]	; 0x3c
 8002d3a:	6823      	ldr	r3, [r4, #0]
 8002d3c:	4f79      	ldr	r7, [pc, #484]	; (8002f24 <playStartupTune+0x208>)
 8002d3e:	04d2      	lsls	r2, r2, #19
 8002d40:	403b      	ands	r3, r7
 8002d42:	4313      	orrs	r3, r2
 8002d44:	6023      	str	r3, [r4, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_13, LL_GPIO_MODE_OUTPUT); GPIOB->BRR = GPIO_PIN_13;
 8002d46:	2380      	movs	r3, #128	; 0x80
 8002d48:	2590      	movs	r5, #144	; 0x90
 8002d4a:	019b      	lsls	r3, r3, #6
 8002d4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8002d4e:	05ed      	lsls	r5, r5, #23
 8002d50:	682b      	ldr	r3, [r5, #0]
 8002d52:	4a75      	ldr	r2, [pc, #468]	; (8002f28 <playStartupTune+0x20c>)
	comStep(2);
	HAL_Delay(100);
 8002d54:	2064      	movs	r0, #100	; 0x64
 8002d56:	4013      	ands	r3, r2
 8002d58:	4691      	mov	r9, r2
 8002d5a:	2280      	movs	r2, #128	; 0x80
 8002d5c:	0252      	lsls	r2, r2, #9
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	602b      	str	r3, [r5, #0]
	LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_8, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_8;
 8002d62:	2380      	movs	r3, #128	; 0x80
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	62ab      	str	r3, [r5, #40]	; 0x28
 8002d68:	6823      	ldr	r3, [r4, #0]
 8002d6a:	4a70      	ldr	r2, [pc, #448]	; (8002f2c <playStartupTune+0x210>)
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	4692      	mov	sl, r2
 8002d70:	2280      	movs	r2, #128	; 0x80
 8002d72:	0552      	lsls	r2, r2, #21
 8002d74:	4313      	orrs	r3, r2
 8002d76:	6023      	str	r3, [r4, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_14, LL_GPIO_MODE_OUTPUT); GPIOB->BSRR = GPIO_PIN_14;
 8002d78:	2380      	movs	r3, #128	; 0x80
 8002d7a:	01db      	lsls	r3, r3, #7
 8002d7c:	61a3      	str	r3, [r4, #24]
 8002d7e:	682b      	ldr	r3, [r5, #0]
 8002d80:	4a6b      	ldr	r2, [pc, #428]	; (8002f30 <playStartupTune+0x214>)
 8002d82:	4013      	ands	r3, r2
 8002d84:	4693      	mov	fp, r2
 8002d86:	2280      	movs	r2, #128	; 0x80
 8002d88:	02d2      	lsls	r2, r2, #11
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	602b      	str	r3, [r5, #0]
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_9, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_9;
 8002d8e:	2380      	movs	r3, #128	; 0x80
 8002d90:	2280      	movs	r2, #128	; 0x80
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	62ab      	str	r3, [r5, #40]	; 0x28
 8002d96:	6823      	ldr	r3, [r4, #0]
 8002d98:	0612      	lsls	r2, r2, #24
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	089b      	lsrs	r3, r3, #2
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	6023      	str	r3, [r4, #0]
 8002da2:	682b      	ldr	r3, [r5, #0]
 8002da4:	4a63      	ldr	r2, [pc, #396]	; (8002f34 <playStartupTune+0x218>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	4690      	mov	r8, r2
 8002daa:	2280      	movs	r2, #128	; 0x80
 8002dac:	0392      	lsls	r2, r2, #14
 8002dae:	4313      	orrs	r3, r2
 8002db0:	602b      	str	r3, [r5, #0]
	HAL_Delay(100);
 8002db2:	f7fd fb4f 	bl	8000454 <HAL_Delay>
	TIM1->PSC = 50;
 8002db6:	2332      	movs	r3, #50	; 0x32
	HAL_Delay(100);
 8002db8:	2064      	movs	r0, #100	; 0x64
	TIM1->PSC = 50;
 8002dba:	62b3      	str	r3, [r6, #40]	; 0x28
	HAL_Delay(100);
 8002dbc:	f7fd fb4a 	bl	8000454 <HAL_Delay>
	TIM1->PSC = 25;
 8002dc0:	2319      	movs	r3, #25
	HAL_Delay(100);
 8002dc2:	2064      	movs	r0, #100	; 0x64
	TIM1->PSC = 25;
 8002dc4:	62b3      	str	r3, [r6, #40]	; 0x28
	HAL_Delay(100);
 8002dc6:	f7fd fb45 	bl	8000454 <HAL_Delay>
	phaseA(floating);
 8002dca:	4b5b      	ldr	r3, [pc, #364]	; (8002f38 <playStartupTune+0x21c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
		if (newPhase==1){
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d100      	bne.n	8002dd4 <playStartupTune+0xb8>
 8002dd2:	e079      	b.n	8002ec8 <playStartupTune+0x1ac>
		if (newPhase==2){
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d045      	beq.n	8002e64 <playStartupTune+0x148>
		if (newPhase==3){
 8002dd8:	2b03      	cmp	r3, #3
 8002dda:	d13a      	bne.n	8002e52 <playStartupTune+0x136>
 8002ddc:	6823      	ldr	r3, [r4, #0]
 8002dde:	464a      	mov	r2, r9
 8002de0:	401f      	ands	r7, r3
 8002de2:	2380      	movs	r3, #128	; 0x80
 8002de4:	04db      	lsls	r3, r3, #19
 8002de6:	431f      	orrs	r7, r3
		LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_13, LL_GPIO_MODE_OUTPUT); GPIOB->BSRR = GPIO_PIN_13;
 8002de8:	2380      	movs	r3, #128	; 0x80
 8002dea:	019b      	lsls	r3, r3, #6
 8002dec:	6027      	str	r7, [r4, #0]
 8002dee:	61a3      	str	r3, [r4, #24]
 8002df0:	682b      	ldr	r3, [r5, #0]
 8002df2:	4013      	ands	r3, r2
 8002df4:	2280      	movs	r2, #128	; 0x80
 8002df6:	0252      	lsls	r2, r2, #9
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	602b      	str	r3, [r5, #0]
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_8, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_8;
 8002dfc:	2380      	movs	r3, #128	; 0x80
 8002dfe:	4652      	mov	r2, sl
 8002e00:	005b      	lsls	r3, r3, #1
 8002e02:	62ab      	str	r3, [r5, #40]	; 0x28
 8002e04:	6823      	ldr	r3, [r4, #0]
 8002e06:	4013      	ands	r3, r2
 8002e08:	2280      	movs	r2, #128	; 0x80
 8002e0a:	0552      	lsls	r2, r2, #21
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	6023      	str	r3, [r4, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_14, LL_GPIO_MODE_OUTPUT); GPIOB->BSRR = GPIO_PIN_14;
 8002e10:	2380      	movs	r3, #128	; 0x80
 8002e12:	465a      	mov	r2, fp
 8002e14:	01db      	lsls	r3, r3, #7
 8002e16:	61a3      	str	r3, [r4, #24]
 8002e18:	682b      	ldr	r3, [r5, #0]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2280      	movs	r2, #128	; 0x80
 8002e1e:	02d2      	lsls	r2, r2, #11
 8002e20:	4313      	orrs	r3, r2
 8002e22:	602b      	str	r3, [r5, #0]
	LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_9, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_9;
 8002e24:	2380      	movs	r3, #128	; 0x80
 8002e26:	2280      	movs	r2, #128	; 0x80
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	62ab      	str	r3, [r5, #40]	; 0x28
 8002e2c:	6823      	ldr	r3, [r4, #0]
 8002e2e:	05d2      	lsls	r2, r2, #23
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	089b      	lsrs	r3, r3, #2
 8002e34:	4313      	orrs	r3, r2
 8002e36:	6023      	str	r3, [r4, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_15, LL_GPIO_MODE_OUTPUT); GPIOB->BSRR = GPIO_PIN_15;
 8002e38:	2380      	movs	r3, #128	; 0x80
 8002e3a:	021b      	lsls	r3, r3, #8
 8002e3c:	61a3      	str	r3, [r4, #24]
 8002e3e:	4643      	mov	r3, r8
 8002e40:	682a      	ldr	r2, [r5, #0]
 8002e42:	401a      	ands	r2, r3
 8002e44:	2380      	movs	r3, #128	; 0x80
 8002e46:	035b      	lsls	r3, r3, #13
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	602b      	str	r3, [r5, #0]
	LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_10, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_10;
 8002e4c:	2380      	movs	r3, #128	; 0x80
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	62ab      	str	r3, [r5, #40]	; 0x28
	allOff();
	TIM1->PSC = 0;
 8002e52:	2200      	movs	r2, #0
 8002e54:	4b31      	ldr	r3, [pc, #196]	; (8002f1c <playStartupTune+0x200>)
 8002e56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002e58:	bc3c      	pop	{r2, r3, r4, r5}
 8002e5a:	4690      	mov	r8, r2
 8002e5c:	4699      	mov	r9, r3
 8002e5e:	46a2      	mov	sl, r4
 8002e60:	46ab      	mov	fp, r5
 8002e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e64:	6823      	ldr	r3, [r4, #0]
 8002e66:	464a      	mov	r2, r9
 8002e68:	401f      	ands	r7, r3
 8002e6a:	2380      	movs	r3, #128	; 0x80
 8002e6c:	04db      	lsls	r3, r3, #19
 8002e6e:	431f      	orrs	r7, r3
		LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_13, LL_GPIO_MODE_OUTPUT); GPIOB->BRR = GPIO_PIN_13;
 8002e70:	2380      	movs	r3, #128	; 0x80
 8002e72:	019b      	lsls	r3, r3, #6
 8002e74:	6027      	str	r7, [r4, #0]
 8002e76:	62a3      	str	r3, [r4, #40]	; 0x28
 8002e78:	682b      	ldr	r3, [r5, #0]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2280      	movs	r2, #128	; 0x80
 8002e7e:	0252      	lsls	r2, r2, #9
 8002e80:	4313      	orrs	r3, r2
 8002e82:	602b      	str	r3, [r5, #0]
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_8, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_8;
 8002e84:	2380      	movs	r3, #128	; 0x80
 8002e86:	4652      	mov	r2, sl
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	62ab      	str	r3, [r5, #40]	; 0x28
 8002e8c:	6823      	ldr	r3, [r4, #0]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2280      	movs	r2, #128	; 0x80
 8002e92:	0552      	lsls	r2, r2, #21
 8002e94:	4313      	orrs	r3, r2
 8002e96:	6023      	str	r3, [r4, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_14, LL_GPIO_MODE_OUTPUT); GPIOB->BRR = GPIO_PIN_14;
 8002e98:	2380      	movs	r3, #128	; 0x80
 8002e9a:	465a      	mov	r2, fp
 8002e9c:	01db      	lsls	r3, r3, #7
 8002e9e:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ea0:	682b      	ldr	r3, [r5, #0]
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2280      	movs	r2, #128	; 0x80
 8002ea6:	02d2      	lsls	r2, r2, #11
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	602b      	str	r3, [r5, #0]
	LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_9, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_9;
 8002eac:	2380      	movs	r3, #128	; 0x80
 8002eae:	2280      	movs	r2, #128	; 0x80
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	62ab      	str	r3, [r5, #40]	; 0x28
 8002eb4:	6823      	ldr	r3, [r4, #0]
 8002eb6:	05d2      	lsls	r2, r2, #23
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	089b      	lsrs	r3, r3, #2
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	6023      	str	r3, [r4, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_15, LL_GPIO_MODE_OUTPUT); GPIOB->BRR = GPIO_PIN_15;
 8002ec0:	2380      	movs	r3, #128	; 0x80
 8002ec2:	021b      	lsls	r3, r3, #8
 8002ec4:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ec6:	e7ba      	b.n	8002e3e <playStartupTune+0x122>
 8002ec8:	6823      	ldr	r3, [r4, #0]
 8002eca:	403b      	ands	r3, r7
 8002ecc:	2780      	movs	r7, #128	; 0x80
 8002ece:	053f      	lsls	r7, r7, #20
 8002ed0:	431f      	orrs	r7, r3
 8002ed2:	464b      	mov	r3, r9
 8002ed4:	6027      	str	r7, [r4, #0]
 8002ed6:	682a      	ldr	r2, [r5, #0]
 8002ed8:	401a      	ands	r2, r3
 8002eda:	2380      	movs	r3, #128	; 0x80
 8002edc:	029b      	lsls	r3, r3, #10
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	602b      	str	r3, [r5, #0]
 8002ee2:	4653      	mov	r3, sl
 8002ee4:	6822      	ldr	r2, [r4, #0]
 8002ee6:	401a      	ands	r2, r3
 8002ee8:	2380      	movs	r3, #128	; 0x80
 8002eea:	059b      	lsls	r3, r3, #22
 8002eec:	4313      	orrs	r3, r2
 8002eee:	6023      	str	r3, [r4, #0]
 8002ef0:	465b      	mov	r3, fp
 8002ef2:	682a      	ldr	r2, [r5, #0]
 8002ef4:	401a      	ands	r2, r3
 8002ef6:	2380      	movs	r3, #128	; 0x80
 8002ef8:	031b      	lsls	r3, r3, #12
 8002efa:	4313      	orrs	r3, r2
 8002efc:	2280      	movs	r2, #128	; 0x80
 8002efe:	602b      	str	r3, [r5, #0]
 8002f00:	6823      	ldr	r3, [r4, #0]
 8002f02:	0612      	lsls	r2, r2, #24
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	089b      	lsrs	r3, r3, #2
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	4642      	mov	r2, r8
 8002f0c:	6023      	str	r3, [r4, #0]
 8002f0e:	682b      	ldr	r3, [r5, #0]
 8002f10:	4013      	ands	r3, r2
 8002f12:	2280      	movs	r2, #128	; 0x80
 8002f14:	0392      	lsls	r2, r2, #14
 8002f16:	4313      	orrs	r3, r2
 8002f18:	602b      	str	r3, [r5, #0]
 8002f1a:	e79a      	b.n	8002e52 <playStartupTune+0x136>
 8002f1c:	40012c00 	.word	0x40012c00
 8002f20:	48000400 	.word	0x48000400
 8002f24:	f3ffffff 	.word	0xf3ffffff
 8002f28:	fffcffff 	.word	0xfffcffff
 8002f2c:	cfffffff 	.word	0xcfffffff
 8002f30:	fff3ffff 	.word	0xfff3ffff
 8002f34:	ffcfffff 	.word	0xffcfffff
 8002f38:	20000010 	.word	0x20000010

08002f3c <playInputTune>:

void playInputTune(){
 8002f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3e:	46de      	mov	lr, fp
 8002f40:	4657      	mov	r7, sl
 8002f42:	464e      	mov	r6, r9
 8002f44:	4645      	mov	r5, r8
	TIM1->PSC = 100;
 8002f46:	2364      	movs	r3, #100	; 0x64
 8002f48:	2280      	movs	r2, #128	; 0x80
void playInputTune(){
 8002f4a:	b5e0      	push	{r5, r6, r7, lr}
	TIM1->PSC = 100;
 8002f4c:	4e79      	ldr	r6, [pc, #484]	; (8003134 <playInputTune+0x1f8>)
 8002f4e:	4c7a      	ldr	r4, [pc, #488]	; (8003138 <playInputTune+0x1fc>)
 8002f50:	62b3      	str	r3, [r6, #40]	; 0x28
	TIM1->CCR1 = 5;
 8002f52:	3b5f      	subs	r3, #95	; 0x5f
 8002f54:	6373      	str	r3, [r6, #52]	; 0x34
	TIM1->CCR2 = 5;
 8002f56:	63b3      	str	r3, [r6, #56]	; 0x38
	TIM1->CCR3 = 5;
 8002f58:	63f3      	str	r3, [r6, #60]	; 0x3c
 8002f5a:	6823      	ldr	r3, [r4, #0]
 8002f5c:	4f77      	ldr	r7, [pc, #476]	; (800313c <playInputTune+0x200>)
 8002f5e:	04d2      	lsls	r2, r2, #19
 8002f60:	403b      	ands	r3, r7
 8002f62:	4313      	orrs	r3, r2
 8002f64:	6023      	str	r3, [r4, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_13, LL_GPIO_MODE_OUTPUT); GPIOB->BRR = GPIO_PIN_13;
 8002f66:	2380      	movs	r3, #128	; 0x80
 8002f68:	2590      	movs	r5, #144	; 0x90
 8002f6a:	019b      	lsls	r3, r3, #6
 8002f6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f6e:	05ed      	lsls	r5, r5, #23
 8002f70:	682b      	ldr	r3, [r5, #0]
 8002f72:	4a73      	ldr	r2, [pc, #460]	; (8003140 <playInputTune+0x204>)
	comStep(2);
	HAL_Delay(100);
 8002f74:	2064      	movs	r0, #100	; 0x64
 8002f76:	4013      	ands	r3, r2
 8002f78:	4691      	mov	r9, r2
 8002f7a:	2280      	movs	r2, #128	; 0x80
 8002f7c:	0252      	lsls	r2, r2, #9
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	602b      	str	r3, [r5, #0]
	LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_8, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_8;
 8002f82:	2380      	movs	r3, #128	; 0x80
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	62ab      	str	r3, [r5, #40]	; 0x28
 8002f88:	6823      	ldr	r3, [r4, #0]
 8002f8a:	4a6e      	ldr	r2, [pc, #440]	; (8003144 <playInputTune+0x208>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	4692      	mov	sl, r2
 8002f90:	2280      	movs	r2, #128	; 0x80
 8002f92:	0552      	lsls	r2, r2, #21
 8002f94:	4313      	orrs	r3, r2
 8002f96:	6023      	str	r3, [r4, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_14, LL_GPIO_MODE_OUTPUT); GPIOB->BSRR = GPIO_PIN_14;
 8002f98:	2380      	movs	r3, #128	; 0x80
 8002f9a:	01db      	lsls	r3, r3, #7
 8002f9c:	61a3      	str	r3, [r4, #24]
 8002f9e:	682b      	ldr	r3, [r5, #0]
 8002fa0:	4a69      	ldr	r2, [pc, #420]	; (8003148 <playInputTune+0x20c>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	4693      	mov	fp, r2
 8002fa6:	2280      	movs	r2, #128	; 0x80
 8002fa8:	02d2      	lsls	r2, r2, #11
 8002faa:	4313      	orrs	r3, r2
 8002fac:	602b      	str	r3, [r5, #0]
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_9, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_9;
 8002fae:	2380      	movs	r3, #128	; 0x80
 8002fb0:	2280      	movs	r2, #128	; 0x80
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	62ab      	str	r3, [r5, #40]	; 0x28
 8002fb6:	6823      	ldr	r3, [r4, #0]
 8002fb8:	0612      	lsls	r2, r2, #24
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	089b      	lsrs	r3, r3, #2
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	6023      	str	r3, [r4, #0]
 8002fc2:	682b      	ldr	r3, [r5, #0]
 8002fc4:	4a61      	ldr	r2, [pc, #388]	; (800314c <playInputTune+0x210>)
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	4690      	mov	r8, r2
 8002fca:	2280      	movs	r2, #128	; 0x80
 8002fcc:	0392      	lsls	r2, r2, #14
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	602b      	str	r3, [r5, #0]
	HAL_Delay(100);
 8002fd2:	f7fd fa3f 	bl	8000454 <HAL_Delay>
	TIM1->PSC = 50;
 8002fd6:	2332      	movs	r3, #50	; 0x32
	HAL_Delay(100);
 8002fd8:	2064      	movs	r0, #100	; 0x64
	TIM1->PSC = 50;
 8002fda:	62b3      	str	r3, [r6, #40]	; 0x28
	HAL_Delay(100);
 8002fdc:	f7fd fa3a 	bl	8000454 <HAL_Delay>
	phaseA(floating);
 8002fe0:	4b5b      	ldr	r3, [pc, #364]	; (8003150 <playInputTune+0x214>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
		if (newPhase==1){
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d100      	bne.n	8002fea <playInputTune+0xae>
 8002fe8:	e079      	b.n	80030de <playInputTune+0x1a2>
		if (newPhase==2){
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d045      	beq.n	800307a <playInputTune+0x13e>
		if (newPhase==3){
 8002fee:	2b03      	cmp	r3, #3
 8002ff0:	d13a      	bne.n	8003068 <playInputTune+0x12c>
 8002ff2:	6823      	ldr	r3, [r4, #0]
 8002ff4:	464a      	mov	r2, r9
 8002ff6:	401f      	ands	r7, r3
 8002ff8:	2380      	movs	r3, #128	; 0x80
 8002ffa:	04db      	lsls	r3, r3, #19
 8002ffc:	431f      	orrs	r7, r3
		LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_13, LL_GPIO_MODE_OUTPUT); GPIOB->BSRR = GPIO_PIN_13;
 8002ffe:	2380      	movs	r3, #128	; 0x80
 8003000:	019b      	lsls	r3, r3, #6
 8003002:	6027      	str	r7, [r4, #0]
 8003004:	61a3      	str	r3, [r4, #24]
 8003006:	682b      	ldr	r3, [r5, #0]
 8003008:	4013      	ands	r3, r2
 800300a:	2280      	movs	r2, #128	; 0x80
 800300c:	0252      	lsls	r2, r2, #9
 800300e:	4313      	orrs	r3, r2
 8003010:	602b      	str	r3, [r5, #0]
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_8, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_8;
 8003012:	2380      	movs	r3, #128	; 0x80
 8003014:	4652      	mov	r2, sl
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	62ab      	str	r3, [r5, #40]	; 0x28
 800301a:	6823      	ldr	r3, [r4, #0]
 800301c:	4013      	ands	r3, r2
 800301e:	2280      	movs	r2, #128	; 0x80
 8003020:	0552      	lsls	r2, r2, #21
 8003022:	4313      	orrs	r3, r2
 8003024:	6023      	str	r3, [r4, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_14, LL_GPIO_MODE_OUTPUT); GPIOB->BSRR = GPIO_PIN_14;
 8003026:	2380      	movs	r3, #128	; 0x80
 8003028:	465a      	mov	r2, fp
 800302a:	01db      	lsls	r3, r3, #7
 800302c:	61a3      	str	r3, [r4, #24]
 800302e:	682b      	ldr	r3, [r5, #0]
 8003030:	4013      	ands	r3, r2
 8003032:	2280      	movs	r2, #128	; 0x80
 8003034:	02d2      	lsls	r2, r2, #11
 8003036:	4313      	orrs	r3, r2
 8003038:	602b      	str	r3, [r5, #0]
	LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_9, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_9;
 800303a:	2380      	movs	r3, #128	; 0x80
 800303c:	2280      	movs	r2, #128	; 0x80
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	62ab      	str	r3, [r5, #40]	; 0x28
 8003042:	6823      	ldr	r3, [r4, #0]
 8003044:	05d2      	lsls	r2, r2, #23
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	089b      	lsrs	r3, r3, #2
 800304a:	4313      	orrs	r3, r2
 800304c:	6023      	str	r3, [r4, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_15, LL_GPIO_MODE_OUTPUT); GPIOB->BSRR = GPIO_PIN_15;
 800304e:	2380      	movs	r3, #128	; 0x80
 8003050:	021b      	lsls	r3, r3, #8
 8003052:	61a3      	str	r3, [r4, #24]
 8003054:	4643      	mov	r3, r8
 8003056:	682a      	ldr	r2, [r5, #0]
 8003058:	401a      	ands	r2, r3
 800305a:	2380      	movs	r3, #128	; 0x80
 800305c:	035b      	lsls	r3, r3, #13
 800305e:	4313      	orrs	r3, r2
 8003060:	602b      	str	r3, [r5, #0]
	LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_10, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_10;
 8003062:	2380      	movs	r3, #128	; 0x80
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	62ab      	str	r3, [r5, #40]	; 0x28
	allOff();
	TIM1->PSC = 0;
 8003068:	2200      	movs	r2, #0
 800306a:	4b32      	ldr	r3, [pc, #200]	; (8003134 <playInputTune+0x1f8>)
 800306c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800306e:	bc3c      	pop	{r2, r3, r4, r5}
 8003070:	4690      	mov	r8, r2
 8003072:	4699      	mov	r9, r3
 8003074:	46a2      	mov	sl, r4
 8003076:	46ab      	mov	fp, r5
 8003078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800307a:	6823      	ldr	r3, [r4, #0]
 800307c:	464a      	mov	r2, r9
 800307e:	401f      	ands	r7, r3
 8003080:	2380      	movs	r3, #128	; 0x80
 8003082:	04db      	lsls	r3, r3, #19
 8003084:	431f      	orrs	r7, r3
		LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_13, LL_GPIO_MODE_OUTPUT); GPIOB->BRR = GPIO_PIN_13;
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	019b      	lsls	r3, r3, #6
 800308a:	6027      	str	r7, [r4, #0]
 800308c:	62a3      	str	r3, [r4, #40]	; 0x28
 800308e:	682b      	ldr	r3, [r5, #0]
 8003090:	4013      	ands	r3, r2
 8003092:	2280      	movs	r2, #128	; 0x80
 8003094:	0252      	lsls	r2, r2, #9
 8003096:	4313      	orrs	r3, r2
 8003098:	602b      	str	r3, [r5, #0]
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_8, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_8;
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	4652      	mov	r2, sl
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	62ab      	str	r3, [r5, #40]	; 0x28
 80030a2:	6823      	ldr	r3, [r4, #0]
 80030a4:	4013      	ands	r3, r2
 80030a6:	2280      	movs	r2, #128	; 0x80
 80030a8:	0552      	lsls	r2, r2, #21
 80030aa:	4313      	orrs	r3, r2
 80030ac:	6023      	str	r3, [r4, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_14, LL_GPIO_MODE_OUTPUT); GPIOB->BRR = GPIO_PIN_14;
 80030ae:	2380      	movs	r3, #128	; 0x80
 80030b0:	465a      	mov	r2, fp
 80030b2:	01db      	lsls	r3, r3, #7
 80030b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80030b6:	682b      	ldr	r3, [r5, #0]
 80030b8:	4013      	ands	r3, r2
 80030ba:	2280      	movs	r2, #128	; 0x80
 80030bc:	02d2      	lsls	r2, r2, #11
 80030be:	4313      	orrs	r3, r2
 80030c0:	602b      	str	r3, [r5, #0]
	LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_9, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_9;
 80030c2:	2380      	movs	r3, #128	; 0x80
 80030c4:	2280      	movs	r2, #128	; 0x80
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	62ab      	str	r3, [r5, #40]	; 0x28
 80030ca:	6823      	ldr	r3, [r4, #0]
 80030cc:	05d2      	lsls	r2, r2, #23
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	089b      	lsrs	r3, r3, #2
 80030d2:	4313      	orrs	r3, r2
 80030d4:	6023      	str	r3, [r4, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_15, LL_GPIO_MODE_OUTPUT); GPIOB->BRR = GPIO_PIN_15;
 80030d6:	2380      	movs	r3, #128	; 0x80
 80030d8:	021b      	lsls	r3, r3, #8
 80030da:	62a3      	str	r3, [r4, #40]	; 0x28
 80030dc:	e7ba      	b.n	8003054 <playInputTune+0x118>
 80030de:	6823      	ldr	r3, [r4, #0]
 80030e0:	403b      	ands	r3, r7
 80030e2:	2780      	movs	r7, #128	; 0x80
 80030e4:	053f      	lsls	r7, r7, #20
 80030e6:	431f      	orrs	r7, r3
 80030e8:	464b      	mov	r3, r9
 80030ea:	6027      	str	r7, [r4, #0]
 80030ec:	682a      	ldr	r2, [r5, #0]
 80030ee:	401a      	ands	r2, r3
 80030f0:	2380      	movs	r3, #128	; 0x80
 80030f2:	029b      	lsls	r3, r3, #10
 80030f4:	4313      	orrs	r3, r2
 80030f6:	602b      	str	r3, [r5, #0]
 80030f8:	4653      	mov	r3, sl
 80030fa:	6822      	ldr	r2, [r4, #0]
 80030fc:	401a      	ands	r2, r3
 80030fe:	2380      	movs	r3, #128	; 0x80
 8003100:	059b      	lsls	r3, r3, #22
 8003102:	4313      	orrs	r3, r2
 8003104:	6023      	str	r3, [r4, #0]
 8003106:	465b      	mov	r3, fp
 8003108:	682a      	ldr	r2, [r5, #0]
 800310a:	401a      	ands	r2, r3
 800310c:	2380      	movs	r3, #128	; 0x80
 800310e:	031b      	lsls	r3, r3, #12
 8003110:	4313      	orrs	r3, r2
 8003112:	2280      	movs	r2, #128	; 0x80
 8003114:	602b      	str	r3, [r5, #0]
 8003116:	6823      	ldr	r3, [r4, #0]
 8003118:	0612      	lsls	r2, r2, #24
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	089b      	lsrs	r3, r3, #2
 800311e:	4313      	orrs	r3, r2
 8003120:	4642      	mov	r2, r8
 8003122:	6023      	str	r3, [r4, #0]
 8003124:	682b      	ldr	r3, [r5, #0]
 8003126:	4013      	ands	r3, r2
 8003128:	2280      	movs	r2, #128	; 0x80
 800312a:	0392      	lsls	r2, r2, #14
 800312c:	4313      	orrs	r3, r2
 800312e:	602b      	str	r3, [r5, #0]
 8003130:	e79a      	b.n	8003068 <playInputTune+0x12c>
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	40012c00 	.word	0x40012c00
 8003138:	48000400 	.word	0x48000400
 800313c:	f3ffffff 	.word	0xf3ffffff
 8003140:	fffcffff 	.word	0xfffcffff
 8003144:	cfffffff 	.word	0xcfffffff
 8003148:	fff3ffff 	.word	0xfff3ffff
 800314c:	ffcfffff 	.word	0xffcfffff
 8003150:	20000010 	.word	0x20000010

08003154 <getBemfState>:

void getBemfState(){
 8003154:	b570      	push	{r4, r5, r6, lr}



	if (step == 1 || step == 4){
 8003156:	4c1c      	ldr	r4, [pc, #112]	; (80031c8 <getBemfState+0x74>)
 8003158:	6823      	ldr	r3, [r4, #0]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d02b      	beq.n	80031b6 <getBemfState+0x62>
 800315e:	2b04      	cmp	r3, #4
 8003160:	d029      	beq.n	80031b6 <getBemfState+0x62>
 8003162:	4d1a      	ldr	r5, [pc, #104]	; (80031cc <getBemfState+0x78>)
	   current_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
	}
    if (step == 2 || step == 5){            //        in phase two or 5 read from phase A PA2
 8003164:	2b02      	cmp	r3, #2
 8003166:	d01e      	beq.n	80031a6 <getBemfState+0x52>
 8003168:	2b05      	cmp	r3, #5
 800316a:	d01c      	beq.n	80031a6 <getBemfState+0x52>
    	current_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
	}
    if (step == 3 || step == 6){                         // phase B pa1
 800316c:	2b03      	cmp	r3, #3
 800316e:	d013      	beq.n	8003198 <getBemfState+0x44>
 8003170:	2b06      	cmp	r3, #6
 8003172:	d011      	beq.n	8003198 <getBemfState+0x44>
 8003174:	6828      	ldr	r0, [r5, #0]
    	current_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);

	}

    if (rising){
 8003176:	4b16      	ldr	r3, [pc, #88]	; (80031d0 <getBemfState+0x7c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d005      	beq.n	800318a <getBemfState+0x36>
    	if (current_state){
 800317e:	2800      	cmp	r0, #0
 8003180:	d105      	bne.n	800318e <getBemfState+0x3a>
    		bemfcounter++;
    		}else{
    		bemfcounter = 0;
 8003182:	2200      	movs	r2, #0
 8003184:	4b13      	ldr	r3, [pc, #76]	; (80031d4 <getBemfState+0x80>)
 8003186:	601a      	str	r2, [r3, #0]
    	}
    }



}
 8003188:	bd70      	pop	{r4, r5, r6, pc}
    	if(!current_state){
 800318a:	2800      	cmp	r0, #0
 800318c:	d1f9      	bne.n	8003182 <getBemfState+0x2e>
    		bemfcounter++;
 800318e:	4a11      	ldr	r2, [pc, #68]	; (80031d4 <getBemfState+0x80>)
 8003190:	6813      	ldr	r3, [r2, #0]
 8003192:	3301      	adds	r3, #1
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	e7f7      	b.n	8003188 <getBemfState+0x34>
    	current_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8003198:	2090      	movs	r0, #144	; 0x90
 800319a:	2102      	movs	r1, #2
 800319c:	05c0      	lsls	r0, r0, #23
 800319e:	f7fd fd95 	bl	8000ccc <HAL_GPIO_ReadPin>
 80031a2:	6028      	str	r0, [r5, #0]
 80031a4:	e7e7      	b.n	8003176 <getBemfState+0x22>
    	current_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 80031a6:	2090      	movs	r0, #144	; 0x90
 80031a8:	2104      	movs	r1, #4
 80031aa:	05c0      	lsls	r0, r0, #23
 80031ac:	f7fd fd8e 	bl	8000ccc <HAL_GPIO_ReadPin>
 80031b0:	6823      	ldr	r3, [r4, #0]
 80031b2:	6028      	str	r0, [r5, #0]
 80031b4:	e7da      	b.n	800316c <getBemfState+0x18>
	   current_state = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80031b6:	2090      	movs	r0, #144	; 0x90
 80031b8:	2101      	movs	r1, #1
 80031ba:	05c0      	lsls	r0, r0, #23
 80031bc:	f7fd fd86 	bl	8000ccc <HAL_GPIO_ReadPin>
 80031c0:	4d02      	ldr	r5, [pc, #8]	; (80031cc <getBemfState+0x78>)
 80031c2:	6823      	ldr	r3, [r4, #0]
 80031c4:	6028      	str	r0, [r5, #0]
 80031c6:	e7cd      	b.n	8003164 <getBemfState+0x10>
 80031c8:	20000038 	.word	0x20000038
 80031cc:	2000006c 	.word	0x2000006c
 80031d0:	20000030 	.word	0x20000030
 80031d4:	20000194 	.word	0x20000194

080031d8 <changeEXTI>:
	EXTI->IMR &= (0 << 0);
}

void changeEXTI(){
//	TIM14->CNT = 0;
	if (step == 1 || step == 4){
 80031d8:	4b2d      	ldr	r3, [pc, #180]	; (8003290 <changeEXTI+0xb8>)
void changeEXTI(){
 80031da:	b510      	push	{r4, lr}
	if (step == 1 || step == 4){
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d036      	beq.n	8003250 <changeEXTI+0x78>
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d034      	beq.n	8003250 <changeEXTI+0x78>
			EXTI->FTSR |= (1 << 0);
			EXTI->RTSR &= (1 << 0);
		}
		Current_GPIO_Pin = GPIO_PIN_0;
		}
	    if (step == 2 || step == 5){            //        in phase two or 5 read from phase A PA2
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d01f      	beq.n	800322a <changeEXTI+0x52>
 80031ea:	2b05      	cmp	r3, #5
 80031ec:	d01d      	beq.n	800322a <changeEXTI+0x52>
	    			EXTI->FTSR |= (1 << 2);
	    			EXTI->RTSR &= (0 << 2);
	    		}
	    Current_GPIO_Pin = GPIO_PIN_2;
		}
	    if (step == 3 || step == 6){                         // phase B pa1
 80031ee:	2b03      	cmp	r3, #3
 80031f0:	d002      	beq.n	80031f8 <changeEXTI+0x20>
 80031f2:	2b06      	cmp	r3, #6
 80031f4:	d000      	beq.n	80031f8 <changeEXTI+0x20>
	    			EXTI->RTSR &= (0 << 1);
	    		}
	    Current_GPIO_Pin = GPIO_PIN_1;
		}
//	    stop_time = TIM14->CNT;
}
 80031f6:	bd10      	pop	{r4, pc}
	    EXTI->IMR |= (1 << 1);
 80031f8:	2102      	movs	r1, #2
 80031fa:	4b26      	ldr	r3, [pc, #152]	; (8003294 <changeEXTI+0xbc>)
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	430a      	orrs	r2, r1
 8003200:	601a      	str	r2, [r3, #0]
	    if (rising){
 8003202:	4a25      	ldr	r2, [pc, #148]	; (8003298 <changeEXTI+0xc0>)
 8003204:	6812      	ldr	r2, [r2, #0]
 8003206:	2a00      	cmp	r2, #0
 8003208:	d108      	bne.n	800321c <changeEXTI+0x44>
	    			EXTI->FTSR |= (1 << 1);
 800320a:	68d8      	ldr	r0, [r3, #12]
 800320c:	4301      	orrs	r1, r0
 800320e:	60d9      	str	r1, [r3, #12]
	    			EXTI->RTSR &= (0 << 1);
 8003210:	6899      	ldr	r1, [r3, #8]
 8003212:	609a      	str	r2, [r3, #8]
	    Current_GPIO_Pin = GPIO_PIN_1;
 8003214:	2202      	movs	r2, #2
 8003216:	4b21      	ldr	r3, [pc, #132]	; (800329c <changeEXTI+0xc4>)
 8003218:	801a      	strh	r2, [r3, #0]
}
 800321a:	e7ec      	b.n	80031f6 <changeEXTI+0x1e>
	    			EXTI->RTSR |= (1 << 1);
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	4311      	orrs	r1, r2
 8003220:	6099      	str	r1, [r3, #8]
	    			EXTI->FTSR &= (0 << 1);
 8003222:	68da      	ldr	r2, [r3, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	60da      	str	r2, [r3, #12]
 8003228:	e7f4      	b.n	8003214 <changeEXTI+0x3c>
	    EXTI->IMR |= (1 << 2);
 800322a:	2004      	movs	r0, #4
 800322c:	4a19      	ldr	r2, [pc, #100]	; (8003294 <changeEXTI+0xbc>)
 800322e:	6811      	ldr	r1, [r2, #0]
 8003230:	4301      	orrs	r1, r0
 8003232:	6011      	str	r1, [r2, #0]
	    if (rising){
 8003234:	4918      	ldr	r1, [pc, #96]	; (8003298 <changeEXTI+0xc0>)
 8003236:	6809      	ldr	r1, [r1, #0]
 8003238:	2900      	cmp	r1, #0
 800323a:	d01c      	beq.n	8003276 <changeEXTI+0x9e>
	    			EXTI->RTSR |= (1 << 2);
 800323c:	6891      	ldr	r1, [r2, #8]
 800323e:	4308      	orrs	r0, r1
 8003240:	6090      	str	r0, [r2, #8]
	    			EXTI->FTSR &= (0 << 2);
 8003242:	68d1      	ldr	r1, [r2, #12]
 8003244:	2100      	movs	r1, #0
 8003246:	60d1      	str	r1, [r2, #12]
	    Current_GPIO_Pin = GPIO_PIN_2;
 8003248:	2104      	movs	r1, #4
 800324a:	4a14      	ldr	r2, [pc, #80]	; (800329c <changeEXTI+0xc4>)
 800324c:	8011      	strh	r1, [r2, #0]
 800324e:	e7ce      	b.n	80031ee <changeEXTI+0x16>
		EXTI->IMR |= (1 << 0);
 8003250:	2101      	movs	r1, #1
 8003252:	4a10      	ldr	r2, [pc, #64]	; (8003294 <changeEXTI+0xbc>)
 8003254:	6810      	ldr	r0, [r2, #0]
 8003256:	4308      	orrs	r0, r1
 8003258:	6010      	str	r0, [r2, #0]
		if (rising){
 800325a:	480f      	ldr	r0, [pc, #60]	; (8003298 <changeEXTI+0xc0>)
 800325c:	6800      	ldr	r0, [r0, #0]
 800325e:	2800      	cmp	r0, #0
 8003260:	d00f      	beq.n	8003282 <changeEXTI+0xaa>
			EXTI->RTSR |= (1 << 0);
 8003262:	6890      	ldr	r0, [r2, #8]
 8003264:	4308      	orrs	r0, r1
 8003266:	6090      	str	r0, [r2, #8]
			EXTI->FTSR &= (1 << 0);
 8003268:	68d0      	ldr	r0, [r2, #12]
 800326a:	4001      	ands	r1, r0
 800326c:	60d1      	str	r1, [r2, #12]
		Current_GPIO_Pin = GPIO_PIN_0;
 800326e:	2101      	movs	r1, #1
 8003270:	4a0a      	ldr	r2, [pc, #40]	; (800329c <changeEXTI+0xc4>)
 8003272:	8011      	strh	r1, [r2, #0]
 8003274:	e7b7      	b.n	80031e6 <changeEXTI+0xe>
	    			EXTI->FTSR |= (1 << 2);
 8003276:	68d4      	ldr	r4, [r2, #12]
 8003278:	4320      	orrs	r0, r4
 800327a:	60d0      	str	r0, [r2, #12]
	    			EXTI->RTSR &= (0 << 2);
 800327c:	6890      	ldr	r0, [r2, #8]
 800327e:	6091      	str	r1, [r2, #8]
 8003280:	e7e2      	b.n	8003248 <changeEXTI+0x70>
			EXTI->FTSR |= (1 << 0);
 8003282:	68d0      	ldr	r0, [r2, #12]
 8003284:	4308      	orrs	r0, r1
 8003286:	60d0      	str	r0, [r2, #12]
			EXTI->RTSR &= (1 << 0);
 8003288:	6890      	ldr	r0, [r2, #8]
 800328a:	4001      	ands	r1, r0
 800328c:	6091      	str	r1, [r2, #8]
 800328e:	e7ee      	b.n	800326e <changeEXTI+0x96>
 8003290:	20000038 	.word	0x20000038
 8003294:	40010400 	.word	0x40010400
 8003298:	20000030 	.word	0x20000030
 800329c:	20000134 	.word	0x20000134

080032a0 <commutate>:
}
}


void commutate(){
	TIM14->CNT = 0;
 80032a0:	2200      	movs	r2, #0
 80032a2:	4bb9      	ldr	r3, [pc, #740]	; (8003588 <commutate+0x2e8>)
void commutate(){
 80032a4:	b510      	push	{r4, lr}
	TIM14->CNT = 0;
 80032a6:	625a      	str	r2, [r3, #36]	; 0x24
	if (forward == 1){
 80032a8:	4bb8      	ldr	r3, [pc, #736]	; (800358c <commutate+0x2ec>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d068      	beq.n	8003382 <commutate+0xe2>
		}
		if (step == 2 || step == 4 || step == 6) {
			rising = 0;
		}
	}
	if (forward == 0){
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d000      	beq.n	80032b6 <commutate+0x16>
 80032b4:	e163      	b.n	800357e <commutate+0x2de>
		step--;
 80032b6:	4ab6      	ldr	r2, [pc, #728]	; (8003590 <commutate+0x2f0>)
 80032b8:	6813      	ldr	r3, [r2, #0]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	6013      	str	r3, [r2, #0]
		if (step < 1) {
 80032be:	2b00      	cmp	r3, #0
 80032c0:	dd59      	ble.n	8003376 <commutate+0xd6>
			step = 6;
		}
		if (step == 1 || step == 3 || step == 5) {
 80032c2:	2202      	movs	r2, #2
 80032c4:	0019      	movs	r1, r3
 80032c6:	4391      	bics	r1, r2
 80032c8:	2901      	cmp	r1, #1
 80032ca:	d001      	beq.n	80032d0 <commutate+0x30>
 80032cc:	2b05      	cmp	r3, #5
 80032ce:	d102      	bne.n	80032d6 <commutate+0x36>
			rising = 0;
 80032d0:	2100      	movs	r1, #0
 80032d2:	4ab0      	ldr	r2, [pc, #704]	; (8003594 <commutate+0x2f4>)
 80032d4:	6011      	str	r1, [r2, #0]
 80032d6:	2204      	movs	r2, #4
 80032d8:	0019      	movs	r1, r3
 80032da:	4391      	bics	r1, r2
		}
		if (step == 2 || step == 4 || step == 6) {
 80032dc:	2902      	cmp	r1, #2
 80032de:	d04c      	beq.n	800337a <commutate+0xda>
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d04a      	beq.n	800337a <commutate+0xda>
switch(newStep)
 80032e4:	2b06      	cmp	r3, #6
 80032e6:	d83c      	bhi.n	8003362 <commutate+0xc2>
 80032e8:	4aab      	ldr	r2, [pc, #684]	; (8003598 <commutate+0x2f8>)
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	58d3      	ldr	r3, [r2, r3]
 80032ee:	469f      	mov	pc, r3
 80032f0:	4aaa      	ldr	r2, [pc, #680]	; (800359c <commutate+0x2fc>)
 80032f2:	49ab      	ldr	r1, [pc, #684]	; (80035a0 <commutate+0x300>)
 80032f4:	6813      	ldr	r3, [r2, #0]
 80032f6:	48ab      	ldr	r0, [pc, #684]	; (80035a4 <commutate+0x304>)
 80032f8:	4019      	ands	r1, r3
 80032fa:	2380      	movs	r3, #128	; 0x80
 80032fc:	051b      	lsls	r3, r3, #20
 80032fe:	430b      	orrs	r3, r1
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	2390      	movs	r3, #144	; 0x90
 8003304:	05db      	lsls	r3, r3, #23
 8003306:	6819      	ldr	r1, [r3, #0]
 8003308:	4008      	ands	r0, r1
 800330a:	2180      	movs	r1, #128	; 0x80
 800330c:	0289      	lsls	r1, r1, #10
 800330e:	4301      	orrs	r1, r0
 8003310:	6019      	str	r1, [r3, #0]
 8003312:	6811      	ldr	r1, [r2, #0]
 8003314:	48a4      	ldr	r0, [pc, #656]	; (80035a8 <commutate+0x308>)
 8003316:	4008      	ands	r0, r1
 8003318:	2180      	movs	r1, #128	; 0x80
 800331a:	0549      	lsls	r1, r1, #21
 800331c:	4301      	orrs	r1, r0
 800331e:	6011      	str	r1, [r2, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_14, LL_GPIO_MODE_OUTPUT); GPIOB->BRR = GPIO_PIN_14;
 8003320:	2180      	movs	r1, #128	; 0x80
 8003322:	01c9      	lsls	r1, r1, #7
 8003324:	6291      	str	r1, [r2, #40]	; 0x28
 8003326:	6819      	ldr	r1, [r3, #0]
 8003328:	48a0      	ldr	r0, [pc, #640]	; (80035ac <commutate+0x30c>)
 800332a:	4008      	ands	r0, r1
 800332c:	2180      	movs	r1, #128	; 0x80
 800332e:	02c9      	lsls	r1, r1, #11
 8003330:	4301      	orrs	r1, r0
 8003332:	6019      	str	r1, [r3, #0]
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_9, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_9;
 8003334:	2180      	movs	r1, #128	; 0x80
 8003336:	0089      	lsls	r1, r1, #2
 8003338:	6299      	str	r1, [r3, #40]	; 0x28
 800333a:	2080      	movs	r0, #128	; 0x80
 800333c:	6811      	ldr	r1, [r2, #0]
 800333e:	05c0      	lsls	r0, r0, #23
 8003340:	0089      	lsls	r1, r1, #2
 8003342:	0889      	lsrs	r1, r1, #2
 8003344:	4301      	orrs	r1, r0
 8003346:	6011      	str	r1, [r2, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_15, LL_GPIO_MODE_OUTPUT); GPIOB->BSRR = GPIO_PIN_15;
 8003348:	2180      	movs	r1, #128	; 0x80
 800334a:	0209      	lsls	r1, r1, #8
 800334c:	6191      	str	r1, [r2, #24]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	4997      	ldr	r1, [pc, #604]	; (80035b0 <commutate+0x310>)
 8003352:	4011      	ands	r1, r2
 8003354:	2280      	movs	r2, #128	; 0x80
 8003356:	0352      	lsls	r2, r2, #13
 8003358:	430a      	orrs	r2, r1
 800335a:	601a      	str	r2, [r3, #0]
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_10, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_10;
 800335c:	2280      	movs	r2, #128	; 0x80
 800335e:	00d2      	lsls	r2, r2, #3
 8003360:	629a      	str	r2, [r3, #40]	; 0x28
			rising = 1;
		}
	}
	comStep(step);
//    changeEXTI();                done at the end of exti routine
	bemfcounter = 0;
 8003362:	2300      	movs	r3, #0
 8003364:	4a93      	ldr	r2, [pc, #588]	; (80035b4 <commutate+0x314>)
 8003366:	6013      	str	r3, [r2, #0]
	zcfound = 0;
 8003368:	4a93      	ldr	r2, [pc, #588]	; (80035b8 <commutate+0x318>)
 800336a:	6013      	str	r3, [r2, #0]
	stop_time = TIM14->CNT;
 800336c:	4b86      	ldr	r3, [pc, #536]	; (8003588 <commutate+0x2e8>)
 800336e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003370:	4b92      	ldr	r3, [pc, #584]	; (80035bc <commutate+0x31c>)
 8003372:	601a      	str	r2, [r3, #0]
}
 8003374:	bd10      	pop	{r4, pc}
			step = 6;
 8003376:	2306      	movs	r3, #6
 8003378:	6013      	str	r3, [r2, #0]
			rising = 1;
 800337a:	2101      	movs	r1, #1
 800337c:	4a85      	ldr	r2, [pc, #532]	; (8003594 <commutate+0x2f4>)
 800337e:	6011      	str	r1, [r2, #0]
 8003380:	e7b0      	b.n	80032e4 <commutate+0x44>
		step++;
 8003382:	4983      	ldr	r1, [pc, #524]	; (8003590 <commutate+0x2f0>)
 8003384:	680a      	ldr	r2, [r1, #0]
 8003386:	3201      	adds	r2, #1
 8003388:	600a      	str	r2, [r1, #0]
		if (step > 6) {
 800338a:	2a06      	cmp	r2, #6
 800338c:	dc00      	bgt.n	8003390 <commutate+0xf0>
 800338e:	e0e4      	b.n	800355a <commutate+0x2ba>
		if (step == 1 || step == 3 || step == 5) {
 8003390:	2201      	movs	r2, #1
			step = 1;
 8003392:	600b      	str	r3, [r1, #0]
			rising = 1;                                // is back emf rising or falling
 8003394:	2401      	movs	r4, #1
 8003396:	487f      	ldr	r0, [pc, #508]	; (8003594 <commutate+0x2f4>)
 8003398:	6004      	str	r4, [r0, #0]
		if (step == 2 || step == 4 || step == 6) {
 800339a:	2b02      	cmp	r3, #2
 800339c:	d100      	bne.n	80033a0 <commutate+0x100>
 800339e:	e0e9      	b.n	8003574 <commutate+0x2d4>
 80033a0:	2a04      	cmp	r2, #4
 80033a2:	d100      	bne.n	80033a6 <commutate+0x106>
 80033a4:	e0e6      	b.n	8003574 <commutate+0x2d4>
 80033a6:	680b      	ldr	r3, [r1, #0]
 80033a8:	e79c      	b.n	80032e4 <commutate+0x44>
 80033aa:	4a7c      	ldr	r2, [pc, #496]	; (800359c <commutate+0x2fc>)
 80033ac:	497c      	ldr	r1, [pc, #496]	; (80035a0 <commutate+0x300>)
 80033ae:	6813      	ldr	r3, [r2, #0]
 80033b0:	487c      	ldr	r0, [pc, #496]	; (80035a4 <commutate+0x304>)
 80033b2:	4019      	ands	r1, r3
 80033b4:	2380      	movs	r3, #128	; 0x80
 80033b6:	04db      	lsls	r3, r3, #19
 80033b8:	430b      	orrs	r3, r1
 80033ba:	6013      	str	r3, [r2, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_13, LL_GPIO_MODE_OUTPUT); GPIOB->BRR = GPIO_PIN_13;
 80033bc:	2380      	movs	r3, #128	; 0x80
 80033be:	019b      	lsls	r3, r3, #6
 80033c0:	6293      	str	r3, [r2, #40]	; 0x28
 80033c2:	2390      	movs	r3, #144	; 0x90
 80033c4:	05db      	lsls	r3, r3, #23
 80033c6:	6819      	ldr	r1, [r3, #0]
 80033c8:	4008      	ands	r0, r1
 80033ca:	2180      	movs	r1, #128	; 0x80
 80033cc:	0249      	lsls	r1, r1, #9
 80033ce:	4301      	orrs	r1, r0
 80033d0:	6019      	str	r1, [r3, #0]
	LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_8, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_8;
 80033d2:	2180      	movs	r1, #128	; 0x80
 80033d4:	0049      	lsls	r1, r1, #1
 80033d6:	6299      	str	r1, [r3, #40]	; 0x28
 80033d8:	6811      	ldr	r1, [r2, #0]
 80033da:	4873      	ldr	r0, [pc, #460]	; (80035a8 <commutate+0x308>)
 80033dc:	4008      	ands	r0, r1
 80033de:	2180      	movs	r1, #128	; 0x80
 80033e0:	0589      	lsls	r1, r1, #22
 80033e2:	4301      	orrs	r1, r0
 80033e4:	6011      	str	r1, [r2, #0]
 80033e6:	6819      	ldr	r1, [r3, #0]
 80033e8:	4870      	ldr	r0, [pc, #448]	; (80035ac <commutate+0x30c>)
 80033ea:	4008      	ands	r0, r1
 80033ec:	2180      	movs	r1, #128	; 0x80
 80033ee:	0309      	lsls	r1, r1, #12
 80033f0:	4301      	orrs	r1, r0
 80033f2:	6019      	str	r1, [r3, #0]
 80033f4:	e7a1      	b.n	800333a <commutate+0x9a>
 80033f6:	4a69      	ldr	r2, [pc, #420]	; (800359c <commutate+0x2fc>)
 80033f8:	4969      	ldr	r1, [pc, #420]	; (80035a0 <commutate+0x300>)
 80033fa:	6813      	ldr	r3, [r2, #0]
 80033fc:	4869      	ldr	r0, [pc, #420]	; (80035a4 <commutate+0x304>)
 80033fe:	4019      	ands	r1, r3
 8003400:	2380      	movs	r3, #128	; 0x80
 8003402:	04db      	lsls	r3, r3, #19
 8003404:	430b      	orrs	r3, r1
 8003406:	6013      	str	r3, [r2, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_13, LL_GPIO_MODE_OUTPUT); GPIOB->BSRR = GPIO_PIN_13;
 8003408:	2380      	movs	r3, #128	; 0x80
 800340a:	019b      	lsls	r3, r3, #6
 800340c:	6193      	str	r3, [r2, #24]
 800340e:	2390      	movs	r3, #144	; 0x90
 8003410:	05db      	lsls	r3, r3, #23
 8003412:	6819      	ldr	r1, [r3, #0]
 8003414:	4008      	ands	r0, r1
 8003416:	2180      	movs	r1, #128	; 0x80
 8003418:	0249      	lsls	r1, r1, #9
 800341a:	4301      	orrs	r1, r0
 800341c:	6019      	str	r1, [r3, #0]
	LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_8, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_8;
 800341e:	2180      	movs	r1, #128	; 0x80
 8003420:	0049      	lsls	r1, r1, #1
 8003422:	6299      	str	r1, [r3, #40]	; 0x28
 8003424:	6811      	ldr	r1, [r2, #0]
 8003426:	4860      	ldr	r0, [pc, #384]	; (80035a8 <commutate+0x308>)
 8003428:	4008      	ands	r0, r1
 800342a:	2180      	movs	r1, #128	; 0x80
 800342c:	0589      	lsls	r1, r1, #22
 800342e:	4301      	orrs	r1, r0
 8003430:	6011      	str	r1, [r2, #0]
 8003432:	6819      	ldr	r1, [r3, #0]
 8003434:	485d      	ldr	r0, [pc, #372]	; (80035ac <commutate+0x30c>)
 8003436:	4008      	ands	r0, r1
 8003438:	2180      	movs	r1, #128	; 0x80
 800343a:	0309      	lsls	r1, r1, #12
 800343c:	4301      	orrs	r1, r0
 800343e:	6019      	str	r1, [r3, #0]
 8003440:	2080      	movs	r0, #128	; 0x80
 8003442:	6811      	ldr	r1, [r2, #0]
 8003444:	05c0      	lsls	r0, r0, #23
 8003446:	0089      	lsls	r1, r1, #2
 8003448:	0889      	lsrs	r1, r1, #2
 800344a:	4301      	orrs	r1, r0
 800344c:	6011      	str	r1, [r2, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_15, LL_GPIO_MODE_OUTPUT); GPIOB->BRR = GPIO_PIN_15;
 800344e:	2180      	movs	r1, #128	; 0x80
 8003450:	0209      	lsls	r1, r1, #8
 8003452:	6291      	str	r1, [r2, #40]	; 0x28
 8003454:	e77b      	b.n	800334e <commutate+0xae>
 8003456:	4a51      	ldr	r2, [pc, #324]	; (800359c <commutate+0x2fc>)
 8003458:	4951      	ldr	r1, [pc, #324]	; (80035a0 <commutate+0x300>)
 800345a:	6813      	ldr	r3, [r2, #0]
 800345c:	4851      	ldr	r0, [pc, #324]	; (80035a4 <commutate+0x304>)
 800345e:	4019      	ands	r1, r3
 8003460:	2380      	movs	r3, #128	; 0x80
 8003462:	04db      	lsls	r3, r3, #19
 8003464:	430b      	orrs	r3, r1
 8003466:	6013      	str	r3, [r2, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_13, LL_GPIO_MODE_OUTPUT); GPIOB->BSRR = GPIO_PIN_13;
 8003468:	2380      	movs	r3, #128	; 0x80
 800346a:	019b      	lsls	r3, r3, #6
 800346c:	6193      	str	r3, [r2, #24]
 800346e:	2390      	movs	r3, #144	; 0x90
 8003470:	05db      	lsls	r3, r3, #23
 8003472:	6819      	ldr	r1, [r3, #0]
 8003474:	4008      	ands	r0, r1
 8003476:	2180      	movs	r1, #128	; 0x80
 8003478:	0249      	lsls	r1, r1, #9
 800347a:	4301      	orrs	r1, r0
 800347c:	6019      	str	r1, [r3, #0]
	LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_8, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_8;
 800347e:	2180      	movs	r1, #128	; 0x80
 8003480:	0049      	lsls	r1, r1, #1
 8003482:	6299      	str	r1, [r3, #40]	; 0x28
 8003484:	6811      	ldr	r1, [r2, #0]
 8003486:	4848      	ldr	r0, [pc, #288]	; (80035a8 <commutate+0x308>)
 8003488:	4008      	ands	r0, r1
 800348a:	2180      	movs	r1, #128	; 0x80
 800348c:	0549      	lsls	r1, r1, #21
 800348e:	4301      	orrs	r1, r0
 8003490:	6011      	str	r1, [r2, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_14, LL_GPIO_MODE_OUTPUT); GPIOB->BRR = GPIO_PIN_14;
 8003492:	2180      	movs	r1, #128	; 0x80
 8003494:	01c9      	lsls	r1, r1, #7
 8003496:	6291      	str	r1, [r2, #40]	; 0x28
 8003498:	6819      	ldr	r1, [r3, #0]
 800349a:	4844      	ldr	r0, [pc, #272]	; (80035ac <commutate+0x30c>)
 800349c:	4008      	ands	r0, r1
 800349e:	2180      	movs	r1, #128	; 0x80
 80034a0:	02c9      	lsls	r1, r1, #11
 80034a2:	4301      	orrs	r1, r0
 80034a4:	6019      	str	r1, [r3, #0]
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_9, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_9;
 80034a6:	2180      	movs	r1, #128	; 0x80
 80034a8:	2080      	movs	r0, #128	; 0x80
 80034aa:	0089      	lsls	r1, r1, #2
 80034ac:	6299      	str	r1, [r3, #40]	; 0x28
 80034ae:	6811      	ldr	r1, [r2, #0]
 80034b0:	0600      	lsls	r0, r0, #24
 80034b2:	0089      	lsls	r1, r1, #2
 80034b4:	0889      	lsrs	r1, r1, #2
 80034b6:	4301      	orrs	r1, r0
 80034b8:	6011      	str	r1, [r2, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	493c      	ldr	r1, [pc, #240]	; (80035b0 <commutate+0x310>)
 80034be:	4011      	ands	r1, r2
 80034c0:	2280      	movs	r2, #128	; 0x80
 80034c2:	0392      	lsls	r2, r2, #14
 80034c4:	430a      	orrs	r2, r1
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	e74b      	b.n	8003362 <commutate+0xc2>
 80034ca:	4a34      	ldr	r2, [pc, #208]	; (800359c <commutate+0x2fc>)
 80034cc:	4934      	ldr	r1, [pc, #208]	; (80035a0 <commutate+0x300>)
 80034ce:	6813      	ldr	r3, [r2, #0]
 80034d0:	4834      	ldr	r0, [pc, #208]	; (80035a4 <commutate+0x304>)
 80034d2:	4019      	ands	r1, r3
 80034d4:	2380      	movs	r3, #128	; 0x80
 80034d6:	04db      	lsls	r3, r3, #19
 80034d8:	430b      	orrs	r3, r1
 80034da:	6013      	str	r3, [r2, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_13, LL_GPIO_MODE_OUTPUT); GPIOB->BRR = GPIO_PIN_13;
 80034dc:	2380      	movs	r3, #128	; 0x80
 80034de:	019b      	lsls	r3, r3, #6
 80034e0:	6293      	str	r3, [r2, #40]	; 0x28
 80034e2:	2390      	movs	r3, #144	; 0x90
 80034e4:	05db      	lsls	r3, r3, #23
 80034e6:	6819      	ldr	r1, [r3, #0]
 80034e8:	4008      	ands	r0, r1
 80034ea:	2180      	movs	r1, #128	; 0x80
 80034ec:	0249      	lsls	r1, r1, #9
 80034ee:	4301      	orrs	r1, r0
 80034f0:	6019      	str	r1, [r3, #0]
	LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_8, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_8;
 80034f2:	2180      	movs	r1, #128	; 0x80
 80034f4:	0049      	lsls	r1, r1, #1
 80034f6:	6299      	str	r1, [r3, #40]	; 0x28
 80034f8:	6811      	ldr	r1, [r2, #0]
 80034fa:	482b      	ldr	r0, [pc, #172]	; (80035a8 <commutate+0x308>)
 80034fc:	4008      	ands	r0, r1
 80034fe:	2180      	movs	r1, #128	; 0x80
 8003500:	0549      	lsls	r1, r1, #21
 8003502:	4301      	orrs	r1, r0
 8003504:	6011      	str	r1, [r2, #0]
	LL_GPIO_SetPinMode(GPIOB, GPIO_PIN_14, LL_GPIO_MODE_OUTPUT); GPIOB->BSRR = GPIO_PIN_14;
 8003506:	2180      	movs	r1, #128	; 0x80
 8003508:	01c9      	lsls	r1, r1, #7
 800350a:	6191      	str	r1, [r2, #24]
 800350c:	e7c4      	b.n	8003498 <commutate+0x1f8>
 800350e:	4a23      	ldr	r2, [pc, #140]	; (800359c <commutate+0x2fc>)
 8003510:	4923      	ldr	r1, [pc, #140]	; (80035a0 <commutate+0x300>)
 8003512:	6813      	ldr	r3, [r2, #0]
 8003514:	4823      	ldr	r0, [pc, #140]	; (80035a4 <commutate+0x304>)
 8003516:	4019      	ands	r1, r3
 8003518:	2380      	movs	r3, #128	; 0x80
 800351a:	051b      	lsls	r3, r3, #20
 800351c:	430b      	orrs	r3, r1
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	2390      	movs	r3, #144	; 0x90
 8003522:	05db      	lsls	r3, r3, #23
 8003524:	6819      	ldr	r1, [r3, #0]
 8003526:	4008      	ands	r0, r1
 8003528:	2180      	movs	r1, #128	; 0x80
 800352a:	0289      	lsls	r1, r1, #10
 800352c:	4301      	orrs	r1, r0
 800352e:	6019      	str	r1, [r3, #0]
 8003530:	6811      	ldr	r1, [r2, #0]
 8003532:	481d      	ldr	r0, [pc, #116]	; (80035a8 <commutate+0x308>)
 8003534:	4008      	ands	r0, r1
 8003536:	2180      	movs	r1, #128	; 0x80
 8003538:	0549      	lsls	r1, r1, #21
 800353a:	4301      	orrs	r1, r0
 800353c:	6011      	str	r1, [r2, #0]
 800353e:	2180      	movs	r1, #128	; 0x80
 8003540:	01c9      	lsls	r1, r1, #7
 8003542:	6191      	str	r1, [r2, #24]
 8003544:	6819      	ldr	r1, [r3, #0]
 8003546:	4819      	ldr	r0, [pc, #100]	; (80035ac <commutate+0x30c>)
 8003548:	4008      	ands	r0, r1
 800354a:	2180      	movs	r1, #128	; 0x80
 800354c:	02c9      	lsls	r1, r1, #11
 800354e:	4301      	orrs	r1, r0
 8003550:	6019      	str	r1, [r3, #0]
		LL_GPIO_SetPinMode(GPIOA, GPIO_PIN_9, LL_GPIO_MODE_OUTPUT); GPIOA->BRR = GPIO_PIN_9;
 8003552:	2180      	movs	r1, #128	; 0x80
 8003554:	0089      	lsls	r1, r1, #2
 8003556:	6299      	str	r1, [r3, #40]	; 0x28
 8003558:	e772      	b.n	8003440 <commutate+0x1a0>
		if (step == 1 || step == 3 || step == 5) {
 800355a:	2002      	movs	r0, #2
 800355c:	0014      	movs	r4, r2
 800355e:	4384      	bics	r4, r0
 8003560:	2c01      	cmp	r4, #1
 8003562:	d00f      	beq.n	8003584 <commutate+0x2e4>
 8003564:	2a05      	cmp	r2, #5
 8003566:	d100      	bne.n	800356a <commutate+0x2ca>
 8003568:	e714      	b.n	8003394 <commutate+0xf4>
 800356a:	2304      	movs	r3, #4
 800356c:	0010      	movs	r0, r2
 800356e:	4398      	bics	r0, r3
 8003570:	0003      	movs	r3, r0
 8003572:	e712      	b.n	800339a <commutate+0xfa>
			rising = 0;
 8003574:	2200      	movs	r2, #0
 8003576:	4b07      	ldr	r3, [pc, #28]	; (8003594 <commutate+0x2f4>)
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	680b      	ldr	r3, [r1, #0]
 800357c:	e6b2      	b.n	80032e4 <commutate+0x44>
 800357e:	4b04      	ldr	r3, [pc, #16]	; (8003590 <commutate+0x2f0>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	e6af      	b.n	80032e4 <commutate+0x44>
		if (step == 1 || step == 3 || step == 5) {
 8003584:	0013      	movs	r3, r2
 8003586:	e705      	b.n	8003394 <commutate+0xf4>
 8003588:	40002000 	.word	0x40002000
 800358c:	20000014 	.word	0x20000014
 8003590:	20000038 	.word	0x20000038
 8003594:	20000030 	.word	0x20000030
 8003598:	08004580 	.word	0x08004580
 800359c:	48000400 	.word	0x48000400
 80035a0:	f3ffffff 	.word	0xf3ffffff
 80035a4:	fffcffff 	.word	0xfffcffff
 80035a8:	cfffffff 	.word	0xcfffffff
 80035ac:	fff3ffff 	.word	0xfff3ffff
 80035b0:	ffcfffff 	.word	0xffcfffff
 80035b4:	20000194 	.word	0x20000194
 80035b8:	2000010c 	.word	0x2000010c
 80035bc:	200000f4 	.word	0x200000f4

080035c0 <interruptRoutine>:

void interruptRoutine(){
 80035c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035c2:	46c6      	mov	lr, r8
	thiszctime = TIM3->CNT;
 80035c4:	4b3c      	ldr	r3, [pc, #240]	; (80036b8 <interruptRoutine+0xf8>)
 80035c6:	4d3d      	ldr	r5, [pc, #244]	; (80036bc <interruptRoutine+0xfc>)
 80035c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
//	TIM14->CNT = 0;
	if (commutation_interval > 200){
 80035ca:	4c3d      	ldr	r4, [pc, #244]	; (80036c0 <interruptRoutine+0x100>)
void interruptRoutine(){
 80035cc:	b500      	push	{lr}
	thiszctime = TIM3->CNT;
 80035ce:	802b      	strh	r3, [r5, #0]
	if (commutation_interval > 200){
 80035d0:	8823      	ldrh	r3, [r4, #0]
 80035d2:	2bc8      	cmp	r3, #200	; 0xc8
 80035d4:	d91c      	bls.n	8003610 <interruptRoutine+0x50>
stuckcounter++;
 80035d6:	4a3b      	ldr	r2, [pc, #236]	; (80036c4 <interruptRoutine+0x104>)
 80035d8:	6813      	ldr	r3, [r2, #0]
 80035da:	3301      	adds	r3, #1
 80035dc:	6013      	str	r3, [r2, #0]
if (stuckcounter > 100){
 80035de:	2b64      	cmp	r3, #100	; 0x64
 80035e0:	dc4e      	bgt.n	8003680 <interruptRoutine+0xc0>




	//		GPIOA->BSRR = GPIO_PIN_15;
			if (rising){
 80035e2:	4b39      	ldr	r3, [pc, #228]	; (80036c8 <interruptRoutine+0x108>)

				for (int i = 0; i < filter_level; i++){
 80035e4:	4f39      	ldr	r7, [pc, #228]	; (80036cc <interruptRoutine+0x10c>)
			if (rising){
 80035e6:	681e      	ldr	r6, [r3, #0]
				for (int i = 0; i < filter_level; i++){
 80035e8:	683b      	ldr	r3, [r7, #0]
			if (rising){
 80035ea:	2e00      	cmp	r6, #0
 80035ec:	d053      	beq.n	8003696 <interruptRoutine+0xd6>
				for (int i = 0; i < filter_level; i++){
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	dd0e      	ble.n	8003610 <interruptRoutine+0x50>
 80035f2:	4b37      	ldr	r3, [pc, #220]	; (80036d0 <interruptRoutine+0x110>)
 80035f4:	2600      	movs	r6, #0
 80035f6:	4698      	mov	r8, r3
				if (HAL_GPIO_ReadPin(GPIOA, Current_GPIO_Pin) == 0){
 80035f8:	4643      	mov	r3, r8
 80035fa:	2090      	movs	r0, #144	; 0x90
 80035fc:	8819      	ldrh	r1, [r3, #0]
 80035fe:	05c0      	lsls	r0, r0, #23
 8003600:	f7fd fb64 	bl	8000ccc <HAL_GPIO_ReadPin>
 8003604:	2800      	cmp	r0, #0
 8003606:	d038      	beq.n	800367a <interruptRoutine+0xba>
				for (int i = 0; i < filter_level; i++){
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	3601      	adds	r6, #1
 800360c:	42b3      	cmp	r3, r6
 800360e:	dcf3      	bgt.n	80035f8 <interruptRoutine+0x38>
	}
	//		while (TIM3->CNT - thiszctime < filter_delay){
	//
	//		}

			TIM3->CNT = 0;
 8003610:	2100      	movs	r1, #0
 8003612:	4a29      	ldr	r2, [pc, #164]	; (80036b8 <interruptRoutine+0xf8>)
	EXTI->IMR &= (0 << 1);
 8003614:	4b2f      	ldr	r3, [pc, #188]	; (80036d4 <interruptRoutine+0x114>)
			TIM3->CNT = 0;
 8003616:	6251      	str	r1, [r2, #36]	; 0x24
	EXTI->IMR &= (0 << 1);
 8003618:	6818      	ldr	r0, [r3, #0]
 800361a:	4e2f      	ldr	r6, [pc, #188]	; (80036d8 <interruptRoutine+0x118>)
 800361c:	6019      	str	r1, [r3, #0]
	EXTI->IMR &= (0 << 2);
 800361e:	6818      	ldr	r0, [r3, #0]
 8003620:	6019      	str	r1, [r3, #0]
	EXTI->IMR &= (0 << 0);
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	6019      	str	r1, [r3, #0]
 8003626:	6831      	ldr	r1, [r6, #0]
			maskPhaseInterrupts();
//calculateOffset();


	//		stop_time = TIM14->CNT;
						while (TIM3->CNT  < waitTime){
 8003628:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800362a:	428b      	cmp	r3, r1
 800362c:	d3fc      	bcc.n	8003628 <interruptRoutine+0x68>
									}
						      //      TIM1->CNT = duty_cycle;

									commutate();
 800362e:	f7ff fe37 	bl	80032a0 <commutate>
 8003632:	4f2a      	ldr	r7, [pc, #168]	; (80036dc <interruptRoutine+0x11c>)
 8003634:	6833      	ldr	r3, [r6, #0]
 8003636:	6839      	ldr	r1, [r7, #0]
 8003638:	468c      	mov	ip, r1
 800363a:	4463      	add	r3, ip
 800363c:	001a      	movs	r2, r3
									while (TIM3->CNT  < waitTime + blanktime){
 800363e:	491e      	ldr	r1, [pc, #120]	; (80036b8 <interruptRoutine+0xf8>)
 8003640:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8003642:	4293      	cmp	r3, r2
 8003644:	d3fc      	bcc.n	8003640 <interruptRoutine+0x80>
//                                	 commutation_interval = thiszctime ;
//                                 }else{
							             // TEST!   divide by two when tracking up down time independant

	//										}
									commutation_interval = ((4 *commutation_interval) + thiszctime) / 5;
 8003646:	8820      	ldrh	r0, [r4, #0]
 8003648:	882b      	ldrh	r3, [r5, #0]
 800364a:	0080      	lsls	r0, r0, #2
 800364c:	18c0      	adds	r0, r0, r3
 800364e:	2105      	movs	r1, #5
 8003650:	f7fc fde4 	bl	800021c <__divsi3>
									                                             advance = commutation_interval / advancedivisor;
 8003654:	4b22      	ldr	r3, [pc, #136]	; (80036e0 <interruptRoutine+0x120>)
									commutation_interval = ((4 *commutation_interval) + thiszctime) / 5;
 8003656:	b285      	uxth	r5, r0
									                                             advance = commutation_interval / advancedivisor;
 8003658:	6819      	ldr	r1, [r3, #0]
									commutation_interval = ((4 *commutation_interval) + thiszctime) / 5;
 800365a:	8025      	strh	r5, [r4, #0]
									                                             advance = commutation_interval / advancedivisor;
 800365c:	f7fc fdde 	bl	800021c <__divsi3>
 8003660:	4b20      	ldr	r3, [pc, #128]	; (80036e4 <interruptRoutine+0x124>)
 8003662:	6018      	str	r0, [r3, #0]
																					waitTime = commutation_interval /2  - advance;
 8003664:	086b      	lsrs	r3, r5, #1
 8003666:	1a18      	subs	r0, r3, r0
																					blanktime = commutation_interval / 8;
 8003668:	08ed      	lsrs	r5, r5, #3
																					waitTime = commutation_interval /2  - advance;
 800366a:	6030      	str	r0, [r6, #0]
																					blanktime = commutation_interval / 8;
 800366c:	603d      	str	r5, [r7, #0]
												changeEXTI();
 800366e:	f7ff fdb3 	bl	80031d8 <changeEXTI>
												zero_crosses++;
 8003672:	4a1d      	ldr	r2, [pc, #116]	; (80036e8 <interruptRoutine+0x128>)
 8003674:	6813      	ldr	r3, [r2, #0]
 8003676:	3301      	adds	r3, #1
 8003678:	6013      	str	r3, [r2, #0]
									return;


}
 800367a:	bc04      	pop	{r2}
 800367c:	4690      	mov	r8, r2
 800367e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	EXTI->IMR &= (0 << 1);
 8003680:	4b14      	ldr	r3, [pc, #80]	; (80036d4 <interruptRoutine+0x114>)
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]
	EXTI->IMR &= (0 << 2);
 8003688:	6819      	ldr	r1, [r3, #0]
 800368a:	601a      	str	r2, [r3, #0]
	EXTI->IMR &= (0 << 0);
 800368c:	6819      	ldr	r1, [r3, #0]
 800368e:	601a      	str	r2, [r3, #0]
	zero_crosses = 0;
 8003690:	4b15      	ldr	r3, [pc, #84]	; (80036e8 <interruptRoutine+0x128>)
 8003692:	601a      	str	r2, [r3, #0]
	return;
 8003694:	e7f1      	b.n	800367a <interruptRoutine+0xba>
				for (int i = 0; i < filter_level; i++){
 8003696:	2b00      	cmp	r3, #0
 8003698:	ddba      	ble.n	8003610 <interruptRoutine+0x50>
 800369a:	4b0d      	ldr	r3, [pc, #52]	; (80036d0 <interruptRoutine+0x110>)
 800369c:	4698      	mov	r8, r3
				if (HAL_GPIO_ReadPin(GPIOA, Current_GPIO_Pin) == 1){
 800369e:	4643      	mov	r3, r8
 80036a0:	2090      	movs	r0, #144	; 0x90
 80036a2:	8819      	ldrh	r1, [r3, #0]
 80036a4:	05c0      	lsls	r0, r0, #23
 80036a6:	f7fd fb11 	bl	8000ccc <HAL_GPIO_ReadPin>
 80036aa:	2801      	cmp	r0, #1
 80036ac:	d0e5      	beq.n	800367a <interruptRoutine+0xba>
				for (int i = 0; i < filter_level; i++){
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	3601      	adds	r6, #1
 80036b2:	42b3      	cmp	r3, r6
 80036b4:	dcf3      	bgt.n	800369e <interruptRoutine+0xde>
 80036b6:	e7ab      	b.n	8003610 <interruptRoutine+0x50>
 80036b8:	40000400 	.word	0x40000400
 80036bc:	200004bc 	.word	0x200004bc
 80036c0:	20000004 	.word	0x20000004
 80036c4:	200000f8 	.word	0x200000f8
 80036c8:	20000030 	.word	0x20000030
 80036cc:	2000000c 	.word	0x2000000c
 80036d0:	20000134 	.word	0x20000134
 80036d4:	40010400 	.word	0x40010400
 80036d8:	20000108 	.word	0x20000108
 80036dc:	200002a0 	.word	0x200002a0
 80036e0:	20000000 	.word	0x20000000
 80036e4:	20000060 	.word	0x20000060
 80036e8:	200005e8 	.word	0x200005e8

080036ec <HAL_TIM_PeriodElapsedCallback>:
//				}
//			}else{

//			}

}
 80036ec:	4770      	bx	lr
 80036ee:	46c0      	nop			; (mov r8, r8)

080036f0 <zcfoundroutine>:
}


void zcfoundroutine(){
	thiszctime = TIM3->CNT;
	TIM3->CNT = 0;
 80036f0:	2300      	movs	r3, #0
	commutation_interval = (thiszctime + (3*commutation_interval)) / 4;
 80036f2:	481a      	ldr	r0, [pc, #104]	; (800375c <zcfoundroutine+0x6c>)
	thiszctime = TIM3->CNT;
 80036f4:	491a      	ldr	r1, [pc, #104]	; (8003760 <zcfoundroutine+0x70>)
void zcfoundroutine(){
 80036f6:	b570      	push	{r4, r5, r6, lr}
	thiszctime = TIM3->CNT;
 80036f8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	commutation_interval = (thiszctime + (3*commutation_interval)) / 4;
 80036fa:	8804      	ldrh	r4, [r0, #0]
	thiszctime = TIM3->CNT;
 80036fc:	4e19      	ldr	r6, [pc, #100]	; (8003764 <zcfoundroutine+0x74>)
	waitTime = commutation_interval / 2;
 80036fe:	4d1a      	ldr	r5, [pc, #104]	; (8003768 <zcfoundroutine+0x78>)
	thiszctime = TIM3->CNT;
 8003700:	8032      	strh	r2, [r6, #0]
	TIM3->CNT = 0;
 8003702:	624b      	str	r3, [r1, #36]	; 0x24
 8003704:	0412      	lsls	r2, r2, #16
	commutation_interval = (thiszctime + (3*commutation_interval)) / 4;
 8003706:	0063      	lsls	r3, r4, #1
 8003708:	191b      	adds	r3, r3, r4
 800370a:	0c12      	lsrs	r2, r2, #16
 800370c:	189b      	adds	r3, r3, r2
 800370e:	109b      	asrs	r3, r3, #2
 8003710:	b29b      	uxth	r3, r3
	blanktime = commutation_interval / 4;
 8003712:	4c16      	ldr	r4, [pc, #88]	; (800376c <zcfoundroutine+0x7c>)
	commutation_interval = (thiszctime + (3*commutation_interval)) / 4;
 8003714:	8003      	strh	r3, [r0, #0]
	waitTime = commutation_interval / 2;
 8003716:	0858      	lsrs	r0, r3, #1
	blanktime = commutation_interval / 4;
 8003718:	089b      	lsrs	r3, r3, #2
 800371a:	6023      	str	r3, [r4, #0]
 800371c:	4b14      	ldr	r3, [pc, #80]	; (8003770 <zcfoundroutine+0x80>)
	waitTime = commutation_interval / 2;
 800371e:	6028      	str	r0, [r5, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	1ac0      	subs	r0, r0, r3
	while (TIM3->CNT - thiszctime < waitTime - advance){
 8003724:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8003726:	1a9b      	subs	r3, r3, r2
 8003728:	4283      	cmp	r3, r0
 800372a:	d3fb      	bcc.n	8003724 <zcfoundroutine+0x34>

	}
	commutate();
 800372c:	f7ff fdb8 	bl	80032a0 <commutate>
 8003730:	682a      	ldr	r2, [r5, #0]
 8003732:	6823      	ldr	r3, [r4, #0]
 8003734:	8830      	ldrh	r0, [r6, #0]
	while (TIM3->CNT - thiszctime < waitTime + blanktime){
 8003736:	490a      	ldr	r1, [pc, #40]	; (8003760 <zcfoundroutine+0x70>)
 8003738:	18d2      	adds	r2, r2, r3
 800373a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800373c:	1a1b      	subs	r3, r3, r0
 800373e:	4293      	cmp	r3, r2
 8003740:	d3fb      	bcc.n	800373a <zcfoundroutine+0x4a>

	}
	//changeEXTI();
    bemfcounter = 0;
 8003742:	2200      	movs	r2, #0
 8003744:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <zcfoundroutine+0x84>)
 8003746:	601a      	str	r2, [r3, #0]


    zero_crosses++;
 8003748:	4a0b      	ldr	r2, [pc, #44]	; (8003778 <zcfoundroutine+0x88>)
 800374a:	6813      	ldr	r3, [r2, #0]
 800374c:	3301      	adds	r3, #1
 800374e:	6013      	str	r3, [r2, #0]
    if (zero_crosses == 50) {
 8003750:	2b32      	cmp	r3, #50	; 0x32
 8003752:	d000      	beq.n	8003756 <zcfoundroutine+0x66>
    	changeEXTI();
    }


}
 8003754:	bd70      	pop	{r4, r5, r6, pc}
    	changeEXTI();
 8003756:	f7ff fd3f 	bl	80031d8 <changeEXTI>
}
 800375a:	e7fb      	b.n	8003754 <zcfoundroutine+0x64>
 800375c:	20000004 	.word	0x20000004
 8003760:	40000400 	.word	0x40000400
 8003764:	200004bc 	.word	0x200004bc
 8003768:	20000108 	.word	0x20000108
 800376c:	200002a0 	.word	0x200002a0
 8003770:	20000060 	.word	0x20000060
 8003774:	20000194 	.word	0x20000194
 8003778:	200005e8 	.word	0x200005e8

0800377c <SystemClock_Config>:
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
 800377c:	2210      	movs	r2, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 800377e:	231a      	movs	r3, #26
{
 8003780:	b510      	push	{r4, lr}
 8003782:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8003784:	9304      	str	r3, [sp, #16]
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003786:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003788:	3b19      	subs	r3, #25
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800378a:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 800378c:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800378e:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8003790:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003792:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003794:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003796:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003798:	0392      	lsls	r2, r2, #14
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800379a:	a804      	add	r0, sp, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800379c:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800379e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80037a0:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80037a2:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037a4:	f7fd fad2 	bl	8000d4c <HAL_RCC_OscConfig>
 80037a8:	2800      	cmp	r0, #0
 80037aa:	d000      	beq.n	80037ae <SystemClock_Config+0x32>
 80037ac:	e7fe      	b.n	80037ac <SystemClock_Config+0x30>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037ae:	2307      	movs	r3, #7
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037b0:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80037b2:	9003      	str	r0, [sp, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80037b4:	2101      	movs	r1, #1
 80037b6:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037b8:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037ba:	9401      	str	r4, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80037bc:	f7fd fcfe 	bl	80011bc <HAL_RCC_ClockConfig>
 80037c0:	2800      	cmp	r0, #0
 80037c2:	d000      	beq.n	80037c6 <SystemClock_Config+0x4a>
 80037c4:	e7fe      	b.n	80037c4 <SystemClock_Config+0x48>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80037c6:	f7fd fdcb 	bl	8001360 <HAL_RCC_GetHCLKFreq>
 80037ca:	21fa      	movs	r1, #250	; 0xfa
 80037cc:	0089      	lsls	r1, r1, #2
 80037ce:	f7fc fc9b 	bl	8000108 <__udivsi3>
 80037d2:	f7fd f8af 	bl	8000934 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80037d6:	2004      	movs	r0, #4
 80037d8:	f7fd f8c8 	bl	800096c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80037dc:	2001      	movs	r0, #1
 80037de:	2200      	movs	r2, #0
 80037e0:	2100      	movs	r1, #0
 80037e2:	4240      	negs	r0, r0
 80037e4:	f7fd f868 	bl	80008b8 <HAL_NVIC_SetPriority>
}
 80037e8:	b010      	add	sp, #64	; 0x40
 80037ea:	bd10      	pop	{r4, pc}

080037ec <main>:
{
 80037ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ee:	46de      	mov	lr, fp
 80037f0:	4657      	mov	r7, sl
 80037f2:	464e      	mov	r6, r9
 80037f4:	4645      	mov	r5, r8
 80037f6:	b5e0      	push	{r5, r6, r7, lr}
 80037f8:	b09b      	sub	sp, #108	; 0x6c
  HAL_Init();
 80037fa:	f7fc fe0d 	bl	8000418 <HAL_Init>
  SystemClock_Config();
 80037fe:	f7ff ffbd 	bl	800377c <SystemClock_Config>
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8003802:	2180      	movs	r1, #128	; 0x80
 8003804:	4fdc      	ldr	r7, [pc, #880]	; (8003b78 <main+0x38c>)
 8003806:	03c9      	lsls	r1, r1, #15
 8003808:	697a      	ldr	r2, [r7, #20]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800380a:	2601      	movs	r6, #1
 800380c:	430a      	orrs	r2, r1
 800380e:	617a      	str	r2, [r7, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	2490      	movs	r4, #144	; 0x90
 8003814:	400b      	ands	r3, r1
  SET_BIT(RCC->AHBENR, Periphs);
 8003816:	2180      	movs	r1, #128	; 0x80
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8003818:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 800381a:	9b03      	ldr	r3, [sp, #12]
  SET_BIT(RCC->AHBENR, Periphs);
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	0289      	lsls	r1, r1, #10
 8003820:	430a      	orrs	r2, r1
 8003822:	617a      	str	r2, [r7, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	05e4      	lsls	r4, r4, #23
 8003828:	400b      	ands	r3, r1
  SET_BIT(RCC->AHBENR, Periphs);
 800382a:	2180      	movs	r1, #128	; 0x80
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800382c:	9304      	str	r3, [sp, #16]
  (void)tmpreg;
 800382e:	9b04      	ldr	r3, [sp, #16]
  SET_BIT(RCC->AHBENR, Periphs);
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	02c9      	lsls	r1, r1, #11
 8003834:	430a      	orrs	r2, r1
 8003836:	617a      	str	r2, [r7, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8003838:	697b      	ldr	r3, [r7, #20]
  LL_GPIO_ResetOutputPin(GPIOF, LL_GPIO_PIN_7);

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800383a:	2500      	movs	r5, #0
 800383c:	400b      	ands	r3, r1
 800383e:	9305      	str	r3, [sp, #20]
  (void)tmpreg;
 8003840:	9b05      	ldr	r3, [sp, #20]
 8003842:	4bce      	ldr	r3, [pc, #824]	; (8003b7c <main+0x390>)
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003844:	a913      	add	r1, sp, #76	; 0x4c
 8003846:	629e      	str	r6, [r3, #40]	; 0x28
 8003848:	4699      	mov	r9, r3
 800384a:	2380      	movs	r3, #128	; 0x80
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003850:	469b      	mov	fp, r3
 8003852:	2340      	movs	r3, #64	; 0x40
 8003854:	4698      	mov	r8, r3
 8003856:	464b      	mov	r3, r9
 8003858:	4642      	mov	r2, r8
 800385a:	629a      	str	r2, [r3, #40]	; 0x28
 800385c:	2380      	movs	r3, #128	; 0x80
 800385e:	469a      	mov	sl, r3
 8003860:	464b      	mov	r3, r9
 8003862:	4652      	mov	r2, sl
 8003864:	4648      	mov	r0, r9
 8003866:	629a      	str	r2, [r3, #40]	; 0x28
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8003868:	9613      	str	r6, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800386a:	9614      	str	r6, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800386c:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800386e:	9516      	str	r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003870:	9517      	str	r5, [sp, #92]	; 0x5c
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003872:	f7fe fc1f 	bl	80020b4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8003876:	465b      	mov	r3, fp
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003878:	a913      	add	r1, sp, #76	; 0x4c
 800387a:	0020      	movs	r0, r4
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 800387c:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800387e:	9614      	str	r6, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003880:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003882:	9516      	str	r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003884:	9517      	str	r5, [sp, #92]	; 0x5c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003886:	f7fe fc15 	bl	80020b4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 800388a:	4643      	mov	r3, r8
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800388c:	a913      	add	r1, sp, #76	; 0x4c
 800388e:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8003890:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8003892:	9614      	str	r6, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003894:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003896:	9516      	str	r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003898:	9517      	str	r5, [sp, #92]	; 0x5c
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800389a:	f7fe fc0b 	bl	80020b4 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 800389e:	4653      	mov	r3, sl
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80038a0:	a913      	add	r1, sp, #76	; 0x4c
 80038a2:	4648      	mov	r0, r9
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80038a4:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80038a6:	9614      	str	r6, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80038a8:	9515      	str	r5, [sp, #84]	; 0x54
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80038aa:	9516      	str	r5, [sp, #88]	; 0x58
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80038ac:	9517      	str	r5, [sp, #92]	; 0x5c
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80038ae:	f7fe fc01 	bl	80020b4 <LL_GPIO_Init>
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], SYSCFG_EXTICR1_EXTI0 << (Line >> 16), Port << (Line >> 16));
 80038b2:	210f      	movs	r1, #15
 80038b4:	4bb2      	ldr	r3, [pc, #712]	; (8003b80 <main+0x394>)
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	438a      	bics	r2, r1
 80038ba:	609a      	str	r2, [r3, #8]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	31e1      	adds	r1, #225	; 0xe1
 80038c0:	438a      	bics	r2, r1
 80038c2:	609a      	str	r2, [r3, #8]
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	49af      	ldr	r1, [pc, #700]	; (8003b84 <main+0x398>)
 80038c8:	400a      	ands	r2, r1
 80038ca:	609a      	str	r2, [r3, #8]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 80038cc:	2203      	movs	r2, #3
 80038ce:	4691      	mov	r9, r2
 80038d0:	210c      	movs	r1, #12
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80038d2:	4648      	mov	r0, r9
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 80038d4:	68e3      	ldr	r3, [r4, #12]
 80038d6:	4393      	bics	r3, r2
 80038d8:	60e3      	str	r3, [r4, #12]
 80038da:	68e3      	ldr	r3, [r4, #12]
 80038dc:	322d      	adds	r2, #45	; 0x2d
 80038de:	438b      	bics	r3, r1
 80038e0:	60e3      	str	r3, [r4, #12]
 80038e2:	68e3      	ldr	r3, [r4, #12]
 80038e4:	4393      	bics	r3, r2
 80038e6:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 80038e8:	6823      	ldr	r3, [r4, #0]
 80038ea:	4383      	bics	r3, r0
 80038ec:	6023      	str	r3, [r4, #0]
 80038ee:	6823      	ldr	r3, [r4, #0]
 80038f0:	438b      	bics	r3, r1
 80038f2:	6023      	str	r3, [r4, #0]
 80038f4:	6823      	ldr	r3, [r4, #0]
 80038f6:	4393      	bics	r3, r2
 80038f8:	6023      	str	r3, [r4, #0]

  /**/
  LL_GPIO_SetPinMode(GPIOA, LL_GPIO_PIN_2, LL_GPIO_MODE_INPUT);

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80038fa:	ac0c      	add	r4, sp, #48	; 0x30
  EXTI_InitStruct.LineCommand = ENABLE;
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 80038fc:	71a0      	strb	r0, [r4, #6]
  LL_EXTI_Init(&EXTI_InitStruct);
 80038fe:	0020      	movs	r0, r4
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8003900:	960c      	str	r6, [sp, #48]	; 0x30
  EXTI_InitStruct.LineCommand = ENABLE;
 8003902:	7126      	strb	r6, [r4, #4]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003904:	7165      	strb	r5, [r4, #5]
  LL_EXTI_Init(&EXTI_InitStruct);
 8003906:	f7fe fb7b 	bl	8002000 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 800390a:	2302      	movs	r3, #2
 800390c:	930c      	str	r3, [sp, #48]	; 0x30
  EXTI_InitStruct.LineCommand = ENABLE;
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 800390e:	464b      	mov	r3, r9
  LL_EXTI_Init(&EXTI_InitStruct);
 8003910:	0020      	movs	r0, r4
  EXTI_InitStruct.LineCommand = ENABLE;
 8003912:	7126      	strb	r6, [r4, #4]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8003914:	71a3      	strb	r3, [r4, #6]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003916:	7165      	strb	r5, [r4, #5]
  LL_EXTI_Init(&EXTI_InitStruct);
 8003918:	f7fe fb72 	bl	8002000 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 800391c:	2304      	movs	r3, #4
 800391e:	930c      	str	r3, [sp, #48]	; 0x30
  EXTI_InitStruct.LineCommand = ENABLE;
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8003920:	464b      	mov	r3, r9
  LL_EXTI_Init(&EXTI_InitStruct);
 8003922:	0020      	movs	r0, r4
  EXTI_InitStruct.LineCommand = ENABLE;
 8003924:	7126      	strb	r6, [r4, #4]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8003926:	71a3      	strb	r3, [r4, #6]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8003928:	7165      	strb	r5, [r4, #5]
  LL_EXTI_Init(&EXTI_InitStruct);
 800392a:	f7fe fb69 	bl	8002000 <LL_EXTI_Init>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800392e:	22c1      	movs	r2, #193	; 0xc1
 8003930:	4b95      	ldr	r3, [pc, #596]	; (8003b88 <main+0x39c>)
 8003932:	0092      	lsls	r2, r2, #2
 8003934:	5899      	ldr	r1, [r3, r2]
 8003936:	4895      	ldr	r0, [pc, #596]	; (8003b8c <main+0x3a0>)
 8003938:	4001      	ands	r1, r0
 800393a:	5099      	str	r1, [r3, r2]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800393c:	2120      	movs	r1, #32
 800393e:	6019      	str	r1, [r3, #0]
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003940:	5899      	ldr	r1, [r3, r2]
 8003942:	4893      	ldr	r0, [pc, #588]	; (8003b90 <main+0x3a4>)
 8003944:	4001      	ands	r1, r0
 8003946:	5099      	str	r1, [r3, r2]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8003948:	4642      	mov	r2, r8
 800394a:	601a      	str	r2, [r3, #0]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800394c:	697b      	ldr	r3, [r7, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800394e:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003950:	4333      	orrs	r3, r6
 8003952:	617b      	str	r3, [r7, #20]
 8003954:	697b      	ldr	r3, [r7, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8003956:	2101      	movs	r1, #1
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003958:	401e      	ands	r6, r3
 800395a:	9602      	str	r6, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800395c:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 800395e:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8003960:	f7fc ffaa 	bl	80008b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003964:	2009      	movs	r0, #9
 8003966:	f7fc ffdb 	bl	8000920 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 1, 0);
 800396a:	2200      	movs	r2, #0
 800396c:	2101      	movs	r1, #1
 800396e:	200b      	movs	r0, #11
 8003970:	f7fc ffa2 	bl	80008b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8003974:	200b      	movs	r0, #11
 8003976:	f7fc ffd3 	bl	8000920 <HAL_NVIC_EnableIRQ>
  htim1.Instance = TIM1;
 800397a:	4b86      	ldr	r3, [pc, #536]	; (8003b94 <main+0x3a8>)
 800397c:	4698      	mov	r8, r3
 800397e:	4642      	mov	r2, r8
 8003980:	4b85      	ldr	r3, [pc, #532]	; (8003b98 <main+0x3ac>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003982:	4640      	mov	r0, r8
  htim1.Instance = TIM1;
 8003984:	6013      	str	r3, [r2, #0]
  htim1.Init.Period = 999;
 8003986:	4b85      	ldr	r3, [pc, #532]	; (8003b9c <main+0x3b0>)
  htim1.Init.Prescaler = 0;
 8003988:	6055      	str	r5, [r2, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800398a:	6095      	str	r5, [r2, #8]
  htim1.Init.Period = 999;
 800398c:	60d3      	str	r3, [r2, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800398e:	6115      	str	r5, [r2, #16]
  htim1.Init.RepetitionCounter = 0;
 8003990:	6155      	str	r5, [r2, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003992:	6195      	str	r5, [r2, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003994:	f7fd fcea 	bl	800136c <HAL_TIM_Base_Init>
 8003998:	2800      	cmp	r0, #0
 800399a:	d000      	beq.n	800399e <main+0x1b2>
 800399c:	e7fe      	b.n	800399c <main+0x1b0>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800399e:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80039a0:	a908      	add	r1, sp, #32
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039a2:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80039a4:	4640      	mov	r0, r8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039a6:	9308      	str	r3, [sp, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80039a8:	f7fe f914 	bl	8001bd4 <HAL_TIM_ConfigClockSource>
 80039ac:	2800      	cmp	r0, #0
 80039ae:	d000      	beq.n	80039b2 <main+0x1c6>
 80039b0:	e7fe      	b.n	80039b0 <main+0x1c4>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80039b2:	4640      	mov	r0, r8
 80039b4:	f7fd fd96 	bl	80014e4 <HAL_TIM_PWM_Init>
 80039b8:	2800      	cmp	r0, #0
 80039ba:	d000      	beq.n	80039be <main+0x1d2>
 80039bc:	e7fe      	b.n	80039bc <main+0x1d0>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039be:	9006      	str	r0, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039c0:	9007      	str	r0, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80039c2:	a906      	add	r1, sp, #24
 80039c4:	4640      	mov	r0, r8
 80039c6:	f7fe fabb 	bl	8001f40 <HAL_TIMEx_MasterConfigSynchronization>
 80039ca:	2800      	cmp	r0, #0
 80039cc:	d000      	beq.n	80039d0 <main+0x1e4>
 80039ce:	e7fe      	b.n	80039ce <main+0x1e2>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039d0:	2360      	movs	r3, #96	; 0x60
  sConfigOC.Pulse = 0;
 80039d2:	6060      	str	r0, [r4, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039d4:	60a0      	str	r0, [r4, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80039d6:	60e0      	str	r0, [r4, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039d8:	6120      	str	r0, [r4, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80039da:	6160      	str	r0, [r4, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80039dc:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039de:	2200      	movs	r2, #0
 80039e0:	0021      	movs	r1, r4
 80039e2:	4640      	mov	r0, r8
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039e4:	6023      	str	r3, [r4, #0]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039e6:	f7fd ffcf 	bl	8001988 <HAL_TIM_PWM_ConfigChannel>
 80039ea:	2800      	cmp	r0, #0
 80039ec:	d000      	beq.n	80039f0 <main+0x204>
 80039ee:	e7fe      	b.n	80039ee <main+0x202>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80039f0:	2204      	movs	r2, #4
 80039f2:	0021      	movs	r1, r4
 80039f4:	4640      	mov	r0, r8
 80039f6:	f7fd ffc7 	bl	8001988 <HAL_TIM_PWM_ConfigChannel>
 80039fa:	2800      	cmp	r0, #0
 80039fc:	d000      	beq.n	8003a00 <main+0x214>
 80039fe:	e7fe      	b.n	80039fe <main+0x212>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a00:	2208      	movs	r2, #8
 8003a02:	0021      	movs	r1, r4
 8003a04:	4640      	mov	r0, r8
 8003a06:	f7fd ffbf 	bl	8001988 <HAL_TIM_PWM_ConfigChannel>
 8003a0a:	2800      	cmp	r0, #0
 8003a0c:	d000      	beq.n	8003a10 <main+0x224>
 8003a0e:	e7fe      	b.n	8003a0e <main+0x222>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003a10:	220c      	movs	r2, #12
 8003a12:	0021      	movs	r1, r4
 8003a14:	4640      	mov	r0, r8
 8003a16:	f7fd ffb7 	bl	8001988 <HAL_TIM_PWM_ConfigChannel>
 8003a1a:	2800      	cmp	r0, #0
 8003a1c:	d000      	beq.n	8003a20 <main+0x234>
 8003a1e:	e7fe      	b.n	8003a1e <main+0x232>
  sBreakDeadTimeConfig.DeadTime = 40;
 8003a20:	2328      	movs	r3, #40	; 0x28
 8003a22:	9316      	str	r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a24:	2380      	movs	r3, #128	; 0x80
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a26:	9013      	str	r0, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003a28:	9014      	str	r0, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003a2a:	9015      	str	r0, [sp, #84]	; 0x54
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003a2c:	9017      	str	r0, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a2e:	019b      	lsls	r3, r3, #6
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a30:	9019      	str	r0, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003a32:	a913      	add	r1, sp, #76	; 0x4c
 8003a34:	4640      	mov	r0, r8
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003a36:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003a38:	f7fe faa2 	bl	8001f80 <HAL_TIMEx_ConfigBreakDeadTime>
 8003a3c:	1e06      	subs	r6, r0, #0
 8003a3e:	d000      	beq.n	8003a42 <main+0x256>
 8003a40:	e7fe      	b.n	8003a40 <main+0x254>
  HAL_TIM_MspPostInit(&htim1);
 8003a42:	4640      	mov	r0, r8
 8003a44:	f000 fc8a 	bl	800435c <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8003a48:	2380      	movs	r3, #128	; 0x80
 8003a4a:	4d55      	ldr	r5, [pc, #340]	; (8003ba0 <main+0x3b4>)
 8003a4c:	05db      	lsls	r3, r3, #23
 8003a4e:	602b      	str	r3, [r5, #0]
  htim2.Init.Period = 65535;
 8003a50:	4b54      	ldr	r3, [pc, #336]	; (8003ba4 <main+0x3b8>)
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003a52:	0028      	movs	r0, r5
  htim2.Init.Prescaler = 0;
 8003a54:	606e      	str	r6, [r5, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a56:	60ae      	str	r6, [r5, #8]
  htim2.Init.Period = 65535;
 8003a58:	60eb      	str	r3, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a5a:	612e      	str	r6, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a5c:	61ae      	str	r6, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003a5e:	f7fd fc85 	bl	800136c <HAL_TIM_Base_Init>
 8003a62:	2800      	cmp	r0, #0
 8003a64:	d000      	beq.n	8003a68 <main+0x27c>
 8003a66:	e7fe      	b.n	8003a66 <main+0x27a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a68:	2780      	movs	r7, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a6a:	0021      	movs	r1, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a6c:	017f      	lsls	r7, r7, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a6e:	0028      	movs	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a70:	970c      	str	r7, [sp, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003a72:	f7fe f8af 	bl	8001bd4 <HAL_TIM_ConfigClockSource>
 8003a76:	2800      	cmp	r0, #0
 8003a78:	d000      	beq.n	8003a7c <main+0x290>
 8003a7a:	e7fe      	b.n	8003a7a <main+0x28e>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003a7c:	0028      	movs	r0, r5
 8003a7e:	f7fd fdc7 	bl	8001610 <HAL_TIM_IC_Init>
 8003a82:	2800      	cmp	r0, #0
 8003a84:	d000      	beq.n	8003a88 <main+0x29c>
 8003a86:	e7fe      	b.n	8003a86 <main+0x29a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a88:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a8a:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003a8c:	a908      	add	r1, sp, #32
 8003a8e:	0028      	movs	r0, r5
 8003a90:	f7fe fa56 	bl	8001f40 <HAL_TIMEx_MasterConfigSynchronization>
 8003a94:	2800      	cmp	r0, #0
 8003a96:	d000      	beq.n	8003a9a <main+0x2ae>
 8003a98:	e7fe      	b.n	8003a98 <main+0x2ac>
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003a9a:	230a      	movs	r3, #10
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003a9c:	9015      	str	r0, [sp, #84]	; 0x54
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8003a9e:	469a      	mov	sl, r3
 8003aa0:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigIC.ICFilter = 0;
 8003aa2:	9016      	str	r0, [sp, #88]	; 0x58
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003aa4:	3b09      	subs	r3, #9
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8003aa6:	220c      	movs	r2, #12
 8003aa8:	a913      	add	r1, sp, #76	; 0x4c
 8003aaa:	0028      	movs	r0, r5
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003aac:	4699      	mov	r9, r3
 8003aae:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8003ab0:	f7fd fe92 	bl	80017d8 <HAL_TIM_IC_ConfigChannel>
 8003ab4:	2800      	cmp	r0, #0
 8003ab6:	d000      	beq.n	8003aba <main+0x2ce>
 8003ab8:	e7fe      	b.n	8003ab8 <main+0x2cc>
  htim3.Instance = TIM3;
 8003aba:	4e3b      	ldr	r6, [pc, #236]	; (8003ba8 <main+0x3bc>)
 8003abc:	4b3b      	ldr	r3, [pc, #236]	; (8003bac <main+0x3c0>)
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003abe:	60b0      	str	r0, [r6, #8]
  htim3.Instance = TIM3;
 8003ac0:	6033      	str	r3, [r6, #0]
  htim3.Init.Prescaler = 10;
 8003ac2:	4653      	mov	r3, sl
 8003ac4:	6073      	str	r3, [r6, #4]
  htim3.Init.Period = 65535;
 8003ac6:	4b37      	ldr	r3, [pc, #220]	; (8003ba4 <main+0x3b8>)
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ac8:	6130      	str	r0, [r6, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003aca:	61b0      	str	r0, [r6, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003acc:	0030      	movs	r0, r6
  htim3.Init.Period = 65535;
 8003ace:	60f3      	str	r3, [r6, #12]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003ad0:	f7fd fc4c 	bl	800136c <HAL_TIM_Base_Init>
 8003ad4:	2800      	cmp	r0, #0
 8003ad6:	d000      	beq.n	8003ada <main+0x2ee>
 8003ad8:	e7fe      	b.n	8003ad8 <main+0x2ec>
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003ada:	a913      	add	r1, sp, #76	; 0x4c
 8003adc:	0030      	movs	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ade:	9713      	str	r7, [sp, #76]	; 0x4c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003ae0:	f7fe f878 	bl	8001bd4 <HAL_TIM_ConfigClockSource>
 8003ae4:	2800      	cmp	r0, #0
 8003ae6:	d000      	beq.n	8003aea <main+0x2fe>
 8003ae8:	e7fe      	b.n	8003ae8 <main+0x2fc>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003aea:	6020      	str	r0, [r4, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aec:	6060      	str	r0, [r4, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003aee:	0021      	movs	r1, r4
 8003af0:	0030      	movs	r0, r6
 8003af2:	f7fe fa25 	bl	8001f40 <HAL_TIMEx_MasterConfigSynchronization>
 8003af6:	2800      	cmp	r0, #0
 8003af8:	d000      	beq.n	8003afc <main+0x310>
 8003afa:	e7fe      	b.n	8003afa <main+0x30e>
	hiwdg.Instance = IWDG;
 8003afc:	4a2c      	ldr	r2, [pc, #176]	; (8003bb0 <main+0x3c4>)
 8003afe:	4b2d      	ldr	r3, [pc, #180]	; (8003bb4 <main+0x3c8>)
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003b00:	0010      	movs	r0, r2
	hiwdg.Instance = IWDG;
 8003b02:	6013      	str	r3, [r2, #0]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 8003b04:	2302      	movs	r3, #2
 8003b06:	6053      	str	r3, [r2, #4]
	hiwdg.Init.Window = IWDG_WINDOW_DISABLE;
 8003b08:	4b2b      	ldr	r3, [pc, #172]	; (8003bb8 <main+0x3cc>)
 8003b0a:	60d3      	str	r3, [r2, #12]
	hiwdg.Init.Reload = 2000;
 8003b0c:	23fa      	movs	r3, #250	; 0xfa
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	6093      	str	r3, [r2, #8]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003b12:	f7fd f8e5 	bl	8000ce0 <HAL_IWDG_Init>
 8003b16:	2800      	cmp	r0, #0
 8003b18:	d000      	beq.n	8003b1c <main+0x330>
 8003b1a:	e7fe      	b.n	8003b1a <main+0x32e>
  htim14.Instance = TIM14;
 8003b1c:	4f27      	ldr	r7, [pc, #156]	; (8003bbc <main+0x3d0>)
 8003b1e:	4b28      	ldr	r3, [pc, #160]	; (8003bc0 <main+0x3d4>)
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b20:	60b8      	str	r0, [r7, #8]
  htim14.Instance = TIM14;
 8003b22:	603b      	str	r3, [r7, #0]
  htim14.Init.Prescaler = 10;
 8003b24:	4653      	mov	r3, sl
 8003b26:	607b      	str	r3, [r7, #4]
  htim14.Init.Period = 50000;
 8003b28:	4b26      	ldr	r3, [pc, #152]	; (8003bc4 <main+0x3d8>)
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b2a:	6138      	str	r0, [r7, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b2c:	61b8      	str	r0, [r7, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003b2e:	0038      	movs	r0, r7
  htim14.Init.Period = 50000;
 8003b30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003b32:	f7fd fc1b 	bl	800136c <HAL_TIM_Base_Init>
 8003b36:	2800      	cmp	r0, #0
 8003b38:	d000      	beq.n	8003b3c <main+0x350>
 8003b3a:	e7fe      	b.n	8003b3a <main+0x34e>
  hadc.Instance = ADC1;
 8003b3c:	4c22      	ldr	r4, [pc, #136]	; (8003bc8 <main+0x3dc>)
 8003b3e:	4b23      	ldr	r3, [pc, #140]	; (8003bcc <main+0x3e0>)
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003b40:	6060      	str	r0, [r4, #4]
  hadc.Instance = ADC1;
 8003b42:	6023      	str	r3, [r4, #0]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003b44:	464b      	mov	r3, r9
 8003b46:	6123      	str	r3, [r4, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003b48:	2308      	movs	r3, #8
 8003b4a:	6163      	str	r3, [r4, #20]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8003b4c:	464b      	mov	r3, r9
 8003b4e:	6263      	str	r3, [r4, #36]	; 0x24
  hadc.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC4;
 8003b50:	2340      	movs	r3, #64	; 0x40
 8003b52:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8003b54:	2380      	movs	r3, #128	; 0x80
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = ENABLE;
 8003b5a:	464b      	mov	r3, r9
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003b5c:	60a0      	str	r0, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b5e:	60e0      	str	r0, [r4, #12]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8003b60:	61a0      	str	r0, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003b62:	61e0      	str	r0, [r4, #28]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003b64:	6220      	str	r0, [r4, #32]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003b66:	0020      	movs	r0, r4
  hadc.Init.DMAContinuousRequests = ENABLE;
 8003b68:	6323      	str	r3, [r4, #48]	; 0x30
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003b6a:	6363      	str	r3, [r4, #52]	; 0x34
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003b6c:	f7fc fcd8 	bl	8000520 <HAL_ADC_Init>
 8003b70:	2800      	cmp	r0, #0
 8003b72:	d02d      	beq.n	8003bd0 <main+0x3e4>
 8003b74:	e7fe      	b.n	8003b74 <main+0x388>
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	48001400 	.word	0x48001400
 8003b80:	40010000 	.word	0x40010000
 8003b84:	fffff0ff 	.word	0xfffff0ff
 8003b88:	e000e100 	.word	0xe000e100
 8003b8c:	ffff00ff 	.word	0xffff00ff
 8003b90:	ff00ffff 	.word	0xff00ffff
 8003b94:	200002a4 	.word	0x200002a4
 8003b98:	40012c00 	.word	0x40012c00
 8003b9c:	000003e7 	.word	0x000003e7
 8003ba0:	200004c8 	.word	0x200004c8
 8003ba4:	0000ffff 	.word	0x0000ffff
 8003ba8:	20000144 	.word	0x20000144
 8003bac:	40000400 	.word	0x40000400
 8003bb0:	20000124 	.word	0x20000124
 8003bb4:	40003000 	.word	0x40003000
 8003bb8:	00000fff 	.word	0x00000fff
 8003bbc:	20000508 	.word	0x20000508
 8003bc0:	40002000 	.word	0x40002000
 8003bc4:	0000c350 	.word	0x0000c350
 8003bc8:	20000594 	.word	0x20000594
 8003bcc:	40012400 	.word	0x40012400
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8003bd0:	2310      	movs	r3, #16
 8003bd2:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003bd4:	2380      	movs	r3, #128	; 0x80
 8003bd6:	015b      	lsls	r3, r3, #5
 8003bd8:	9314      	str	r3, [sp, #80]	; 0x50
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003bda:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003bdc:	a913      	add	r1, sp, #76	; 0x4c
 8003bde:	0020      	movs	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8003be0:	9315      	str	r3, [sp, #84]	; 0x54
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003be2:	f7fc fddf 	bl	80007a4 <HAL_ADC_ConfigChannel>
 8003be6:	2800      	cmp	r0, #0
 8003be8:	d000      	beq.n	8003bec <main+0x400>
 8003bea:	e7fe      	b.n	8003bea <main+0x3fe>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003bec:	2100      	movs	r1, #0
 8003bee:	4640      	mov	r0, r8
 8003bf0:	f7fd fce8 	bl	80015c4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);             // uncomment for comp_pwm
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	4640      	mov	r0, r8
 8003bf8:	f7fe f98e 	bl	8001f18 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8003bfc:	2104      	movs	r1, #4
 8003bfe:	4640      	mov	r0, r8
 8003c00:	f7fd fce0 	bl	80015c4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8003c04:	2104      	movs	r1, #4
 8003c06:	4640      	mov	r0, r8
 8003c08:	f7fe f986 	bl	8001f18 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8003c0c:	2108      	movs	r1, #8
 8003c0e:	4640      	mov	r0, r8
 8003c10:	f7fd fcd8 	bl	80015c4 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8003c14:	2108      	movs	r1, #8
 8003c16:	4640      	mov	r0, r8
 8003c18:	f7fe f97e 	bl	8001f18 <HAL_TIMEx_PWMN_Start>
  HAL_Delay(10);
 8003c1c:	200a      	movs	r0, #10
 8003c1e:	f7fc fc19 	bl	8000454 <HAL_Delay>
	if (HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8003c22:	210c      	movs	r1, #12
 8003c24:	4640      	mov	r0, r8
 8003c26:	f7fd fc1d 	bl	8001464 <HAL_TIM_OC_Start_IT>
 8003c2a:	2800      	cmp	r0, #0
 8003c2c:	d000      	beq.n	8003c30 <main+0x444>
 8003c2e:	e7fe      	b.n	8003c2e <main+0x442>
	if (HAL_ADC_Start_DMA(&hadc, (uint32_t*)ADC1ConvertedValues, 1) != HAL_OK){
 8003c30:	0020      	movs	r0, r4
 8003c32:	2201      	movs	r2, #1
 8003c34:	49d1      	ldr	r1, [pc, #836]	; (8003f7c <main+0x790>)
 8003c36:	f7fc fd1b 	bl	8000670 <HAL_ADC_Start_DMA>
 8003c3a:	1e04      	subs	r4, r0, #0
 8003c3c:	d000      	beq.n	8003c40 <main+0x454>
 8003c3e:	e7fe      	b.n	8003c3e <main+0x452>
	  temp110cal = *TEMP110_CAL_VALUE;
 8003c40:	4bcf      	ldr	r3, [pc, #828]	; (8003f80 <main+0x794>)
 8003c42:	4ad0      	ldr	r2, [pc, #832]	; (8003f84 <main+0x798>)
 8003c44:	881b      	ldrh	r3, [r3, #0]
  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_4, dma_buffer , 64);
 8003c46:	210c      	movs	r1, #12
	  temp110cal = *TEMP110_CAL_VALUE;
 8003c48:	6013      	str	r3, [r2, #0]
	  temp30cal = *TEMP30_CAL_VALUE;
 8003c4a:	4bcf      	ldr	r3, [pc, #828]	; (8003f88 <main+0x79c>)
 8003c4c:	4acf      	ldr	r2, [pc, #828]	; (8003f8c <main+0x7a0>)
 8003c4e:	881b      	ldrh	r3, [r3, #0]
  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_4, dma_buffer , 64);
 8003c50:	0028      	movs	r0, r5
	  temp30cal = *TEMP30_CAL_VALUE;
 8003c52:	6013      	str	r3, [r2, #0]
  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_4, dma_buffer , 64);
 8003c54:	2340      	movs	r3, #64	; 0x40
 8003c56:	4ace      	ldr	r2, [pc, #824]	; (8003f90 <main+0x7a4>)
 8003c58:	f7fd fd4a 	bl	80016f0 <HAL_TIM_IC_Start_DMA>
  TIM1->CCR4 = 800;
 8003c5c:	22c8      	movs	r2, #200	; 0xc8
 8003c5e:	4bcd      	ldr	r3, [pc, #820]	; (8003f94 <main+0x7a8>)
 8003c60:	0092      	lsls	r2, r2, #2
 8003c62:	641a      	str	r2, [r3, #64]	; 0x40
 8003c64:	4bcc      	ldr	r3, [pc, #816]	; (8003f98 <main+0x7ac>)
 8003c66:	2203      	movs	r2, #3
 8003c68:	4698      	mov	r8, r3
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	2501      	movs	r5, #1
 8003c6e:	4393      	bics	r3, r2
 8003c70:	4642      	mov	r2, r8
 8003c72:	432b      	orrs	r3, r5
 8003c74:	6013      	str	r3, [r2, #0]
  HAL_TIM_Base_Start(&htim14);
 8003c76:	0038      	movs	r0, r7
 8003c78:	f7fd fbe8 	bl	800144c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8003c7c:	0030      	movs	r0, r6
 8003c7e:	f7fd fbe5 	bl	800144c <HAL_TIM_Base_Start>
	EXTI->IMR &= (0 << 1);
 8003c82:	4bc6      	ldr	r3, [pc, #792]	; (8003f9c <main+0x7b0>)
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	601c      	str	r4, [r3, #0]
	EXTI->IMR &= (0 << 2);
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	601c      	str	r4, [r3, #0]
	EXTI->IMR &= (0 << 0);
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	601c      	str	r4, [r3, #0]
  GPIOF->BSRR = GPIO_PIN_6;            // uncomment to take bridge out of standby mode and set oc level
 8003c90:	4642      	mov	r2, r8
 8003c92:	2340      	movs	r3, #64	; 0x40
 8003c94:	6193      	str	r3, [r2, #24]
  GPIOF->BRR = GPIO_PIN_7;				// out of standby mode
 8003c96:	3340      	adds	r3, #64	; 0x40
 8003c98:	6293      	str	r3, [r2, #40]	; 0x28
  GPIOA->BSRR = GPIO_PIN_11;  // set overcurrent protection on.
 8003c9a:	2280      	movs	r2, #128	; 0x80
 8003c9c:	2390      	movs	r3, #144	; 0x90
 8003c9e:	0112      	lsls	r2, r2, #4
 8003ca0:	05db      	lsls	r3, r3, #23
 8003ca2:	619a      	str	r2, [r3, #24]
  phase_B_position = 119;
 8003ca4:	2277      	movs	r2, #119	; 0x77
  phase_A_position = 0;
 8003ca6:	4bbe      	ldr	r3, [pc, #760]	; (8003fa0 <main+0x7b4>)
 8003ca8:	601c      	str	r4, [r3, #0]
  phase_B_position = 119;
 8003caa:	4bbe      	ldr	r3, [pc, #760]	; (8003fa4 <main+0x7b8>)
 8003cac:	601a      	str	r2, [r3, #0]
  phase_C_position = 239;
 8003cae:	4bbe      	ldr	r3, [pc, #760]	; (8003fa8 <main+0x7bc>)
 8003cb0:	3278      	adds	r2, #120	; 0x78
 8003cb2:	601a      	str	r2, [r3, #0]
  playStartupTune();
 8003cb4:	f7ff f832 	bl	8002d1c <playStartupTune>
  running = 0;
 8003cb8:	4bbc      	ldr	r3, [pc, #752]	; (8003fac <main+0x7c0>)
	if(HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003cba:	48bd      	ldr	r0, [pc, #756]	; (8003fb0 <main+0x7c4>)
  running = 0;
 8003cbc:	601c      	str	r4, [r3, #0]
 8003cbe:	4699      	mov	r9, r3
  duty_cycle = 1;
 8003cc0:	4bbc      	ldr	r3, [pc, #752]	; (8003fb4 <main+0x7c8>)
 8003cc2:	4698      	mov	r8, r3
 8003cc4:	601d      	str	r5, [r3, #0]
	if(HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003cc6:	f7fd f80b 	bl	8000ce0 <HAL_IWDG_Init>
 8003cca:	2800      	cmp	r0, #0
 8003ccc:	d000      	beq.n	8003cd0 <main+0x4e4>
 8003cce:	e7fe      	b.n	8003cce <main+0x4e2>
	allpwm();
 8003cd0:	f7fe fb58 	bl	8002384 <allpwm>
	filter_level=5;
 8003cd4:	2305      	movs	r3, #5
 8003cd6:	4ab8      	ldr	r2, [pc, #736]	; (8003fb8 <main+0x7cc>)
	  stuckcounter = 0;
 8003cd8:	2600      	movs	r6, #0
	filter_level=5;
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	4bb7      	ldr	r3, [pc, #732]	; (8003fbc <main+0x7d0>)
 8003cde:	4fb8      	ldr	r7, [pc, #736]	; (8003fc0 <main+0x7d4>)
 8003ce0:	469a      	mov	sl, r3
 8003ce2:	4bb8      	ldr	r3, [pc, #736]	; (8003fc4 <main+0x7d8>)
 8003ce4:	4db8      	ldr	r5, [pc, #736]	; (8003fc8 <main+0x7dc>)
 8003ce6:	469b      	mov	fp, r3
	  count++;
 8003ce8:	4bb8      	ldr	r3, [pc, #736]	; (8003fcc <main+0x7e0>)
 8003cea:	4ab8      	ldr	r2, [pc, #736]	; (8003fcc <main+0x7e0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	6013      	str	r3, [r2, #0]
	  stuckcounter = 0;
 8003cf4:	4ab6      	ldr	r2, [pc, #728]	; (8003fd0 <main+0x7e4>)
 8003cf6:	6016      	str	r6, [r2, #0]
	  if (count  > 200){
 8003cf8:	2bc8      	cmp	r3, #200	; 0xc8
 8003cfa:	dd07      	ble.n	8003d0c <main+0x520>
	 	  if(HAL_IWDG_Refresh(&hiwdg) != HAL_OK)                   // watchdog refresh
 8003cfc:	48ac      	ldr	r0, [pc, #688]	; (8003fb0 <main+0x7c4>)
 8003cfe:	f7fd f81d 	bl	8000d3c <HAL_IWDG_Refresh>
 8003d02:	2800      	cmp	r0, #0
 8003d04:	d000      	beq.n	8003d08 <main+0x51c>
 8003d06:	e1fc      	b.n	8004102 <main+0x916>
	 	  count = 0;
 8003d08:	4bb0      	ldr	r3, [pc, #704]	; (8003fcc <main+0x7e0>)
 8003d0a:	6018      	str	r0, [r3, #0]
	  if (inputSet == 0){
 8003d0c:	4bb1      	ldr	r3, [pc, #708]	; (8003fd4 <main+0x7e8>)
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <main+0x52c>
	 	 detectInput();
 8003d14:	f7fe fbf2 	bl	80024fc <detectInput>
		  if (zero_input_count > 1000 && !armed){
 8003d18:	4baf      	ldr	r3, [pc, #700]	; (8003fd8 <main+0x7ec>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	001a      	movs	r2, r3
 8003d20:	23fa      	movs	r3, #250	; 0xfa
 8003d22:	009b      	lsls	r3, r3, #2
 8003d24:	429a      	cmp	r2, r3
 8003d26:	dd08      	ble.n	8003d3a <main+0x54e>
 8003d28:	4bac      	ldr	r3, [pc, #688]	; (8003fdc <main+0x7f0>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d104      	bne.n	8003d3a <main+0x54e>
			  armed = 1;
 8003d30:	4aaa      	ldr	r2, [pc, #680]	; (8003fdc <main+0x7f0>)
 8003d32:	3301      	adds	r3, #1
 8003d34:	7013      	strb	r3, [r2, #0]
			  playInputTune();
 8003d36:	f7ff f901 	bl	8002f3c <playInputTune>
		  if (bi_direction == 1 && proshot == 0){
 8003d3a:	4ba9      	ldr	r3, [pc, #676]	; (8003fe0 <main+0x7f4>)
 8003d3c:	781a      	ldrb	r2, [r3, #0]
 8003d3e:	4ba9      	ldr	r3, [pc, #676]	; (8003fe4 <main+0x7f8>)
 8003d40:	2a01      	cmp	r2, #1
 8003d42:	d100      	bne.n	8003d46 <main+0x55a>
 8003d44:	e19f      	b.n	8004086 <main+0x89a>
		}else if((proshot || dshot)&& bi_direction){
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d104      	bne.n	8003d56 <main+0x56a>
 8003d4c:	4ba6      	ldr	r3, [pc, #664]	; (8003fe8 <main+0x7fc>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d100      	bne.n	8003d56 <main+0x56a>
 8003d54:	e1d6      	b.n	8004104 <main+0x918>
 8003d56:	2a00      	cmp	r2, #0
 8003d58:	d100      	bne.n	8003d5c <main+0x570>
 8003d5a:	e1d3      	b.n	8004104 <main+0x918>
	  					if ( newinput > 1100 ){
 8003d5c:	4ba3      	ldr	r3, [pc, #652]	; (8003fec <main+0x800>)
 8003d5e:	4aa4      	ldr	r2, [pc, #656]	; (8003ff0 <main+0x804>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4293      	cmp	r3, r2
 8003d64:	dc00      	bgt.n	8003d68 <main+0x57c>
 8003d66:	e180      	b.n	800406a <main+0x87e>
	  					  if (!forward){
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	2a00      	cmp	r2, #0
 8003d6c:	d101      	bne.n	8003d72 <main+0x586>
	  						forward = 1 ;
 8003d6e:	3201      	adds	r2, #1
 8003d70:	603a      	str	r2, [r7, #0]
	  						input = (newinput - 1100) * 2 ;
 8003d72:	4651      	mov	r1, sl
 8003d74:	4a9f      	ldr	r2, [pc, #636]	; (8003ff4 <main+0x808>)
 8003d76:	189a      	adds	r2, r3, r2
 8003d78:	0052      	lsls	r2, r2, #1
 8003d7a:	600a      	str	r2, [r1, #0]
	  					if ((newinput > 1047 && newinput < 1100) || newinput < 100){
 8003d7c:	4a9e      	ldr	r2, [pc, #632]	; (8003ff8 <main+0x80c>)
 8003d7e:	189a      	adds	r2, r3, r2
 8003d80:	2a33      	cmp	r2, #51	; 0x33
 8003d82:	d800      	bhi.n	8003d86 <main+0x59a>
 8003d84:	e19e      	b.n	80040c4 <main+0x8d8>
 8003d86:	2b63      	cmp	r3, #99	; 0x63
 8003d88:	dc00      	bgt.n	8003d8c <main+0x5a0>
 8003d8a:	e19b      	b.n	80040c4 <main+0x8d8>
 8003d8c:	4653      	mov	r3, sl
 8003d8e:	681b      	ldr	r3, [r3, #0]
	  if (input >= 130 && armed){
 8003d90:	2b81      	cmp	r3, #129	; 0x81
 8003d92:	dc00      	bgt.n	8003d96 <main+0x5aa>
 8003d94:	e198      	b.n	80040c8 <main+0x8dc>
 8003d96:	4a91      	ldr	r2, [pc, #580]	; (8003fdc <main+0x7f0>)
 8003d98:	7812      	ldrb	r2, [r2, #0]
 8003d9a:	2a00      	cmp	r2, #0
 8003d9c:	d010      	beq.n	8003dc0 <main+0x5d4>
		  if (running == 0){
 8003d9e:	464a      	mov	r2, r9
 8003da0:	6812      	ldr	r2, [r2, #0]
 8003da2:	2a00      	cmp	r2, #0
 8003da4:	d102      	bne.n	8003dac <main+0x5c0>
			  running = 1;
 8003da6:	4649      	mov	r1, r9
 8003da8:	3201      	adds	r2, #1
 8003daa:	600a      	str	r2, [r1, #0]
		  coasting = 0;
 8003dac:	4a93      	ldr	r2, [pc, #588]	; (8003ffc <main+0x810>)
	 	 duty_cycle = input / 2 - 30 - duty_cycle_limit;
 8003dae:	105b      	asrs	r3, r3, #1
		  coasting = 0;
 8003db0:	7016      	strb	r6, [r2, #0]
	 	 duty_cycle = input / 2 - 30 - duty_cycle_limit;
 8003db2:	4a93      	ldr	r2, [pc, #588]	; (8004000 <main+0x814>)
 8003db4:	3b1e      	subs	r3, #30
 8003db6:	6812      	ldr	r2, [r2, #0]
 8003db8:	1a9b      	subs	r3, r3, r2
 8003dba:	9200      	str	r2, [sp, #0]
 8003dbc:	4642      	mov	r2, r8
 8003dbe:	6013      	str	r3, [r2, #0]
   if (zero_crosses < 100 && running){
 8003dc0:	682b      	ldr	r3, [r5, #0]
 8003dc2:	2b63      	cmp	r3, #99	; 0x63
 8003dc4:	dd00      	ble.n	8003dc8 <main+0x5dc>
 8003dc6:	e18f      	b.n	80040e8 <main+0x8fc>
 8003dc8:	464b      	mov	r3, r9
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d100      	bne.n	8003dd2 <main+0x5e6>
 8003dd0:	e0c1      	b.n	8003f56 <main+0x76a>
	   if (duty_cycle < min_startup_duty){
 8003dd2:	4643      	mov	r3, r8
 8003dd4:	681c      	ldr	r4, [r3, #0]
 8003dd6:	4b8b      	ldr	r3, [pc, #556]	; (8004004 <main+0x818>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	429c      	cmp	r4, r3
 8003ddc:	da02      	bge.n	8003de4 <main+0x5f8>
	   duty_cycle = min_startup_duty;
 8003dde:	4642      	mov	r2, r8
 8003de0:	001c      	movs	r4, r3
 8003de2:	6013      	str	r3, [r2, #0]
	   if (duty_cycle > 250){
 8003de4:	2cfa      	cmp	r4, #250	; 0xfa
 8003de6:	dc00      	bgt.n	8003dea <main+0x5fe>
 8003de8:	e094      	b.n	8003f14 <main+0x728>
		   duty_cycle = 250;
 8003dea:	23fa      	movs	r3, #250	; 0xfa
 8003dec:	4642      	mov	r2, r8
 8003dee:	6013      	str	r3, [r2, #0]
   if(commutation_interval > 20000 && running){
 8003df0:	4b85      	ldr	r3, [pc, #532]	; (8004008 <main+0x81c>)
 8003df2:	24fa      	movs	r4, #250	; 0xfa
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	001a      	movs	r2, r3
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	4b84      	ldr	r3, [pc, #528]	; (800400c <main+0x820>)
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d900      	bls.n	8003e02 <main+0x616>
 8003e00:	e08f      	b.n	8003f22 <main+0x736>
	 temp_degrees = ( ( (110 - 30)*(smoothedinput - temp30cal) ) / (temp110cal - temp30cal)) + 30;
 8003e02:	4b62      	ldr	r3, [pc, #392]	; (8003f8c <main+0x7a0>)
 8003e04:	6819      	ldr	r1, [r3, #0]
 8003e06:	4b82      	ldr	r3, [pc, #520]	; (8004010 <main+0x824>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	1a5b      	subs	r3, r3, r1
 8003e0c:	0098      	lsls	r0, r3, #2
 8003e0e:	18c0      	adds	r0, r0, r3
 8003e10:	4b5c      	ldr	r3, [pc, #368]	; (8003f84 <main+0x798>)
 8003e12:	0100      	lsls	r0, r0, #4
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	1a59      	subs	r1, r3, r1
 8003e18:	9301      	str	r3, [sp, #4]
 8003e1a:	f7fc f9ff 	bl	800021c <__divsi3>
     k_erpm = ((100000000 / (commutation_interval * 208 * 6)) * 6)/10 ;                  // 208 ns per count note: in 1000's of erpm to change to erpm divide multiply by 1000
 8003e1e:	219c      	movs	r1, #156	; 0x9c
	 temp_degrees = ( ( (110 - 30)*(smoothedinput - temp30cal) ) / (temp110cal - temp30cal)) + 30;
 8003e20:	4b7c      	ldr	r3, [pc, #496]	; (8004014 <main+0x828>)
 8003e22:	301e      	adds	r0, #30
 8003e24:	6018      	str	r0, [r3, #0]
     k_erpm = ((100000000 / (commutation_interval * 208 * 6)) * 6)/10 ;                  // 208 ns per count note: in 1000's of erpm to change to erpm divide multiply by 1000
 8003e26:	9b00      	ldr	r3, [sp, #0]
 8003e28:	00c9      	lsls	r1, r1, #3
 8003e2a:	4359      	muls	r1, r3
 8003e2c:	487a      	ldr	r0, [pc, #488]	; (8004018 <main+0x82c>)
 8003e2e:	f7fc f9f5 	bl	800021c <__divsi3>
 8003e32:	0003      	movs	r3, r0
 8003e34:	0040      	lsls	r0, r0, #1
 8003e36:	18c0      	adds	r0, r0, r3
 8003e38:	0040      	lsls	r0, r0, #1
 8003e3a:	210a      	movs	r1, #10
 8003e3c:	f7fc f9ee 	bl	800021c <__divsi3>
 8003e40:	4b76      	ldr	r3, [pc, #472]	; (800401c <main+0x830>)
 8003e42:	6018      	str	r0, [r3, #0]
	if (armed){
 8003e44:	4b65      	ldr	r3, [pc, #404]	; (8003fdc <main+0x7f0>)
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d05e      	beq.n	8003f0a <main+0x71e>
	 	 TIM1->CCR1 = duty_cycle;												// set duty cycle to 50 out of 768 to start.
 8003e4c:	4b51      	ldr	r3, [pc, #324]	; (8003f94 <main+0x7a8>)
 8003e4e:	635c      	str	r4, [r3, #52]	; 0x34
	 	 TIM1->CCR2 = duty_cycle;
 8003e50:	639c      	str	r4, [r3, #56]	; 0x38
	 	 TIM1->CCR3 = duty_cycle;
 8003e52:	63dc      	str	r4, [r3, #60]	; 0x3c
 8003e54:	4a6c      	ldr	r2, [pc, #432]	; (8004008 <main+0x81c>)
	if (zero_crosses < 100 || commutation_interval > 10000){
 8003e56:	682b      	ldr	r3, [r5, #0]
 8003e58:	8812      	ldrh	r2, [r2, #0]
 8003e5a:	2b63      	cmp	r3, #99	; 0x63
 8003e5c:	dd02      	ble.n	8003e64 <main+0x678>
 8003e5e:	4970      	ldr	r1, [pc, #448]	; (8004020 <main+0x834>)
 8003e60:	428a      	cmp	r2, r1
 8003e62:	d905      	bls.n	8003e70 <main+0x684>
		filter_level = 8 ;
 8003e64:	2108      	movs	r1, #8
 8003e66:	4854      	ldr	r0, [pc, #336]	; (8003fb8 <main+0x7cc>)
 8003e68:	6001      	str	r1, [r0, #0]
		advancedivisor = 4;
 8003e6a:	486e      	ldr	r0, [pc, #440]	; (8004024 <main+0x838>)
 8003e6c:	3904      	subs	r1, #4
 8003e6e:	6001      	str	r1, [r0, #0]
	if (zero_crosses > 100 && zero_crosses < 300){
 8003e70:	0019      	movs	r1, r3
 8003e72:	3965      	subs	r1, #101	; 0x65
 8003e74:	29c6      	cmp	r1, #198	; 0xc6
 8003e76:	d81f      	bhi.n	8003eb8 <main+0x6cc>
			filter_level = 4;
 8003e78:	2104      	movs	r1, #4
 8003e7a:	484f      	ldr	r0, [pc, #316]	; (8003fb8 <main+0x7cc>)
 8003e7c:	6001      	str	r1, [r0, #0]
if (commutation_interval < 200){
 8003e7e:	2ac7      	cmp	r2, #199	; 0xc7
 8003e80:	d802      	bhi.n	8003e88 <main+0x69c>
	advancedivisor = 2;
 8003e82:	2202      	movs	r2, #2
 8003e84:	4967      	ldr	r1, [pc, #412]	; (8004024 <main+0x838>)
 8003e86:	600a      	str	r2, [r1, #0]
	if (duty_cycle < 200){
 8003e88:	2cc7      	cmp	r4, #199	; 0xc7
 8003e8a:	dc02      	bgt.n	8003e92 <main+0x6a6>
		filter_level = 8;
 8003e8c:	2208      	movs	r2, #8
 8003e8e:	494a      	ldr	r1, [pc, #296]	; (8003fb8 <main+0x7cc>)
 8003e90:	600a      	str	r2, [r1, #0]
if (zero_crosses < 50){
 8003e92:	2b31      	cmp	r3, #49	; 0x31
 8003e94:	dd1c      	ble.n	8003ed0 <main+0x6e4>
	 	  if (TIM3->CNT > 50000 && running == 1){
 8003e96:	4b64      	ldr	r3, [pc, #400]	; (8004028 <main+0x83c>)
 8003e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e9a:	4b64      	ldr	r3, [pc, #400]	; (800402c <main+0x840>)
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d800      	bhi.n	8003ea2 <main+0x6b6>
 8003ea0:	e722      	b.n	8003ce8 <main+0x4fc>
 8003ea2:	464b      	mov	r3, r9
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d000      	beq.n	8003eac <main+0x6c0>
 8003eaa:	e71d      	b.n	8003ce8 <main+0x4fc>
	 		 running = 0;
 8003eac:	464b      	mov	r3, r9
	 		  zero_crosses = 0;
 8003eae:	602e      	str	r6, [r5, #0]
	 		 running = 0;
 8003eb0:	601e      	str	r6, [r3, #0]
	 		  zcfoundroutine();
 8003eb2:	f7ff fc1d 	bl	80036f0 <zcfoundroutine>
 8003eb6:	e717      	b.n	8003ce8 <main+0x4fc>
	if(zero_crosses > 300 && duty_cycle > 180){
 8003eb8:	2196      	movs	r1, #150	; 0x96
 8003eba:	0049      	lsls	r1, r1, #1
 8003ebc:	428b      	cmp	r3, r1
 8003ebe:	ddde      	ble.n	8003e7e <main+0x692>
 8003ec0:	2cb4      	cmp	r4, #180	; 0xb4
 8003ec2:	dddc      	ble.n	8003e7e <main+0x692>
		filter_level = 0;
 8003ec4:	493c      	ldr	r1, [pc, #240]	; (8003fb8 <main+0x7cc>)
		advancedivisor = 3;
 8003ec6:	4857      	ldr	r0, [pc, #348]	; (8004024 <main+0x838>)
		filter_level = 0;
 8003ec8:	600e      	str	r6, [r1, #0]
		advancedivisor = 3;
 8003eca:	2103      	movs	r1, #3
 8003ecc:	6001      	str	r1, [r0, #0]
 8003ece:	e7d6      	b.n	8003e7e <main+0x692>
	 		 getBemfState();                                      // uncomment to make run !!!!!!!!!!!!!!!
 8003ed0:	f7ff f940 	bl	8003154 <getBemfState>
	 	  if (!zcfound){
 8003ed4:	4b56      	ldr	r3, [pc, #344]	; (8004030 <main+0x844>)
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	2a00      	cmp	r2, #0
 8003eda:	d1dc      	bne.n	8003e96 <main+0x6aa>
	 		  if (rising){
 8003edc:	4b55      	ldr	r3, [pc, #340]	; (8004034 <main+0x848>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d100      	bne.n	8003ee6 <main+0x6fa>
 8003ee4:	e0ae      	b.n	8004044 <main+0x858>
	 		 if (bemfcounter > min_bemf_counts_up){
 8003ee6:	4b54      	ldr	r3, [pc, #336]	; (8004038 <main+0x84c>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	465b      	mov	r3, fp
 8003eee:	9900      	ldr	r1, [sp, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	428b      	cmp	r3, r1
 8003ef4:	ddcf      	ble.n	8003e96 <main+0x6aa>
	 			 GPIOF->BSRR = GPIO_PIN_0;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	4927      	ldr	r1, [pc, #156]	; (8003f98 <main+0x7ac>)
 8003efa:	618b      	str	r3, [r1, #24]
	 			 zcfound = 1;
 8003efc:	494c      	ldr	r1, [pc, #304]	; (8004030 <main+0x844>)
 8003efe:	600b      	str	r3, [r1, #0]
	 			 bemfcounter = 0;
 8003f00:	465b      	mov	r3, fp
 8003f02:	601a      	str	r2, [r3, #0]
	 			 zcfoundroutine();
 8003f04:	f7ff fbf4 	bl	80036f0 <zcfoundroutine>
 8003f08:	e7c5      	b.n	8003e96 <main+0x6aa>
		  TIM1->CCR1 = 0;												// set duty cycle to 50 out of 768 to start.
 8003f0a:	4a22      	ldr	r2, [pc, #136]	; (8003f94 <main+0x7a8>)
 8003f0c:	6353      	str	r3, [r2, #52]	; 0x34
		  TIM1->CCR2 = 0;
 8003f0e:	6393      	str	r3, [r2, #56]	; 0x38
		  TIM1->CCR3 = 0;
 8003f10:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003f12:	e79f      	b.n	8003e54 <main+0x668>
   if(commutation_interval > 20000 && running){
 8003f14:	4b3c      	ldr	r3, [pc, #240]	; (8004008 <main+0x81c>)
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	001a      	movs	r2, r3
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	4b3b      	ldr	r3, [pc, #236]	; (800400c <main+0x820>)
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d916      	bls.n	8003f50 <main+0x764>
	   duty_cycle = input / 2 - 10 ;
 8003f22:	4653      	mov	r3, sl
 8003f24:	681a      	ldr	r2, [r3, #0]
	   if(commutation_interval > 30000){
 8003f26:	9900      	ldr	r1, [sp, #0]
	   duty_cycle = input / 2 - 10 ;
 8003f28:	0fd3      	lsrs	r3, r2, #31
 8003f2a:	189b      	adds	r3, r3, r2
 8003f2c:	105b      	asrs	r3, r3, #1
 8003f2e:	001c      	movs	r4, r3
 8003f30:	4642      	mov	r2, r8
 8003f32:	3c0a      	subs	r4, #10
 8003f34:	6014      	str	r4, [r2, #0]
	   if(commutation_interval > 30000){
 8003f36:	4a41      	ldr	r2, [pc, #260]	; (800403c <main+0x850>)
 8003f38:	4291      	cmp	r1, r2
 8003f3a:	d902      	bls.n	8003f42 <main+0x756>
	  	   duty_cycle = input / 2;
 8003f3c:	4642      	mov	r2, r8
 8003f3e:	001c      	movs	r4, r3
 8003f40:	6013      	str	r3, [r2, #0]
   if (duty_cycle < 30 && running){
 8003f42:	2c1d      	cmp	r4, #29
 8003f44:	dc11      	bgt.n	8003f6a <main+0x77e>
	   duty_cycle = 30;
 8003f46:	231e      	movs	r3, #30
 8003f48:	4642      	mov	r2, r8
 8003f4a:	241e      	movs	r4, #30
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	e758      	b.n	8003e02 <main+0x616>
   if (duty_cycle < 30 && running){
 8003f50:	2c1d      	cmp	r4, #29
 8003f52:	ddf8      	ble.n	8003f46 <main+0x75a>
 8003f54:	e755      	b.n	8003e02 <main+0x616>
   if(commutation_interval > 20000 && running){
 8003f56:	4b2c      	ldr	r3, [pc, #176]	; (8004008 <main+0x81c>)
 8003f58:	881b      	ldrh	r3, [r3, #0]
 8003f5a:	001a      	movs	r2, r3
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	4b2b      	ldr	r3, [pc, #172]	; (800400c <main+0x820>)
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d800      	bhi.n	8003f66 <main+0x77a>
 8003f64:	e0f0      	b.n	8004148 <main+0x95c>
   if (duty_cycle < 30 && running){
 8003f66:	4643      	mov	r3, r8
 8003f68:	681c      	ldr	r4, [r3, #0]
	 if (duty_cycle > 998){
 8003f6a:	4b35      	ldr	r3, [pc, #212]	; (8004040 <main+0x854>)
 8003f6c:	429c      	cmp	r4, r3
 8003f6e:	dc00      	bgt.n	8003f72 <main+0x786>
 8003f70:	e747      	b.n	8003e02 <main+0x616>
		 duty_cycle = 998;
 8003f72:	4642      	mov	r2, r8
 8003f74:	001c      	movs	r4, r3
 8003f76:	6013      	str	r3, [r2, #0]
 8003f78:	e743      	b.n	8003e02 <main+0x616>
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	2000005c 	.word	0x2000005c
 8003f80:	1ffff7c2 	.word	0x1ffff7c2
 8003f84:	200004c4 	.word	0x200004c4
 8003f88:	1ffff7b8 	.word	0x1ffff7b8
 8003f8c:	2000011c 	.word	0x2000011c
 8003f90:	2000019c 	.word	0x2000019c
 8003f94:	40012c00 	.word	0x40012c00
 8003f98:	48001400 	.word	0x48001400
 8003f9c:	40010400 	.word	0x40010400
 8003fa0:	2000013c 	.word	0x2000013c
 8003fa4:	200005e0 	.word	0x200005e0
 8003fa8:	20000548 	.word	0x20000548
 8003fac:	200000e0 	.word	0x200000e0
 8003fb0:	20000124 	.word	0x20000124
 8003fb4:	20000008 	.word	0x20000008
 8003fb8:	2000000c 	.word	0x2000000c
 8003fbc:	200000b4 	.word	0x200000b4
 8003fc0:	20000014 	.word	0x20000014
 8003fc4:	20000194 	.word	0x20000194
 8003fc8:	200005e8 	.word	0x200005e8
 8003fcc:	20000068 	.word	0x20000068
 8003fd0:	200000f8 	.word	0x200000f8
 8003fd4:	200000b8 	.word	0x200000b8
 8003fd8:	20000110 	.word	0x20000110
 8003fdc:	20000064 	.word	0x20000064
 8003fe0:	20000065 	.word	0x20000065
 8003fe4:	200000d4 	.word	0x200000d4
 8003fe8:	200000b0 	.word	0x200000b0
 8003fec:	200000bc 	.word	0x200000bc
 8003ff0:	0000044c 	.word	0x0000044c
 8003ff4:	fffffbb4 	.word	0xfffffbb4
 8003ff8:	fffffbe8 	.word	0xfffffbe8
 8003ffc:	20000066 	.word	0x20000066
 8004000:	20000184 	.word	0x20000184
 8004004:	20000028 	.word	0x20000028
 8004008:	20000004 	.word	0x20000004
 800400c:	00004e20 	.word	0x00004e20
 8004010:	200000ec 	.word	0x200000ec
 8004014:	200000fc 	.word	0x200000fc
 8004018:	05f5e100 	.word	0x05f5e100
 800401c:	200002e4 	.word	0x200002e4
 8004020:	00002710 	.word	0x00002710
 8004024:	20000000 	.word	0x20000000
 8004028:	40000400 	.word	0x40000400
 800402c:	0000c350 	.word	0x0000c350
 8004030:	2000010c 	.word	0x2000010c
 8004034:	20000030 	.word	0x20000030
 8004038:	20000024 	.word	0x20000024
 800403c:	00007530 	.word	0x00007530
 8004040:	000003e6 	.word	0x000003e6
	 			  if (bemfcounter > min_bemf_counts_down){
 8004044:	4a46      	ldr	r2, [pc, #280]	; (8004160 <main+0x974>)
 8004046:	6812      	ldr	r2, [r2, #0]
 8004048:	9200      	str	r2, [sp, #0]
 800404a:	465a      	mov	r2, fp
 800404c:	9900      	ldr	r1, [sp, #0]
 800404e:	6812      	ldr	r2, [r2, #0]
 8004050:	428a      	cmp	r2, r1
 8004052:	dc00      	bgt.n	8004056 <main+0x86a>
 8004054:	e71f      	b.n	8003e96 <main+0x6aa>
	 			  			 GPIOF->BSRR = GPIO_PIN_0;
 8004056:	2201      	movs	r2, #1
 8004058:	4942      	ldr	r1, [pc, #264]	; (8004164 <main+0x978>)
 800405a:	618a      	str	r2, [r1, #24]
	 			  			 zcfound = 1;
 800405c:	4942      	ldr	r1, [pc, #264]	; (8004168 <main+0x97c>)
 800405e:	600a      	str	r2, [r1, #0]
	 			  			 bemfcounter = 0;
 8004060:	465a      	mov	r2, fp
 8004062:	6013      	str	r3, [r2, #0]
	 			  			 zcfoundroutine();
 8004064:	f7ff fb44 	bl	80036f0 <zcfoundroutine>
 8004068:	e715      	b.n	8003e96 <main+0x6aa>
	  					}if ( newinput <= 1047 ){
 800406a:	4a40      	ldr	r2, [pc, #256]	; (800416c <main+0x980>)
 800406c:	4293      	cmp	r3, r2
 800406e:	dd00      	ble.n	8004072 <main+0x886>
 8004070:	e684      	b.n	8003d7c <main+0x590>
	  						if(forward){
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	2a00      	cmp	r2, #0
 8004076:	d000      	beq.n	800407a <main+0x88e>
	  					forward = 0;
 8004078:	603e      	str	r6, [r7, #0]
	  						input = (newinput - 90) * 2 ;
 800407a:	001a      	movs	r2, r3
 800407c:	4651      	mov	r1, sl
 800407e:	3a5a      	subs	r2, #90	; 0x5a
 8004080:	0052      	lsls	r2, r2, #1
 8004082:	600a      	str	r2, [r1, #0]
 8004084:	e67a      	b.n	8003d7c <main+0x590>
		  if (bi_direction == 1 && proshot == 0){
 8004086:	7819      	ldrb	r1, [r3, #0]
 8004088:	2900      	cmp	r1, #0
 800408a:	d000      	beq.n	800408e <main+0x8a2>
 800408c:	e666      	b.n	8003d5c <main+0x570>
			if ( newinput > 1100 ){
 800408e:	4b38      	ldr	r3, [pc, #224]	; (8004170 <main+0x984>)
 8004090:	4838      	ldr	r0, [pc, #224]	; (8004174 <main+0x988>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4283      	cmp	r3, r0
 8004096:	dd3f      	ble.n	8004118 <main+0x92c>
				if(reversed_direction){
 8004098:	4837      	ldr	r0, [pc, #220]	; (8004178 <main+0x98c>)
 800409a:	7800      	ldrb	r0, [r0, #0]
 800409c:	2800      	cmp	r0, #0
 800409e:	d036      	beq.n	800410e <main+0x922>
				if (forward == 1){
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	2a01      	cmp	r2, #1
 80040a4:	d100      	bne.n	80040a8 <main+0x8bc>
					forward = 0 ;
 80040a6:	6039      	str	r1, [r7, #0]
					input = (newinput - 1050)*3;
 80040a8:	4a34      	ldr	r2, [pc, #208]	; (800417c <main+0x990>)
 80040aa:	1899      	adds	r1, r3, r2
 80040ac:	004a      	lsls	r2, r1, #1
 80040ae:	1852      	adds	r2, r2, r1
 80040b0:	4651      	mov	r1, sl
 80040b2:	600a      	str	r2, [r1, #0]
			if (newinput > 800 && newinput < 1100){
 80040b4:	4a32      	ldr	r2, [pc, #200]	; (8004180 <main+0x994>)
 80040b6:	4694      	mov	ip, r2
 80040b8:	2295      	movs	r2, #149	; 0x95
 80040ba:	4463      	add	r3, ip
 80040bc:	0052      	lsls	r2, r2, #1
 80040be:	4293      	cmp	r3, r2
 80040c0:	d900      	bls.n	80040c4 <main+0x8d8>
 80040c2:	e663      	b.n	8003d8c <main+0x5a0>
				input = 0;
 80040c4:	4653      	mov	r3, sl
 80040c6:	601e      	str	r6, [r3, #0]
		  if (running == 1){
 80040c8:	464b      	mov	r3, r9
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d101      	bne.n	80040d4 <main+0x8e8>
		  coasting = 0;
 80040d0:	4b2c      	ldr	r3, [pc, #176]	; (8004184 <main+0x998>)
 80040d2:	701e      	strb	r6, [r3, #0]
	 	 running = 0;
 80040d4:	464b      	mov	r3, r9
 80040d6:	601e      	str	r6, [r3, #0]
	 	 duty_cycle = 0;
 80040d8:	4643      	mov	r3, r8
 80040da:	601e      	str	r6, [r3, #0]
	 	 stepper_sine = 0;
 80040dc:	4b2a      	ldr	r3, [pc, #168]	; (8004188 <main+0x99c>)
	 	zero_crosses = 0;
 80040de:	602e      	str	r6, [r5, #0]
	 	 stepper_sine = 0;
 80040e0:	701e      	strb	r6, [r3, #0]
	 	fullBrake();            // to track zero crosses at 0 throttle comment this out but there is only partial braking
 80040e2:	f7fe f893 	bl	800220c <fullBrake>
 80040e6:	e66b      	b.n	8003dc0 <main+0x5d4>
   if(commutation_interval > 20000 && running){
 80040e8:	4b28      	ldr	r3, [pc, #160]	; (800418c <main+0x9a0>)
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	001a      	movs	r2, r3
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	4b27      	ldr	r3, [pc, #156]	; (8004190 <main+0x9a4>)
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d928      	bls.n	8004148 <main+0x95c>
 80040f6:	464b      	mov	r3, r9
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d100      	bne.n	8004100 <main+0x914>
 80040fe:	e732      	b.n	8003f66 <main+0x77a>
 8004100:	e70f      	b.n	8003f22 <main+0x736>
 8004102:	e7fe      	b.n	8004102 <main+0x916>
		 input = newinput;
 8004104:	4652      	mov	r2, sl
 8004106:	4b1a      	ldr	r3, [pc, #104]	; (8004170 <main+0x984>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6013      	str	r3, [r2, #0]
 800410c:	e640      	b.n	8003d90 <main+0x5a4>
				if (forward == 0){
 800410e:	6839      	ldr	r1, [r7, #0]
 8004110:	2900      	cmp	r1, #0
 8004112:	d1c9      	bne.n	80040a8 <main+0x8bc>
					forward = 1 ;
 8004114:	603a      	str	r2, [r7, #0]
 8004116:	e7c7      	b.n	80040a8 <main+0x8bc>
			if (newinput < 800) {
 8004118:	491e      	ldr	r1, [pc, #120]	; (8004194 <main+0x9a8>)
 800411a:	428b      	cmp	r3, r1
 800411c:	dcca      	bgt.n	80040b4 <main+0x8c8>
				if(reversed_direction){
 800411e:	4916      	ldr	r1, [pc, #88]	; (8004178 <main+0x98c>)
 8004120:	7809      	ldrb	r1, [r1, #0]
 8004122:	2900      	cmp	r1, #0
 8004124:	d00b      	beq.n	800413e <main+0x952>
					if (forward == 0){
 8004126:	6839      	ldr	r1, [r7, #0]
 8004128:	2900      	cmp	r1, #0
 800412a:	d100      	bne.n	800412e <main+0x942>
					forward = 1;
 800412c:	603a      	str	r2, [r7, #0]
					input = (800 - newinput) * 3;
 800412e:	22c8      	movs	r2, #200	; 0xc8
 8004130:	0092      	lsls	r2, r2, #2
 8004132:	1ad2      	subs	r2, r2, r3
 8004134:	0051      	lsls	r1, r2, #1
 8004136:	188a      	adds	r2, r1, r2
 8004138:	4651      	mov	r1, sl
 800413a:	600a      	str	r2, [r1, #0]
 800413c:	e7ba      	b.n	80040b4 <main+0x8c8>
				if (forward == 1){
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	2a01      	cmp	r2, #1
 8004142:	d1f4      	bne.n	800412e <main+0x942>
					forward = 0;
 8004144:	6039      	str	r1, [r7, #0]
 8004146:	e7f2      	b.n	800412e <main+0x942>
 8004148:	4643      	mov	r3, r8
 800414a:	681c      	ldr	r4, [r3, #0]
   if (duty_cycle < 30 && running){
 800414c:	2c1d      	cmp	r4, #29
 800414e:	dd00      	ble.n	8004152 <main+0x966>
 8004150:	e70b      	b.n	8003f6a <main+0x77e>
 8004152:	464b      	mov	r3, r9
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d100      	bne.n	800415c <main+0x970>
 800415a:	e652      	b.n	8003e02 <main+0x616>
 800415c:	e6f3      	b.n	8003f46 <main+0x75a>
 800415e:	46c0      	nop			; (mov r8, r8)
 8004160:	20000020 	.word	0x20000020
 8004164:	48001400 	.word	0x48001400
 8004168:	2000010c 	.word	0x2000010c
 800416c:	00000417 	.word	0x00000417
 8004170:	200000bc 	.word	0x200000bc
 8004174:	0000044c 	.word	0x0000044c
 8004178:	200000dc 	.word	0x200000dc
 800417c:	fffffbe6 	.word	0xfffffbe6
 8004180:	fffffcdf 	.word	0xfffffcdf
 8004184:	20000066 	.word	0x20000066
 8004188:	200000f0 	.word	0x200000f0
 800418c:	20000004 	.word	0x20000004
 8004190:	00004e20 	.word	0x00004e20
 8004194:	0000031f 	.word	0x0000031f

08004198 <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 8004198:	e7fe      	b.n	8004198 <_Error_Handler>
 800419a:	46c0      	nop			; (mov r8, r8)

0800419c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800419c:	2301      	movs	r3, #1

  /* System interrupt init*/
  /* SVC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 800419e:	2005      	movs	r0, #5
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041a0:	4a0e      	ldr	r2, [pc, #56]	; (80041dc <HAL_MspInit+0x40>)
{
 80041a2:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041a4:	6991      	ldr	r1, [r2, #24]
{
 80041a6:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041a8:	4319      	orrs	r1, r3
 80041aa:	6191      	str	r1, [r2, #24]
 80041ac:	6992      	ldr	r2, [r2, #24]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80041ae:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041b0:	4013      	ands	r3, r2
 80041b2:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80041b4:	2200      	movs	r2, #0
 80041b6:	4240      	negs	r0, r0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041b8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(SVC_IRQn, 0, 0);
 80041ba:	f7fc fb7d 	bl	80008b8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80041be:	2002      	movs	r0, #2
 80041c0:	2200      	movs	r2, #0
 80041c2:	2100      	movs	r1, #0
 80041c4:	4240      	negs	r0, r0
 80041c6:	f7fc fb77 	bl	80008b8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80041ca:	2001      	movs	r0, #1
 80041cc:	2200      	movs	r2, #0
 80041ce:	2100      	movs	r1, #0
 80041d0:	4240      	negs	r0, r0
 80041d2:	f7fc fb71 	bl	80008b8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80041d6:	b003      	add	sp, #12
 80041d8:	bd00      	pop	{pc}
 80041da:	46c0      	nop			; (mov r8, r8)
 80041dc:	40021000 	.word	0x40021000

080041e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80041e0:	b530      	push	{r4, r5, lr}

  if(hadc->Instance==ADC1)
 80041e2:	4b17      	ldr	r3, [pc, #92]	; (8004240 <HAL_ADC_MspInit+0x60>)
 80041e4:	6802      	ldr	r2, [r0, #0]
{
 80041e6:	b083      	sub	sp, #12
 80041e8:	0004      	movs	r4, r0
  if(hadc->Instance==ADC1)
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d001      	beq.n	80041f2 <HAL_ADC_MspInit+0x12>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80041ee:	b003      	add	sp, #12
 80041f0:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 80041f2:	2080      	movs	r0, #128	; 0x80
 80041f4:	4a13      	ldr	r2, [pc, #76]	; (8004244 <HAL_ADC_MspInit+0x64>)
 80041f6:	0080      	lsls	r0, r0, #2
 80041f8:	6991      	ldr	r1, [r2, #24]
    hdma_adc.Instance = DMA1_Channel1;
 80041fa:	4d13      	ldr	r5, [pc, #76]	; (8004248 <HAL_ADC_MspInit+0x68>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80041fc:	4301      	orrs	r1, r0
 80041fe:	6191      	str	r1, [r2, #24]
 8004200:	6993      	ldr	r3, [r2, #24]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8004202:	2280      	movs	r2, #128	; 0x80
 8004204:	60ea      	str	r2, [r5, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004206:	3280      	adds	r2, #128	; 0x80
 8004208:	612a      	str	r2, [r5, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800420a:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_ADC1_CLK_ENABLE();
 800420c:	4003      	ands	r3, r0
 800420e:	9301      	str	r3, [sp, #4]
 8004210:	9b01      	ldr	r3, [sp, #4]
    hdma_adc.Instance = DMA1_Channel1;
 8004212:	4b0e      	ldr	r3, [pc, #56]	; (800424c <HAL_ADC_MspInit+0x6c>)
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004214:	00d2      	lsls	r2, r2, #3
    hdma_adc.Instance = DMA1_Channel1;
 8004216:	602b      	str	r3, [r5, #0]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004218:	616a      	str	r2, [r5, #20]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800421a:	2300      	movs	r3, #0
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 800421c:	2220      	movs	r2, #32
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 800421e:	0028      	movs	r0, r5
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004220:	606b      	str	r3, [r5, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8004222:	60ab      	str	r3, [r5, #8]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8004224:	61aa      	str	r2, [r5, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8004226:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8004228:	f7fc fbb4 	bl	8000994 <HAL_DMA_Init>
 800422c:	2800      	cmp	r0, #0
 800422e:	d102      	bne.n	8004236 <HAL_ADC_MspInit+0x56>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8004230:	63e5      	str	r5, [r4, #60]	; 0x3c
 8004232:	626c      	str	r4, [r5, #36]	; 0x24
}
 8004234:	e7db      	b.n	80041ee <HAL_ADC_MspInit+0xe>
      _Error_Handler(__FILE__, __LINE__);
 8004236:	2161      	movs	r1, #97	; 0x61
 8004238:	4805      	ldr	r0, [pc, #20]	; (8004250 <HAL_ADC_MspInit+0x70>)
 800423a:	f7ff ffad 	bl	8004198 <_Error_Handler>
 800423e:	e7f7      	b.n	8004230 <HAL_ADC_MspInit+0x50>
 8004240:	40012400 	.word	0x40012400
 8004244:	40021000 	.word	0x40021000
 8004248:	20000550 	.word	0x20000550
 800424c:	40020008 	.word	0x40020008
 8004250:	0800459c 	.word	0x0800459c

08004254 <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004254:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim_base->Instance==TIM1)
 8004256:	6803      	ldr	r3, [r0, #0]
 8004258:	4a39      	ldr	r2, [pc, #228]	; (8004340 <HAL_TIM_Base_MspInit+0xec>)
{
 800425a:	b088      	sub	sp, #32
 800425c:	0004      	movs	r4, r0
  if(htim_base->Instance==TIM1)
 800425e:	4293      	cmp	r3, r2
 8004260:	d00b      	beq.n	800427a <HAL_TIM_Base_MspInit+0x26>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8004262:	2280      	movs	r2, #128	; 0x80
 8004264:	05d2      	lsls	r2, r2, #23
 8004266:	4293      	cmp	r3, r2
 8004268:	d02f      	beq.n	80042ca <HAL_TIM_Base_MspInit+0x76>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 800426a:	4a36      	ldr	r2, [pc, #216]	; (8004344 <HAL_TIM_Base_MspInit+0xf0>)
 800426c:	4293      	cmp	r3, r2
 800426e:	d00f      	beq.n	8004290 <HAL_TIM_Base_MspInit+0x3c>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 8004270:	4a35      	ldr	r2, [pc, #212]	; (8004348 <HAL_TIM_Base_MspInit+0xf4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d016      	beq.n	80042a4 <HAL_TIM_Base_MspInit+0x50>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8004276:	b008      	add	sp, #32
 8004278:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 800427a:	2080      	movs	r0, #128	; 0x80
 800427c:	4a33      	ldr	r2, [pc, #204]	; (800434c <HAL_TIM_Base_MspInit+0xf8>)
 800427e:	0100      	lsls	r0, r0, #4
 8004280:	6991      	ldr	r1, [r2, #24]
 8004282:	4301      	orrs	r1, r0
 8004284:	6191      	str	r1, [r2, #24]
 8004286:	6993      	ldr	r3, [r2, #24]
 8004288:	4003      	ands	r3, r0
 800428a:	9300      	str	r3, [sp, #0]
 800428c:	9b00      	ldr	r3, [sp, #0]
 800428e:	e7f2      	b.n	8004276 <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004290:	2302      	movs	r3, #2
 8004292:	4a2e      	ldr	r2, [pc, #184]	; (800434c <HAL_TIM_Base_MspInit+0xf8>)
 8004294:	69d1      	ldr	r1, [r2, #28]
 8004296:	4319      	orrs	r1, r3
 8004298:	61d1      	str	r1, [r2, #28]
 800429a:	69d2      	ldr	r2, [r2, #28]
 800429c:	4013      	ands	r3, r2
 800429e:	9302      	str	r3, [sp, #8]
 80042a0:	9b02      	ldr	r3, [sp, #8]
 80042a2:	e7e8      	b.n	8004276 <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80042a4:	2080      	movs	r0, #128	; 0x80
 80042a6:	4a29      	ldr	r2, [pc, #164]	; (800434c <HAL_TIM_Base_MspInit+0xf8>)
 80042a8:	0040      	lsls	r0, r0, #1
 80042aa:	69d1      	ldr	r1, [r2, #28]
 80042ac:	4301      	orrs	r1, r0
 80042ae:	61d1      	str	r1, [r2, #28]
 80042b0:	69d3      	ldr	r3, [r2, #28]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 80042b2:	2101      	movs	r1, #1
    __HAL_RCC_TIM14_CLK_ENABLE();
 80042b4:	4003      	ands	r3, r0
 80042b6:	9303      	str	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 80042b8:	2200      	movs	r2, #0
 80042ba:	38ed      	subs	r0, #237	; 0xed
    __HAL_RCC_TIM14_CLK_ENABLE();
 80042bc:	9b03      	ldr	r3, [sp, #12]
    HAL_NVIC_SetPriority(TIM14_IRQn, 1, 0);
 80042be:	f7fc fafb 	bl	80008b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80042c2:	2013      	movs	r0, #19
 80042c4:	f7fc fb2c 	bl	8000920 <HAL_NVIC_EnableIRQ>
}
 80042c8:	e7d5      	b.n	8004276 <HAL_TIM_Base_MspInit+0x22>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042ca:	2301      	movs	r3, #1
 80042cc:	4a1f      	ldr	r2, [pc, #124]	; (800434c <HAL_TIM_Base_MspInit+0xf8>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ce:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042d0:	69d1      	ldr	r1, [r2, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042d2:	2600      	movs	r6, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042d4:	4319      	orrs	r1, r3
 80042d6:	61d1      	str	r1, [r2, #28]
 80042d8:	69d2      	ldr	r2, [r2, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042da:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042dc:	4013      	ands	r3, r2
 80042de:	9301      	str	r3, [sp, #4]
 80042e0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80042e2:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042e4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80042e6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e8:	3b06      	subs	r3, #6
 80042ea:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80042ec:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ee:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042f0:	9606      	str	r6, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042f2:	f7fc fc11 	bl	8000b18 <HAL_GPIO_Init>
    hdma_tim2_ch4.Instance = DMA1_Channel4;
 80042f6:	4d16      	ldr	r5, [pc, #88]	; (8004350 <HAL_TIM_Base_MspInit+0xfc>)
 80042f8:	4b16      	ldr	r3, [pc, #88]	; (8004354 <HAL_TIM_Base_MspInit+0x100>)
    if (HAL_DMA_Init(&hdma_tim2_ch4) != HAL_OK)
 80042fa:	0028      	movs	r0, r5
    hdma_tim2_ch4.Instance = DMA1_Channel4;
 80042fc:	602b      	str	r3, [r5, #0]
    hdma_tim2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80042fe:	2380      	movs	r3, #128	; 0x80
 8004300:	60eb      	str	r3, [r5, #12]
    hdma_tim2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004302:	3380      	adds	r3, #128	; 0x80
 8004304:	612b      	str	r3, [r5, #16]
    hdma_tim2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004306:	2380      	movs	r3, #128	; 0x80
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	616b      	str	r3, [r5, #20]
    hdma_tim2_ch4.Init.Priority = DMA_PRIORITY_MEDIUM;
 800430c:	2380      	movs	r3, #128	; 0x80
 800430e:	015b      	lsls	r3, r3, #5
    hdma_tim2_ch4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004310:	606e      	str	r6, [r5, #4]
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8004312:	60ae      	str	r6, [r5, #8]
    hdma_tim2_ch4.Init.Mode = DMA_NORMAL;
 8004314:	61ae      	str	r6, [r5, #24]
    hdma_tim2_ch4.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004316:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch4) != HAL_OK)
 8004318:	f7fc fb3c 	bl	8000994 <HAL_DMA_Init>
 800431c:	2800      	cmp	r0, #0
 800431e:	d10a      	bne.n	8004336 <HAL_TIM_Base_MspInit+0xe2>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch4);
 8004320:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8004322:	2200      	movs	r2, #0
 8004324:	2101      	movs	r1, #1
 8004326:	200f      	movs	r0, #15
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch4);
 8004328:	626c      	str	r4, [r5, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800432a:	f7fc fac5 	bl	80008b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800432e:	200f      	movs	r0, #15
 8004330:	f7fc faf6 	bl	8000920 <HAL_NVIC_EnableIRQ>
 8004334:	e79f      	b.n	8004276 <HAL_TIM_Base_MspInit+0x22>
      _Error_Handler(__FILE__, __LINE__);
 8004336:	21ae      	movs	r1, #174	; 0xae
 8004338:	4807      	ldr	r0, [pc, #28]	; (8004358 <HAL_TIM_Base_MspInit+0x104>)
 800433a:	f7ff ff2d 	bl	8004198 <_Error_Handler>
 800433e:	e7ef      	b.n	8004320 <HAL_TIM_Base_MspInit+0xcc>
 8004340:	40012c00 	.word	0x40012c00
 8004344:	40000400 	.word	0x40000400
 8004348:	40002000 	.word	0x40002000
 800434c:	40021000 	.word	0x40021000
 8004350:	20000478 	.word	0x20000478
 8004354:	40020044 	.word	0x40020044
 8004358:	0800459c 	.word	0x0800459c

0800435c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800435c:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 800435e:	4b10      	ldr	r3, [pc, #64]	; (80043a0 <HAL_TIM_MspPostInit+0x44>)
 8004360:	6802      	ldr	r2, [r0, #0]
{
 8004362:	b087      	sub	sp, #28
  if(htim->Instance==TIM1)
 8004364:	429a      	cmp	r2, r3
 8004366:	d001      	beq.n	800436c <HAL_TIM_MspPostInit+0x10>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004368:	b007      	add	sp, #28
 800436a:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800436c:	23e0      	movs	r3, #224	; 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800436e:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004370:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004372:	021b      	lsls	r3, r3, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004374:	a901      	add	r1, sp, #4
 8004376:	480b      	ldr	r0, [pc, #44]	; (80043a4 <HAL_TIM_MspPostInit+0x48>)
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004378:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800437a:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800437c:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800437e:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004380:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004382:	f7fc fbc9 	bl	8000b18 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004386:	23e0      	movs	r3, #224	; 0xe0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004388:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800438a:	00db      	lsls	r3, r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800438c:	a901      	add	r1, sp, #4
 800438e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8004390:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004392:	9402      	str	r4, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004394:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004396:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8004398:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800439a:	f7fc fbbd 	bl	8000b18 <HAL_GPIO_Init>
}
 800439e:	e7e3      	b.n	8004368 <HAL_TIM_MspPostInit+0xc>
 80043a0:	40012c00 	.word	0x40012c00
 80043a4:	48000400 	.word	0x48000400

080043a8 <NMI_Handler>:
 80043a8:	4770      	bx	lr
 80043aa:	46c0      	nop			; (mov r8, r8)

080043ac <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80043ac:	e7fe      	b.n	80043ac <HardFault_Handler>
 80043ae:	46c0      	nop			; (mov r8, r8)

080043b0 <SVC_Handler>:
 80043b0:	4770      	bx	lr
 80043b2:	46c0      	nop			; (mov r8, r8)

080043b4 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043b4:	4770      	bx	lr
 80043b6:	46c0      	nop			; (mov r8, r8)

080043b8 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80043b8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043ba:	f7fc f83d 	bl	8000438 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80043be:	f7fc fae5 	bl	800098c <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043c2:	bd10      	pop	{r4, pc}

080043c4 <EXTI0_1_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80043c4:	2201      	movs	r2, #1
 80043c6:	4b09      	ldr	r3, [pc, #36]	; (80043ec <EXTI0_1_IRQHandler+0x28>)

/**
* @brief This function handles EXTI line 0 and 1 interrupts.
*/
void EXTI0_1_IRQHandler(void)
{
 80043c8:	b510      	push	{r4, lr}
 80043ca:	6959      	ldr	r1, [r3, #20]
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 80043cc:	420a      	tst	r2, r1
 80043ce:	d108      	bne.n	80043e2 <EXTI0_1_IRQHandler+0x1e>
 80043d0:	2202      	movs	r2, #2
 80043d2:	4b06      	ldr	r3, [pc, #24]	; (80043ec <EXTI0_1_IRQHandler+0x28>)
 80043d4:	6959      	ldr	r1, [r3, #20]
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
    /* USER CODE BEGIN LL_EXTI_LINE_0 */
    interruptRoutine();
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 80043d6:	420a      	tst	r2, r1
 80043d8:	d002      	beq.n	80043e0 <EXTI0_1_IRQHandler+0x1c>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 80043da:	615a      	str	r2, [r3, #20]
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
    /* USER CODE BEGIN LL_EXTI_LINE_1 */
    interruptRoutine();
 80043dc:	f7ff f8f0 	bl	80035c0 <interruptRoutine>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80043e0:	bd10      	pop	{r4, pc}
 80043e2:	615a      	str	r2, [r3, #20]
    interruptRoutine();
 80043e4:	f7ff f8ec 	bl	80035c0 <interruptRoutine>
 80043e8:	e7f2      	b.n	80043d0 <EXTI0_1_IRQHandler+0xc>
 80043ea:	46c0      	nop			; (mov r8, r8)
 80043ec:	40010400 	.word	0x40010400

080043f0 <EXTI2_3_IRQHandler>:
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 80043f0:	2204      	movs	r2, #4
 80043f2:	4b04      	ldr	r3, [pc, #16]	; (8004404 <EXTI2_3_IRQHandler+0x14>)

/**
* @brief This function handles EXTI line 2 and 3 interrupts.
*/
void EXTI2_3_IRQHandler(void)
{
 80043f4:	b510      	push	{r4, lr}
 80043f6:	6959      	ldr	r1, [r3, #20]
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 80043f8:	420a      	tst	r2, r1
 80043fa:	d002      	beq.n	8004402 <EXTI2_3_IRQHandler+0x12>
  WRITE_REG(EXTI->PR, ExtiLine);
 80043fc:	615a      	str	r2, [r3, #20]
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
    /* USER CODE BEGIN LL_EXTI_LINE_2 */
    interruptRoutine();
 80043fe:	f7ff f8df 	bl	80035c0 <interruptRoutine>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8004402:	bd10      	pop	{r4, pc}
 8004404:	40010400 	.word	0x40010400

08004408 <DMA1_Channel1_IRQHandler>:

/**
* @brief This function handles DMA1 channel 1 interrupt.
*/
void DMA1_Channel1_IRQHandler(void)
{
 8004408:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 800440a:	4802      	ldr	r0, [pc, #8]	; (8004414 <DMA1_Channel1_IRQHandler+0xc>)
 800440c:	f7fc fb36 	bl	8000a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004410:	bd10      	pop	{r4, pc}
 8004412:	46c0      	nop			; (mov r8, r8)
 8004414:	20000550 	.word	0x20000550

08004418 <DMA1_Channel4_5_IRQHandler>:

/**
* @brief This function handles DMA1 channel 4 and 5 interrupts.
*/
void DMA1_Channel4_5_IRQHandler(void)
{
 8004418:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch4);
 800441a:	4803      	ldr	r0, [pc, #12]	; (8004428 <DMA1_Channel4_5_IRQHandler+0x10>)
 800441c:	f7fc fb2e 	bl	8000a7c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */
  transferComplete();
 8004420:	f7fe fb5e 	bl	8002ae0 <transferComplete>
  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8004424:	bd10      	pop	{r4, pc}
 8004426:	46c0      	nop			; (mov r8, r8)
 8004428:	20000478 	.word	0x20000478

0800442c <TIM2_IRQHandler>:

/**
* @brief This function handles TIM2 global interrupt.
*/
void TIM2_IRQHandler(void)
{
 800442c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800442e:	4802      	ldr	r0, [pc, #8]	; (8004438 <TIM2_IRQHandler+0xc>)
 8004430:	f7fd fcbc 	bl	8001dac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004434:	bd10      	pop	{r4, pc}
 8004436:	46c0      	nop			; (mov r8, r8)
 8004438:	200004c8 	.word	0x200004c8

0800443c <TIM14_IRQHandler>:

/**
* @brief This function handles TIM14 global interrupt.
*/
void TIM14_IRQHandler(void)
{
 800443c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800443e:	4802      	ldr	r0, [pc, #8]	; (8004448 <TIM14_IRQHandler+0xc>)
 8004440:	f7fd fcb4 	bl	8001dac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8004444:	bd10      	pop	{r4, pc}
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	20000508 	.word	0x20000508

0800444c <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 800444c:	2101      	movs	r1, #1
 800444e:	4b11      	ldr	r3, [pc, #68]	; (8004494 <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8004450:	4811      	ldr	r0, [pc, #68]	; (8004498 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	430a      	orrs	r2, r1
 8004456:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8004458:	685a      	ldr	r2, [r3, #4]
 800445a:	4002      	ands	r2, r0
 800445c:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	480e      	ldr	r0, [pc, #56]	; (800449c <SystemInit+0x50>)
 8004462:	4002      	ands	r2, r0
 8004464:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	480d      	ldr	r0, [pc, #52]	; (80044a0 <SystemInit+0x54>)
 800446a:	4002      	ands	r2, r0
 800446c:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	480c      	ldr	r0, [pc, #48]	; (80044a4 <SystemInit+0x58>)
 8004472:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8004474:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8004476:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8004478:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800447a:	4382      	bics	r2, r0
 800447c:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 800447e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004480:	4809      	ldr	r0, [pc, #36]	; (80044a8 <SystemInit+0x5c>)
 8004482:	4002      	ands	r2, r0
 8004484:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8004486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004488:	438a      	bics	r2, r1
 800448a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800448c:	2200      	movs	r2, #0
 800448e:	609a      	str	r2, [r3, #8]

}
 8004490:	4770      	bx	lr
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	40021000 	.word	0x40021000
 8004498:	08ffb80c 	.word	0x08ffb80c
 800449c:	fef6ffff 	.word	0xfef6ffff
 80044a0:	fffbffff 	.word	0xfffbffff
 80044a4:	ffc0ffff 	.word	0xffc0ffff
 80044a8:	fffffeec 	.word	0xfffffeec

080044ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80044ac:	480d      	ldr	r0, [pc, #52]	; (80044e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80044ae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044b0:	480d      	ldr	r0, [pc, #52]	; (80044e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80044b2:	490e      	ldr	r1, [pc, #56]	; (80044ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80044b4:	4a0e      	ldr	r2, [pc, #56]	; (80044f0 <LoopForever+0xe>)
  movs r3, #0
 80044b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044b8:	e002      	b.n	80044c0 <LoopCopyDataInit>

080044ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044be:	3304      	adds	r3, #4

080044c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044c4:	d3f9      	bcc.n	80044ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044c6:	4a0b      	ldr	r2, [pc, #44]	; (80044f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80044c8:	4c0b      	ldr	r4, [pc, #44]	; (80044f8 <LoopForever+0x16>)
  movs r3, #0
 80044ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044cc:	e001      	b.n	80044d2 <LoopFillZerobss>

080044ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044d0:	3204      	adds	r2, #4

080044d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044d4:	d3fb      	bcc.n	80044ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80044d6:	f7ff ffb9 	bl	800444c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80044da:	f000 f811 	bl	8004500 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80044de:	f7ff f985 	bl	80037ec <main>

080044e2 <LoopForever>:

LoopForever:
    b LoopForever
 80044e2:	e7fe      	b.n	80044e2 <LoopForever>
  ldr   r0, =_estack
 80044e4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80044e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044ec:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 80044f0:	080045d0 	.word	0x080045d0
  ldr r2, =_sbss
 80044f4:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 80044f8:	200005ec 	.word	0x200005ec

080044fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80044fc:	e7fe      	b.n	80044fc <ADC1_IRQHandler>
	...

08004500 <__libc_init_array>:
 8004500:	b570      	push	{r4, r5, r6, lr}
 8004502:	2600      	movs	r6, #0
 8004504:	4d0c      	ldr	r5, [pc, #48]	; (8004538 <__libc_init_array+0x38>)
 8004506:	4c0d      	ldr	r4, [pc, #52]	; (800453c <__libc_init_array+0x3c>)
 8004508:	1b64      	subs	r4, r4, r5
 800450a:	10a4      	asrs	r4, r4, #2
 800450c:	42a6      	cmp	r6, r4
 800450e:	d109      	bne.n	8004524 <__libc_init_array+0x24>
 8004510:	2600      	movs	r6, #0
 8004512:	f000 f819 	bl	8004548 <_init>
 8004516:	4d0a      	ldr	r5, [pc, #40]	; (8004540 <__libc_init_array+0x40>)
 8004518:	4c0a      	ldr	r4, [pc, #40]	; (8004544 <__libc_init_array+0x44>)
 800451a:	1b64      	subs	r4, r4, r5
 800451c:	10a4      	asrs	r4, r4, #2
 800451e:	42a6      	cmp	r6, r4
 8004520:	d105      	bne.n	800452e <__libc_init_array+0x2e>
 8004522:	bd70      	pop	{r4, r5, r6, pc}
 8004524:	00b3      	lsls	r3, r6, #2
 8004526:	58eb      	ldr	r3, [r5, r3]
 8004528:	4798      	blx	r3
 800452a:	3601      	adds	r6, #1
 800452c:	e7ee      	b.n	800450c <__libc_init_array+0xc>
 800452e:	00b3      	lsls	r3, r6, #2
 8004530:	58eb      	ldr	r3, [r5, r3]
 8004532:	4798      	blx	r3
 8004534:	3601      	adds	r6, #1
 8004536:	e7f2      	b.n	800451e <__libc_init_array+0x1e>
 8004538:	080045c8 	.word	0x080045c8
 800453c:	080045c8 	.word	0x080045c8
 8004540:	080045c8 	.word	0x080045c8
 8004544:	080045cc 	.word	0x080045cc

08004548 <_init>:
 8004548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800454a:	46c0      	nop			; (mov r8, r8)
 800454c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800454e:	bc08      	pop	{r3}
 8004550:	469e      	mov	lr, r3
 8004552:	4770      	bx	lr

08004554 <_fini>:
 8004554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004556:	46c0      	nop			; (mov r8, r8)
 8004558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800455a:	bc08      	pop	{r3}
 800455c:	469e      	mov	lr, r3
 800455e:	4770      	bx	lr
